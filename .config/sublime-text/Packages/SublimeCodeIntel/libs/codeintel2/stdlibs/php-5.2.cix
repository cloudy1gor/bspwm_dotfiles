<codeintel description="Cix data for PHP 5.2.4" file="php-5.2.cix" name="PHP 5.2.4" version="2.0">
  <file lang="PHP" mtime="1235684957" path="php-5.2.cix">
    <scope id="global" ilk="blob" lang="PHP" name="*">
      <scope ilk="class" name="stdClass" />
      <scope doc="@ingroup ZendEngine&#xA;@brief Basic Exception class.&#xA;@since PHP 5.0" ilk="class" line="244" lineend="331" name="Exception">
        <scope attributes="final private" doc="Prevent clone" ilk="function" line="266" lineend="266" name="__clone" signature="__clone()" />
        <scope attributes="__ctor__" doc="Construct an exception&#xA;&#xA;@param $message Some text describing the exception&#xA;@param $code    Some code describing the exception" ilk="function" line="273" lineend="282" name="__construct" signature="__construct(message=NULL, code=0)" />
        <scope attributes="final public" doc="@return the message passed to the constructor" ilk="function" line="286" lineend="289" name="getMessage" returns="the" signature="getMessage()" />
        <scope attributes="final public" doc="@return the code passed to the constructor" ilk="function" line="293" lineend="296" name="getCode" returns="the" signature="getCode()" />
        <scope attributes="final public" doc="@return the name of the file where the exception was thrown" ilk="function" line="300" lineend="303" name="getFile" returns="the" signature="getFile()" />
        <scope attributes="final public" doc="@return the line number where the exception was thrown" ilk="function" line="307" lineend="310" name="getLine" returns="the" signature="getLine()" />
        <scope attributes="final public" doc="@return the stack trace as array" ilk="function" line="314" lineend="317" name="getTrace" returns="the" signature="getTrace()" />
        <scope attributes="final public" doc="@return the stack trace as string" ilk="function" line="321" lineend="323" name="getTraceAsString" returns="the" signature="getTraceAsString()" />
        <scope attributes="public" doc="@return string represenation of exception" ilk="function" line="327" lineend="330" name="__toString" returns="string" signature="__toString()" />
        <variable attributes="protected" citdl="message" line="247" name="message" />
        <variable attributes="private" line="250" name="string" />
        <variable attributes="protected" citdl="code" line="253" name="code" />
        <variable attributes="protected" citdl="__FILE__" line="256" name="file" />
        <variable attributes="protected" citdl="__LINE__" line="259" name="line" />
        <variable attributes="private" citdl="debug_backtrace()" line="262" name="trace" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="ErrorException">
        <scope doc="ErrorException constructor" ilk="function" name="__construct" signature="__construct(string message, int code, int severity [, string filename [, int lineno]])" src="zend_exceptions.c" />
        <scope doc="Get the exception severity" ilk="function" name="getSeverity" returns="int" signature="getSeverity()" src="zend_exceptions.c" />
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="getMessage" signature="getMessage()" />
        <scope ilk="function" name="getCode" signature="getCode()" />
        <scope ilk="function" name="getFile" signature="getFile()" />
        <scope ilk="function" name="getLine" signature="getLine()" />
        <scope ilk="function" name="getTrace" signature="getTrace()" />
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <variable name="message" />
        <variable name="code" />
        <variable name="file" />
        <variable name="line" />
        <variable name="severity" />
      </scope>
      <scope ilk="class" name="XMLWriter">
        <scope ilk="function" name="openUri" signature="openUri()" />
        <scope doc="Creates a new XMLWriter using memory for string output." ilk="function" name="openMemory" signature="openMemory ( void  )" />
        <scope doc="Toggles indentation on or off." ilk="function" name="setIndent" signature="setIndent ( bool $indent  )" />
        <scope doc="Sets the string which will be used to indent each element/attribute of the resulting xml." ilk="function" name="setIndentString" signature="setIndentString ( string $indentString  )" />
        <scope doc="Starts a comment." ilk="function" name="startComment" signature="startComment ( void  )" />
        <scope doc="Ends the current comment." ilk="function" name="endComment" signature="endComment ( void  )" />
        <scope doc="Starts an attribute." ilk="function" name="startAttribute" signature="startAttribute ( string $name  )" />
        <scope doc="Ends the current attribute." ilk="function" name="endAttribute" signature="endAttribute ( void  )" />
        <scope doc="Writes a full attribute." ilk="function" name="writeAttribute" signature="writeAttribute ( string $name  , string $value  )" />
        <scope doc="Starts an element." ilk="function" name="startElement" signature="startElement ( string $name  )" />
        <scope doc="Ends the current element." ilk="function" name="endElement" signature="endElement ( void  )" />
        <scope doc="End the current xml element. Writes an end tag even if the element is empty." ilk="function" name="fullEndElement" signature="fullEndElement ( void  )" />
        <scope ilk="function" name="startElementNs" signature="startElementNs()" />
        <scope doc="Writes a full element tag." ilk="function" name="writeElement" signature="writeElement ( string $name  [, string $content ] )" />
        <scope ilk="function" name="writeElementNs" signature="writeElementNs()" />
        <scope ilk="function" name="startPi" signature="startPi()" />
        <scope ilk="function" name="endPi" signature="endPi()" />
        <scope ilk="function" name="writePi" signature="writePi()" />
        <scope ilk="function" name="startCdata" signature="startCdata()" />
        <scope ilk="function" name="endCdata" signature="endCdata()" />
        <scope ilk="function" name="writeCdata" signature="writeCdata()" />
        <scope doc="Writes a text." ilk="function" name="text" signature="text ( string $content  )" />
        <scope doc="Writes a raw xml text." ilk="function" name="writeRaw" signature="writeRaw ( string $content  )" />
        <scope doc="Starts a document." ilk="function" name="startDocument" signature="startDocument ([ string $version  [, string $encoding  [, string $standalone ]]] )" />
        <scope doc="Ends the current document." ilk="function" name="endDocument" signature="endDocument ( void  )" />
        <scope doc="Writes a full comment." ilk="function" name="writeComment" signature="writeComment ( string $content  )" />
        <scope ilk="function" name="startDtd" signature="startDtd()" />
        <scope ilk="function" name="endDtd" signature="endDtd()" />
        <scope ilk="function" name="writeDtd" signature="writeDtd()" />
        <scope ilk="function" name="startDtdElement" signature="startDtdElement()" />
        <scope ilk="function" name="endDtdElement" signature="endDtdElement()" />
        <scope ilk="function" name="writeDtdElement" signature="writeDtdElement()" />
        <scope ilk="function" name="startDtdAttlist" signature="startDtdAttlist()" />
        <scope ilk="function" name="endDtdAttlist" signature="endDtdAttlist()" />
        <scope ilk="function" name="writeDtdAttlist" signature="writeDtdAttlist()" />
        <scope ilk="function" name="startDtdEntity" signature="startDtdEntity()" />
        <scope ilk="function" name="endDtdEntity" signature="endDtdEntity()" />
        <scope ilk="function" name="writeDtdEntity" signature="writeDtdEntity()" />
        <scope doc="Returns the current buffer." ilk="function" name="outputMemory" signature="outputMemory ([ bool $flush ] )" />
        <scope doc="Flushes the current buffer." ilk="function" name="flush" signature="flush ([ bool $empty ] )" />
      </scope>
      <scope ilk="class" name="LibXMLError" />
      <scope classrefs="Exception" ilk="class" name="DOMException">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__construct" signature="__construct()" />
        <scope ilk="function" name="getMessage" signature="getMessage()" />
        <scope ilk="function" name="getCode" signature="getCode()" />
        <scope ilk="function" name="getFile" signature="getFile()" />
        <scope ilk="function" name="getLine" signature="getLine()" />
        <scope ilk="function" name="getTrace" signature="getTrace()" />
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <variable name="message" />
        <variable name="code" />
        <variable name="file" />
        <variable name="line" />
      </scope>
      <scope ilk="class" name="DOMStringList">
        <scope ilk="function" name="item" signature="item()" />
      </scope>
      <scope ilk="class" name="DOMNameList">
        <scope ilk="function" name="getName" signature="getName()" />
        <scope ilk="function" name="getNamespaceURI" signature="getNamespaceURI()" />
      </scope>
      <scope ilk="class" name="DOMImplementationList">
        <scope ilk="function" name="item" signature="item()" />
      </scope>
      <scope ilk="class" name="DOMImplementationSource">
        <scope ilk="function" name="getDomimplementation" signature="getDomimplementation()" />
        <scope ilk="function" name="getDomimplementations" signature="getDomimplementations()" />
      </scope>
      <scope ilk="class" name="DOMImplementation">
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="hasFeature" signature="hasFeature()" />
        <scope ilk="function" name="createDocumentType" signature="createDocumentType()" />
        <scope ilk="function" name="createDocument" signature="createDocument()" />
      </scope>
      <scope ilk="class" name="DOMNode">
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope doc="Gets an xpath for a node" ilk="function" name="getNodePath" returns="int" signature="getNodePath()" src="node.c" />
        <scope doc="Canonicalize nodes to a string" ilk="function" name="C14N" returns="string" signature="C14N([bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])" src="node.c" />
        <scope doc="Canonicalize nodes to a file" ilk="function" name="C14NFile" returns="int" signature="C14NFile(string uri [, bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])" src="node.c" />
      </scope>
      <scope ilk="class" name="DOMNameSpaceNode" />
      <scope classrefs="DOMNode" ilk="class" name="DOMDocumentFragment">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct()" src="documentfragment.c" />
        <scope doc="" ilk="function" name="appendXML" returns="void" signature="appendXML(string data)" src="documentfragment.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMDocument">
        <scope ilk="function" name="createElement" signature="createElement()" />
        <scope ilk="function" name="createDocumentFragment" signature="createDocumentFragment()" />
        <scope ilk="function" name="createTextNode" signature="createTextNode()" />
        <scope ilk="function" name="createComment" signature="createComment()" />
        <scope ilk="function" name="createCDATASection" signature="createCDATASection()" />
        <scope ilk="function" name="createProcessingInstruction" signature="createProcessingInstruction()" />
        <scope ilk="function" name="createAttribute" signature="createAttribute()" />
        <scope ilk="function" name="createEntityReference" signature="createEntityReference()" />
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName()" />
        <scope ilk="function" name="importNode" signature="importNode()" />
        <scope ilk="function" name="createElementNS" signature="createElementNS()" />
        <scope ilk="function" name="createAttributeNS" signature="createAttributeNS()" />
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()" />
        <scope ilk="function" name="getElementById" signature="getElementById()" />
        <scope ilk="function" name="adoptNode" signature="adoptNode()" />
        <scope ilk="function" name="normalizeDocument" signature="normalizeDocument()" />
        <scope ilk="function" name="renameNode" signature="renameNode()" />
        <scope ilk="function" name="load" signature="load()" />
        <scope ilk="function" name="save" signature="save()" />
        <scope ilk="function" name="loadXML" signature="loadXML()" />
        <scope ilk="function" name="saveXML" signature="saveXML()" />
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct([string version], [string encoding])" src="document.c" />
        <scope ilk="function" name="validate" signature="validate()" />
        <scope ilk="function" name="xinclude" signature="xinclude()" />
        <scope ilk="function" name="loadHTML" signature="loadHTML()" />
        <scope ilk="function" name="loadHTMLFile" signature="loadHTMLFile()" />
        <scope ilk="function" name="saveHTML" signature="saveHTML()" />
        <scope ilk="function" name="saveHTMLFile" signature="saveHTMLFile()" />
        <scope ilk="function" name="schemaValidate" signature="schemaValidate()" />
        <scope ilk="function" name="schemaValidateSource" signature="schemaValidateSource()" />
        <scope ilk="function" name="relaxNGValidate" signature="relaxNGValidate()" />
        <scope ilk="function" name="relaxNGValidateSource" signature="relaxNGValidateSource()" />
        <scope doc="Register extended class used to create base node type" ilk="function" name="registerNodeClass" returns="boolean" signature="registerNodeClass(string baseclass, string extendedclass)" src="document.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope ilk="class" name="DOMNodeList">
        <scope ilk="function" name="item" signature="item()" />
      </scope>
      <scope ilk="class" name="DOMNamedNodeMap">
        <scope ilk="function" name="getNamedItem" signature="getNamedItem()" />
        <scope ilk="function" name="setNamedItem" signature="setNamedItem()" />
        <scope ilk="function" name="removeNamedItem" signature="removeNamedItem()" />
        <scope ilk="function" name="item" signature="item()" />
        <scope ilk="function" name="getNamedItemNS" signature="getNamedItemNS()" />
        <scope ilk="function" name="setNamedItemNS" signature="setNamedItemNS()" />
        <scope ilk="function" name="removeNamedItemNS" signature="removeNamedItemNS()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMCharacterData">
        <scope ilk="function" name="substringData" signature="substringData()" />
        <scope ilk="function" name="appendData" signature="appendData()" />
        <scope ilk="function" name="insertData" signature="insertData()" />
        <scope ilk="function" name="deleteData" signature="deleteData()" />
        <scope ilk="function" name="replaceData" signature="replaceData()" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMAttr">
        <scope ilk="function" name="isId" signature="isId()" />
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string name, [string value])" src="attr.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMElement">
        <scope ilk="function" name="getAttribute" signature="getAttribute()" />
        <scope ilk="function" name="setAttribute" signature="setAttribute()" />
        <scope ilk="function" name="removeAttribute" signature="removeAttribute()" />
        <scope ilk="function" name="getAttributeNode" signature="getAttributeNode()" />
        <scope ilk="function" name="setAttributeNode" signature="setAttributeNode()" />
        <scope ilk="function" name="removeAttributeNode" signature="removeAttributeNode()" />
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName()" />
        <scope ilk="function" name="getAttributeNS" signature="getAttributeNS()" />
        <scope ilk="function" name="setAttributeNS" signature="setAttributeNS()" />
        <scope ilk="function" name="removeAttributeNS" signature="removeAttributeNS()" />
        <scope ilk="function" name="getAttributeNodeNS" signature="getAttributeNodeNS()" />
        <scope ilk="function" name="setAttributeNodeNS" signature="setAttributeNodeNS()" />
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()" />
        <scope ilk="function" name="hasAttribute" signature="hasAttribute()" />
        <scope ilk="function" name="hasAttributeNS" signature="hasAttributeNS()" />
        <scope ilk="function" name="setIdAttribute" signature="setIdAttribute()" />
        <scope ilk="function" name="setIdAttributeNS" signature="setIdAttributeNS()" />
        <scope ilk="function" name="setIdAttributeNode" signature="setIdAttributeNode()" />
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string name, [string value], [string uri])" src="element.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMCharacterData" ilk="class" name="DOMText">
        <scope ilk="function" name="splitText" signature="splitText()" />
        <scope ilk="function" name="isWhitespaceInElementContent" signature="isWhitespaceInElementContent()" />
        <scope ilk="function" name="isElementContentWhitespace" signature="isElementContentWhitespace()" />
        <scope ilk="function" name="replaceWholeText" signature="replaceWholeText()" />
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct([string value])" src="text.c" />
        <scope ilk="function" name="substringData" signature="substringData()" />
        <scope ilk="function" name="appendData" signature="appendData()" />
        <scope ilk="function" name="insertData" signature="insertData()" />
        <scope ilk="function" name="deleteData" signature="deleteData()" />
        <scope ilk="function" name="replaceData" signature="replaceData()" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMCharacterData" ilk="class" name="DOMComment">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct([string value])" src="comment.c" />
        <scope ilk="function" name="substringData" signature="substringData()" />
        <scope ilk="function" name="appendData" signature="appendData()" />
        <scope ilk="function" name="insertData" signature="insertData()" />
        <scope ilk="function" name="deleteData" signature="deleteData()" />
        <scope ilk="function" name="replaceData" signature="replaceData()" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope ilk="class" name="DOMTypeinfo" />
      <scope ilk="class" name="DOMUserDataHandler">
        <scope ilk="function" name="handle" signature="handle()" />
      </scope>
      <scope ilk="class" name="DOMDomError" />
      <scope ilk="class" name="DOMErrorHandler">
        <scope ilk="function" name="handleError" signature="handleError()" />
      </scope>
      <scope ilk="class" name="DOMLocator" />
      <scope ilk="class" name="DOMConfiguration">
        <scope ilk="function" name="setParameter" signature="setParameter()" />
        <scope ilk="function" name="getParameter" signature="getParameter()" />
        <scope ilk="function" name="canSetParameter" signature="canSetParameter()" />
      </scope>
      <scope classrefs="DOMText" ilk="class" name="DOMCdataSection">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string value)" src="cdatasection.c" />
        <scope ilk="function" name="splitText" signature="splitText()" />
        <scope ilk="function" name="isWhitespaceInElementContent" signature="isWhitespaceInElementContent()" />
        <scope ilk="function" name="isElementContentWhitespace" signature="isElementContentWhitespace()" />
        <scope ilk="function" name="replaceWholeText" signature="replaceWholeText()" />
        <scope ilk="function" name="substringData" signature="substringData()" />
        <scope ilk="function" name="appendData" signature="appendData()" />
        <scope ilk="function" name="insertData" signature="insertData()" />
        <scope ilk="function" name="deleteData" signature="deleteData()" />
        <scope ilk="function" name="replaceData" signature="replaceData()" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMDocumentType">
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope ilk="class" name="DOMNotation" />
      <scope classrefs="DOMNode" ilk="class" name="DOMEntity">
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMEntityReference">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="entityreference.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope classrefs="DOMNode" ilk="class" name="DOMProcessingInstruction">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string name, [string value])" src="processinginstruction.c" />
        <scope ilk="function" name="insertBefore" signature="insertBefore()" />
        <scope ilk="function" name="replaceChild" signature="replaceChild()" />
        <scope ilk="function" name="removeChild" signature="removeChild()" />
        <scope ilk="function" name="appendChild" signature="appendChild()" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()" />
        <scope ilk="function" name="cloneNode" signature="cloneNode()" />
        <scope ilk="function" name="normalize" signature="normalize()" />
        <scope ilk="function" name="isSupported" signature="isSupported()" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()" />
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()" />
        <scope ilk="function" name="isSameNode" signature="isSameNode()" />
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()" />
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()" />
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()" />
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()" />
        <scope ilk="function" name="getFeature" signature="getFeature()" />
        <scope ilk="function" name="setUserData" signature="setUserData()" />
        <scope ilk="function" name="getUserData" signature="getUserData()" />
        <scope ilk="function" name="getNodePath" signature="getNodePath()" />
        <scope ilk="function" name="C14N" signature="C14N()" />
        <scope ilk="function" name="C14NFile" signature="C14NFile()" />
      </scope>
      <scope ilk="class" name="DOMStringExtend">
        <scope ilk="function" name="findOffset16" signature="findOffset16()" />
        <scope ilk="function" name="findOffset32" signature="findOffset32()" />
      </scope>
      <scope ilk="class" name="DOMXPath">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(DOMDocument doc)" src="xpath.c" />
        <scope ilk="function" name="registerNamespace" signature="registerNamespace()" />
        <scope ilk="function" name="query" signature="query()" />
        <scope ilk="function" name="evaluate" signature="evaluate()" />
      </scope>
      <scope ilk="class" name="XMLReader">
        <scope doc="Closes xmlreader - current frees resources until&#xA;xmlTextReaderClose is fixed in libxml" ilk="function" name="close" returns="boolean" signature="close()" src="php_xmlreader.c" />
        <scope doc="Get value of an attribute from current element" ilk="function" name="getAttribute" returns="string" signature="getAttribute(string name)" src="php_xmlreader.c" />
        <scope doc="Get value of an attribute at index from current element" ilk="function" name="getAttributeNo" returns="string" signature="getAttributeNo(int index)" src="php_xmlreader.c" />
        <scope doc="Get value of a attribute via name and namespace from&#xA;current element" ilk="function" name="getAttributeNs" returns="string" signature="getAttributeNs(string name, string namespaceURI)" src="php_xmlreader.c" />
        <scope doc="Indicates whether given property one of the parser&#xA;option constants is set or not on parser" ilk="function" name="getParserProperty" returns="boolean" signature="getParserProperty(int property)" src="php_xmlreader.c" />
        <scope doc="Returns boolean indicating if parsed document is valid&#xA;or not Must set XMLREADER LOADDTD or XMLREADER VALIDATE&#xA;parser option prior" ilk="function" name="isValid" returns="boolean" signature="isValid()" src="php_xmlreader.c" />
        <scope doc="Return namespaceURI for associated prefix on current&#xA;node" ilk="function" name="lookupNamespace" returns="string" signature="lookupNamespace(string prefix)" src="php_xmlreader.c" />
        <scope doc="Positions reader at attribute at spcecified index&#xA;Returns TRUE on success and FALSE on failure" ilk="function" name="moveToAttributeNo" returns="boolean" signature="moveToAttributeNo(int index)" src="php_xmlreader.c" />
        <scope doc="Positions reader at specified attribute - Returns TRUE&#xA;on success and FALSE on failure" ilk="function" name="moveToAttribute" returns="boolean" signature="moveToAttribute(string name)" src="php_xmlreader.c" />
        <scope doc="Positions reader at attribute spcified by name and&#xA;namespaceURI Returns TRUE on success and FALSE on&#xA;failure" ilk="function" name="moveToAttributeNs" returns="boolean" signature="moveToAttributeNs(string name, string namespaceURI)" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the node&#xA;that contains the current Attribute node" ilk="function" name="moveToElement" returns="boolean" signature="moveToElement()" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the first&#xA;attribute associated with the current node" ilk="function" name="moveToFirstAttribute" returns="boolean" signature="moveToFirstAttribute()" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the next&#xA;attribute associated with the current node" ilk="function" name="moveToNextAttribute" returns="boolean" signature="moveToNextAttribute()" src="php_xmlreader.c" />
        <scope doc="Sets the URI that the the XMLReader will parse" ilk="function" name="open" returns="boolean" signature="open(string URI [, string encoding [, int options]])" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the next&#xA;node in the stream" ilk="function" name="read" returns="boolean" signature="read()" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the next&#xA;node in the stream" ilk="function" name="next" returns="boolean" signature="next([string localname])" src="php_xmlreader.c" />
        <scope doc="Sets parser property one of the parser option constants&#xA;Properties must be set after open or XML and before the" ilk="function" name="setParserProperty" returns="boolean" signature="setParserProperty(int property, boolean value)" src="php_xmlreader.c" />
        <scope doc="Sets the string that the the XMLReader will parse" ilk="function" name="setRelaxNGSchema" returns="boolean" signature="setRelaxNGSchema(string filename)" src="php_xmlreader.c" />
        <scope doc="Sets the string that the the XMLReader will parse" ilk="function" name="setRelaxNGSchemaSource" returns="boolean" signature="setRelaxNGSchemaSource(string source)" src="php_xmlreader.c" />
        <scope doc="Sets the string that the the XMLReader will parse" ilk="function" name="XML" returns="boolean" signature="XML(string source [, string encoding [, int options]])" src="php_xmlreader.c" />
        <scope doc="Moves the position of the current instance to the next&#xA;node in the stream" ilk="function" name="expand" returns="boolean" signature="expand()" src="php_xmlreader.c" />
        <variable citdl="integer" ilk="constant" name="NONE" />
        <variable citdl="integer" ilk="constant" name="ELEMENT" />
        <variable citdl="integer" ilk="constant" name="ATTRIBUTE" />
        <variable citdl="integer" ilk="constant" name="TEXT" />
        <variable citdl="integer" ilk="constant" name="CDATA" />
        <variable citdl="integer" ilk="constant" name="ENTITY_REF" />
        <variable citdl="integer" ilk="constant" name="ENTITY" />
        <variable citdl="integer" ilk="constant" name="PI" />
        <variable citdl="integer" ilk="constant" name="COMMENT" />
        <variable citdl="integer" ilk="constant" name="DOC" />
        <variable citdl="integer" ilk="constant" name="DOC_TYPE" />
        <variable citdl="integer" ilk="constant" name="DOC_FRAGMENT" />
        <variable citdl="integer" ilk="constant" name="NOTATION" />
        <variable citdl="integer" ilk="constant" name="WHITESPACE" />
        <variable citdl="integer" ilk="constant" name="SIGNIFICANT_WHITESPACE" />
        <variable citdl="integer" ilk="constant" name="END_ELEMENT" />
        <variable citdl="integer" ilk="constant" name="END_ENTITY" />
        <variable citdl="integer" ilk="constant" name="XML_DECLARATION" />
        <variable citdl="integer" ilk="constant" name="LOADDTD" />
        <variable citdl="integer" ilk="constant" name="DEFAULTATTRS" />
        <variable citdl="integer" ilk="constant" name="VALIDATE" />
        <variable citdl="integer" ilk="constant" name="SUBST_ENTITIES" />
      </scope>
      <scope ilk="class" name="SimpleXMLElement">
        <scope doc="SimpleXMLElement constructor" ilk="function" name="__construct" signature="__construct(string data [, int options [, bool data_is_url [, string ns [, bool is_prefix]]]])" src="simplexml.c" />
        <scope doc="Return a well-formed XML string based on SimpleXML&#xA;element" ilk="function" name="asXML" returns="string" signature="asXML([string filename])" src="simplexml.c" />
        <scope ilk="function" name="saveXML" signature="saveXML()" />
        <scope doc="Runs XPath query on the XML data" ilk="function" name="xpath" returns="array" signature="xpath(string path)" src="simplexml.c" />
        <scope doc="Creates a prefix ns context for the next XPath query" ilk="function" name="registerXPathNamespace" returns="bool" signature="registerXPathNamespace(string prefix, string ns)" src="simplexml.c" />
        <scope doc="Identifies an element&apos;s attributes" ilk="function" name="attributes" returns="array" signature="attributes([string ns [, bool is_prefix]])" src="simplexml.c" />
        <scope doc="Finds children of given node" ilk="function" name="children" returns="object" signature="children([string ns [, bool is_prefix]])" src="simplexml.c" />
        <scope doc="Return all namespaces in use" ilk="function" name="getNamespaces" returns="string" signature="getNamespaces([bool recursve])" src="simplexml.c" />
        <scope doc="Return all namespaces registered with document" ilk="function" name="getDocNamespaces" returns="string" signature="getDocNamespaces([bool recursive])" src="simplexml.c" />
        <scope doc="Finds children of given node" ilk="function" name="getName" returns="object" signature="getName()" src="simplexml.c" />
        <scope doc="Add Element with optional namespace information" ilk="function" name="addChild" returns="void" signature="addChild(string qName [, string value [, string ns]])" src="simplexml.c" />
        <scope doc="Add Attribute with optional namespace information" ilk="function" name="addAttribute" returns="void" signature="addAttribute(string qName, string value [,string ns])" src="simplexml.c" />
      </scope>
      <scope doc="@file recursiveiteratoriterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class RecursiveIteratorIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/**&#xD;&#xA;@brief   Iterates through recursive iterators&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.2&#xD;&#xA;@since PHP 5.0&#xD;&#xA;&#xD;&#xA;The objects of this class are created by instances of RecursiveIterator. &#xD;&#xA;Elements of those iterators may be traversable themselves. If so these &#xD;&#xA;sub elements are recursed into." ilk="class" interfacerefs="OuterIterator" line="22" lineend="235" name="RecursiveIteratorIterator">
        <scope attributes="__ctor__" doc="Construct from RecursiveIterator&#xD;&#xA;&#xD;&#xA;@param it     RecursiveIterator to iterate&#xD;&#xA;@param mode   Operation mode (one of):&#xD;&#xA;              - LEAVES_ONLY only show leaves&#xD;&#xA;              - SELF_FIRST  show parents prior to their childs&#xD;&#xA;              - CHILD_FIRST show all children prior to their parent&#xD;&#xA;@param flags  Control flags, zero or any combination of the following&#xD;&#xA;              (since PHP 5.1).&#xD;&#xA;              - CATCH_GET_CHILD which catches exceptions during&#xD;&#xA;                getChildren() calls and simply jumps to the next &#xD;&#xA;                element." ilk="function" line="53" lineend="58" name="__construct" signature="__construct(RecursiveIterator, Operation, Control)" />
        <scope doc="Rewind to top iterator as set in constructor" ilk="function" line="62" lineend="71" name="rewind" signature="rewind()" />
        <scope doc="@return whether iterator is valid" ilk="function" line="75" lineend="87" name="valid" returns="whether" signature="valid()" />
        <scope doc="@return current key" ilk="function" line="91" lineend="95" name="key" returns="current" signature="key()" />
        <scope doc="@return current element" ilk="function" line="99" lineend="103" name="current" returns="current" signature="current()" />
        <scope doc="Forward to next element" ilk="function" line="107" lineend="154" name="next" signature="next()" />
        <scope doc="@return Sub Iterator at given level or if unspecified the current sub &#xD;&#xA;         Iterator" ilk="function" line="159" lineend="165" name="getSubIterator" returns="Sub" signature="getSubIterator(level=NULL)" />
        <scope doc="@return The inner iterator" ilk="function" line="170" lineend="173" name="getInnerIterator" returns="The" signature="getInnerIterator()" />
        <scope doc="@return Current Depth (Number of parents)" ilk="function" line="177" lineend="180" name="getDepth" returns="Current" signature="getDepth()" />
        <scope doc="@return whether current sub iterators current element has children&#xD;&#xA;@since PHP 5.1" ilk="function" line="185" lineend="188" name="callHasChildren" returns="whether" signature="callHasChildren()" />
        <scope doc="@return current sub iterators current children&#xD;&#xA;@since PHP 5.1" ilk="function" line="193" lineend="196" name="callGetChildren" returns="current" signature="callGetChildren()" />
        <scope doc="Called right after calling getChildren() and its rewind().&#xD;&#xA;@since PHP 5.1" ilk="function" line="201" lineend="203" name="beginChildren" signature="beginChildren()" />
        <scope doc="Called after current child iterator is invalid and right before it&#xD;&#xA;gets destructed.&#xD;&#xA;@since PHP 5.1" ilk="function" line="209" lineend="211" name="endChildren" signature="endChildren()" />
        <scope attributes="private" ilk="function" line="213" lineend="228" name="callNextElement" signature="callNextElement(after_move)" />
        <scope doc="Called when the next element is available" ilk="function" line="232" lineend="234" name="nextElement" signature="nextElement()" />
        <variable citdl="int" ilk="constant" line="25" name="LEAVES_ONLY" />
        <variable citdl="int" ilk="constant" line="27" name="SELF_FIRST" />
        <variable citdl="int" ilk="constant" line="29" name="CHILD_FIRST" />
        <variable citdl="int" ilk="constant" line="33" name="CATCH_GET_CHILD" />
        <variable attributes="private" citdl="array()" line="35" name="ait" />
        <variable attributes="private" citdl="int" line="36" name="count" />
        <variable attributes="private" citdl="self.LEAVES_ONLY" line="37" name="mode" />
        <variable attributes="private" citdl="int" line="38" name="flags" />
      </scope>
      <scope doc="@file iteratoriterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class IteratorIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief Basic Iterator wrapper&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;This iterator wrapper allows to convert anything that is traversable into &#xD;&#xA;an Iterator. It is very important to understand that most classes that do &#xD;&#xA;not implement Iterator have their reasone to. Most likely they do not allow&#xD;&#xA;the full Iterator feature set. If so you need to provide techniques to&#xD;&#xA;prevent missuse. If you do not you must expect exceptions or fatal erros.&#xD;&#xA;&#xD;&#xA;It is also possible to derive the class and implement IteratorAggregate by&#xD;&#xA;downcasting the instances returned in getIterator. See the following&#xD;&#xA;example (assuming BaseClass implements Traversable):&#xD;&#xA;\code&#xD;&#xA;class SomeClass extends BaseClass implements IteratorAggregate&#xD;&#xA;{&#xD;&#xA;  function getIterator()&#xD;&#xA;  {&#xD;&#xA;    return new IteratorIterator($this, &apos;BaseClass&apos;);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;\endcode&#xD;&#xA;&#xD;&#xA;As you can see in the example this approach requires that the class to &#xD;&#xA;downcast to is actually a base class of the specified iterator to wrap.&#xD;&#xA;Omitting the downcast in the above example would result in an endless loop&#xD;&#xA;since IteratorIterator::__construct() would call SomeClass::getIterator()." ilk="class" interfacerefs="OuterIterator" line="40" lineend="119" name="IteratorIterator">
        <scope attributes="__ctor__" doc="Construct an IteratorIterator from an Iterator or an IteratorAggregate.&#xD;&#xA;&#xD;&#xA;@param iterator  inner iterator&#xD;&#xA;@param classname optional class the iterator has to be downcasted to" ilk="function" line="47" lineend="61" name="__construct" signature="__construct(inner, optional)" />
        <scope doc="\return the inner iterator as passed to the constructor" ilk="function" line="65" lineend="68" name="getInnerIterator" returns="this.iterator" signature="getInnerIterator()" />
        <scope doc="\return whether the iterator is valid" ilk="function" line="72" lineend="75" name="valid" returns="this.iterator.valid()" signature="valid()" />
        <scope doc="\return current key" ilk="function" line="79" lineend="82" name="key" returns="this.iterator.key()" signature="key()" />
        <scope doc="\return current value" ilk="function" line="86" lineend="89" name="current" returns="this.iterator.current()" signature="current()" />
        <scope doc="forward to next element" ilk="function" line="93" lineend="96" name="next" returns="this.iterator.next()" signature="next()" />
        <scope doc="rewind to the first element" ilk="function" line="100" lineend="103" name="rewind" returns="this.iterator.rewind()" signature="rewind()" />
        <scope doc="Aggregate the inner iterator&#xD;&#xA;&#xD;&#xA;@param func    Name of method to invoke&#xD;&#xA;@param params  Array of parameters to pass to method" ilk="function" line="110" lineend="113" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)" />
        <variable attributes="private" line="118" name="iterator" />
      </scope>
      <scope attributes="abstract" doc="@file filteriterator.inc&#xA;@ingroup SPL&#xA;@brief class FilterIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2006&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Abstract filter for iterators&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.1&#xD;&#xA;@since PHP 5.0&#xD;&#xA;&#xD;&#xA;Instances of this class act as a filter around iterators. In other words &#xD;&#xA;you can put an iterator into the constructor and the instance will only &#xD;&#xA;return selected (accepted) elements.&#xD;&#xA;&#xD;&#xA;The only thing that needs to be done to make this work is implementing &#xD;&#xA;method accept(). Typically this invloves reading the current element or &#xD;&#xA;key of the inner Iterator and checking whether it is acceptable." ilk="class" interfacerefs="OuterIterator" line="26" lineend="125" name="FilterIterator">
        <scope attributes="__ctor__" doc="Constructs a filter around another iterator.&#xD;&#xA;&#xD;&#xA;@param it     Iterator to filter" ilk="function" line="35" lineend="37" name="__construct" signature="__construct(Iterator)" />
        <scope doc="Rewind the inner iterator." ilk="function" line="42" lineend="45" name="rewind" signature="rewind()" />
        <scope attributes="abstract" doc="Accept function to decide whether an element of the inner iterator&#xD;&#xA;should be accessible through the Filteriterator.&#xD;&#xA;&#xD;&#xA;@return whether or not to expose the current element of the inner&#xD;&#xA;        iterator." ilk="function" line="54" lineend="54" name="accept" returns="whether" signature="accept()" />
        <scope attributes="protected" doc="Fetch next element and store it.&#xD;&#xA;&#xD;&#xA;@return void" ilk="function" line="61" lineend="68" name="fetch" signature="fetch()" />
        <scope doc="Move to next element&#xD;&#xA;&#xD;&#xA;@return void" ilk="function" line="75" lineend="78" name="next" signature="next()" />
        <scope doc="@return Whether more elements are available" ilk="function" line="83" lineend="85" name="valid" returns="Whether" signature="valid()" />
        <scope doc="@return The current key" ilk="function" line="90" lineend="92" name="key" returns="The" signature="key()" />
        <scope doc="@return The current value" ilk="function" line="97" lineend="99" name="current" returns="The" signature="current()" />
        <scope attributes="protected" doc="hidden __clone" ilk="function" line="104" lineend="106" name="__clone" signature="__clone()" />
        <scope doc="@return The inner iterator" ilk="function" line="111" lineend="114" name="getInnerIterator" returns="The" signature="getInnerIterator()" />
        <scope doc="Aggregate the inner iterator&#xD;&#xA;&#xD;&#xA;@param func    Name of method to invoke&#xD;&#xA;@param params  Array of parameters to pass to method" ilk="function" line="121" lineend="124" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)" />
        <variable attributes="private" citdl="it" line="28" name="it" />
      </scope>
      <scope attributes="abstract" classrefs="FilterIterator" doc="@file recursivefilteriterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class RecursiveFilterIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   Iterator to filter recursive iterators&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;Passes the RecursiveIterator interface to the inner Iterator and provides&#xD;&#xA;the same functionality as FilterIterator. This allows you to skip parents&#xD;&#xA;and all their childs before loading them all. You need to care about&#xD;&#xA;function getChildren() because it may not always suit your needs. The &#xD;&#xA;builtin behavior uses reflection to return a new instance of the exact same&#xD;&#xA;class it is called from. That is you extend RecursiveFilterIterator and&#xD;&#xA;getChildren() will create instance of that class. The problem is that doing&#xD;&#xA;this does not transport any state or control information of your accept()&#xD;&#xA;implementation to the new instance. To overcome this problem you might &#xD;&#xA;need to overwrite getChildren(), call this implementation and pass the&#xD;&#xA;control vaules manually." ilk="class" interfacerefs="RecursiveIterator" line="30" lineend="60" name="RecursiveFilterIterator">
        <scope attributes="__ctor__" doc="@param $it the RecursiveIterator to filter" ilk="function" line="34" lineend="37" name="__construct" signature="__construct()" />
        <scope doc="@return whether the current element has children" ilk="function" line="41" lineend="44" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return an iterator for the current elements children&#xD;&#xA;&#xD;&#xA;@note the returned iterator will be of the same class as $this" ilk="function" line="50" lineend="57" name="getChildren" returns="an" signature="getChildren()" />
        <variable attributes="private" line="59" name="ref" />
      </scope>
      <scope classrefs="RecursiveFilterIterator" doc="@file parentiterator.inc&#xA;@ingroup SPL&#xA;@brief class FilterIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2006&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Iterator to filter parents&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.2&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;This extended FilterIterator allows a recursive iteration using &#xD;&#xA;RecursiveIteratorIterator that only shows those elements which have &#xD;&#xA;children." ilk="class" line="22" lineend="30" name="ParentIterator">
        <scope doc="@return whetehr the current element has children" ilk="function" line="26" lineend="29" name="accept" returns="whetehr" signature="accept()" />
      </scope>
      <scope doc="@file limititerator.inc&#xA;@ingroup SPL&#xA;@brief class LimitIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2005&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Limited Iteration over another Iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.1&#xD;&#xA;@since PHP 5.0&#xD;&#xA;&#xD;&#xA;A class that starts iteration at a certain offset and only iterates over&#xD;&#xA;a specified amount of elements.&#xD;&#xA;&#xD;&#xA;This class uses SeekableIterator::seek() if available and rewind() plus&#xD;&#xA;a skip loop otehrwise." ilk="class" interfacerefs="OuterIterator" line="24" lineend="132" name="LimitIterator">
        <scope attributes="__ctor__" doc="Construct&#xD;&#xA;&#xD;&#xA;@param it     Iterator to limit&#xD;&#xA;@param offset Offset to first element&#xD;&#xA;@param count  Maximum number of elements to show or -1 for all" ilk="function" line="37" lineend="49" name="__construct" signature="__construct(Iterator, Offset, Maximum)" />
        <scope doc="Seek to specified position&#xD;&#xA;@param position offset to seek to (relative to beginning not offset&#xD;&#xA;                specified in constructor).&#xD;&#xA;@throw exception when position is invalid" ilk="function" line="56" lineend="71" name="seek" signature="seek(position, offset)" />
        <scope doc="Rewind to offset specified in constructor" ilk="function" line="75" lineend="80" name="rewind" signature="rewind()" />
        <scope doc="@return whether iterator is valid" ilk="function" line="84" lineend="87" name="valid" returns="whether" signature="valid()" />
        <scope doc="@return current key" ilk="function" line="91" lineend="93" name="key" returns="current" signature="key()" />
        <scope doc="@return current element" ilk="function" line="97" lineend="99" name="current" returns="current" signature="current()" />
        <scope doc="Forward to nect element" ilk="function" line="103" lineend="106" name="next" signature="next()" />
        <scope doc="@return current position relative to zero (not to offset specified in &#xD;&#xA;         constructor)." ilk="function" line="111" lineend="113" name="getPosition" returns="current" signature="getPosition()" />
        <scope doc="@return The inner iterator" ilk="function" line="118" lineend="121" name="getInnerIterator" returns="The" signature="getInnerIterator()" />
        <scope doc="Aggregate the inner iterator&#xD;&#xA;&#xD;&#xA;@param func    Name of method to invoke&#xD;&#xA;@param params  Array of parameters to pass to method" ilk="function" line="128" lineend="131" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)" />
        <variable attributes="private" citdl="it" line="26" name="it" />
        <variable attributes="private" line="27" name="offset" />
        <variable attributes="private" line="28" name="count" />
        <variable attributes="private" citdl="int" line="29" name="pos" />
      </scope>
      <scope doc="@file cachingiterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class CachingIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/**&#xD;&#xA;@brief   Cached iteration over another Iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.2&#xD;&#xA;@since PHP 5.0&#xD;&#xA;&#xD;&#xA;This iterator wrapper does a one ahead iteration. This way it knows whether&#xD;&#xA;the inner iterator has one more element.&#xD;&#xA;&#xD;&#xA;@note If you want to convert the elements into strings and the inner &#xD;&#xA;      Iterator is an internal Iterator then you need to provide the &#xD;&#xA;      flag CALL_TOSTRING to do the conversion when the actual element&#xD;&#xA;      is being fetched. Otherwise the conversion would happen with the&#xD;&#xA;      already changed iterator. If you do not need this then it you should&#xD;&#xA;      omit this flag because it costs unneccessary work and time." ilk="class" interfacerefs="OuterIterator" line="28" lineend="155" name="CachingIterator">
        <scope attributes="__ctor__" doc="Construct from another iterator&#xD;&#xA;&#xD;&#xA;@param it    Iterator to cache&#xD;&#xA;@param flags Bitmask: &#xD;&#xA;             - CALL_TOSTRING  (whether to call __toString() for every element)" ilk="function" line="47" lineend="57" name="__construct" signature="__construct(Iterator, Bitmask)" />
        <scope doc="Rewind the Iterator" ilk="function" line="61" lineend="65" name="rewind" signature="rewind()" />
        <scope doc="Forward to the next element" ilk="function" line="69" lineend="87" name="next" signature="next()" />
        <scope doc="@return whether teh iterator is valid" ilk="function" line="91" lineend="94" name="valid" returns="whether" signature="valid()" />
        <scope doc="@return whether there is one more element" ilk="function" line="98" lineend="101" name="hasNext" returns="whether" signature="hasNext()" />
        <scope doc="@return the current element" ilk="function" line="105" lineend="108" name="current" returns="the" signature="current()" />
        <scope doc="@return the current key" ilk="function" line="112" lineend="115" name="key" returns="the" signature="key()" />
        <scope doc="Aggregate the inner iterator&#xD;&#xA;&#xD;&#xA;@param func    Name of method to invoke&#xD;&#xA;@param params  Array of parameters to pass to method" ilk="function" line="122" lineend="125" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)" />
        <scope doc="@return the string represenatation that was generated for the current &#xD;&#xA;         element&#xD;&#xA;@throw exception when CALL_TOSTRING was not specified in constructor" ilk="function" line="131" lineend="146" name="__toString" returns="the" signature="__toString()" />
        <scope doc="@return The inner iterator" ilk="function" line="151" lineend="154" name="getInnerIterator" returns="The" signature="getInnerIterator()" />
        <variable citdl="int" ilk="constant" line="30" name="CALL_TOSTRING" />
        <variable citdl="int" ilk="constant" line="31" name="CATCH_GET_CHILD" />
        <variable citdl="int" ilk="constant" line="32" name="TOSTRING_USE_KEY" />
        <variable citdl="int" ilk="constant" line="33" name="TOSTRING_USE_CURRENT" />
        <variable attributes="private" citdl="it" line="35" name="it" />
        <variable attributes="private" citdl="this.it.current()" line="36" name="current" />
        <variable attributes="private" citdl="this.it.key()" line="37" name="key" />
        <variable attributes="private" line="38" name="valid" />
        <variable attributes="private" citdl="this.current.__toString()" line="39" name="strValue" />
      </scope>
      <scope classrefs="CachingIterator" doc="@file recursivecachingiterator.inc&#xA;@ingroup SPL&#xA;@brief class RecursiveCachingIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2005&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Cached recursive iteration over another Iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.2&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;@see CachingIterator" ilk="class" interfacerefs="RecursiveIterator" line="20" lineend="97" name="RecursiveCachingIterator">
        <scope attributes="__ctor__" doc="Construct from another iterator&#xD;&#xA;&#xD;&#xA;@param it    Iterator to cache&#xD;&#xA;@param flags Bitmask: &#xD;&#xA;             - CALL_TOSTRING   (whether to call __toString() for every element)&#xD;&#xA;             - CATCH_GET_CHILD (whether to catch exceptions when trying to get childs)" ilk="function" line="32" lineend="35" name="__construct" signature="__construct(Iterator, Bitmask)" />
        <scope doc="Rewind Iterator" ilk="function" line="39" lineend="44" name="rewind" signature="rewind()" />
        <scope doc="Forward to next element if necessary then an Iterator for the Children&#xD;&#xA;will be created." ilk="function" line="49" lineend="76" name="next" signature="next()" />
        <scope doc="@return whether the current element has children&#xD;&#xA;@note The check whether the Iterator for the children can be created was&#xD;&#xA;      already executed. Hence when flag CATCH_GET_CHILD was given in&#xD;&#xA;      constructor this fucntion returns false so that getChildren does &#xD;&#xA;      not try to access those children." ilk="function" line="86" lineend="89" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return An Iterator for the children" ilk="function" line="93" lineend="96" name="getChildren" returns="An" signature="getChildren()" />
        <variable attributes="private" citdl="boolean" line="22" name="hasChildren" />
        <variable attributes="private" citdl="ref.newInstance()" line="23" name="getChildren" />
        <variable attributes="private" line="78" name="ref" />
      </scope>
      <scope classrefs="IteratorIterator" doc="@file norewinditerator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class NoRewindIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   An Iterator wrapper that doesn&apos;t call rewind&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.1&#xD;&#xA;@since PHP 5.1" ilk="class" line="18" lineend="26" name="NoRewindIterator">
        <scope doc="Simply prevent execution of inner iterators rewind()." ilk="function" line="22" lineend="25" name="rewind" signature="rewind()" />
      </scope>
      <scope doc="@file appenditerator.inc&#xA;@ingroup SPL&#xA;@brief class AppendIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2005&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/** @ingroup SPL&#xA;@brief   Iterator that iterates over several iterators one after the other&#xA;@author  Marcus Boerger&#xA;@version 1.0&#xA;@since PHP 5.1" ilk="class" interfacerefs="OuterIterator" line="18" lineend="120" name="AppendIterator">
        <scope attributes="__ctor__" doc="Construct an empty AppendIterator" ilk="function" line="25" lineend="28" name="__construct" signature="__construct()" />
        <scope doc="Append an Iterator&#xA;@param $it Iterator to append&#xA;&#xA;If the current state is invalid but the appended iterator is valid&#xA;the the AppendIterator itself becomes valid. However there will be no&#xA;call to $it-&gt;rewind(). Also if the current state is invalid the inner&#xA;ArrayIterator will be rewound und forwarded to the appended element." ilk="function" line="38" lineend="41" name="append" signature="append()" />
        <scope doc="@return the current inner Iterator" ilk="function" line="45" lineend="48" name="getInnerIterator" returns="the" signature="getInnerIterator()" />
        <scope doc="Rewind to the first element of the first inner Iterator.&#xA;@return void" ilk="function" line="53" lineend="60" name="rewind" signature="rewind()" />
        <scope doc="@return whether the current element is valid" ilk="function" line="64" lineend="67" name="valid" returns="whether" signature="valid()" />
        <scope doc="@return the current value if it is valid or \c NULL" ilk="function" line="71" lineend="78" name="current" returns="the" signature="current()" />
        <scope doc="@return the current key if it is valid or \c NULL" ilk="function" line="82" lineend="85" name="key" returns="the" signature="key()" />
        <scope doc="Move to the next element. If this means to another Iterator that &#xA;rewind that Iterator.&#xA;@return void" ilk="function" line="91" lineend="112" name="next" signature="next()" />
        <scope doc="Aggregates the inner iterator" ilk="function" line="116" lineend="119" name="__call" returns="call_user_func_array()" signature="__call(func, params)" />
        <variable attributes="private" citdl="ArrayIterator" line="21" name="iterators" />
      </scope>
      <scope classrefs="IteratorIterator" doc="@file infiniteiterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class InfiniteIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   An infinite Iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.1&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;This Iterator takes another Iterator and infinitvely iterates it by&#xD;&#xA;rewinding it when its end is reached.&#xD;&#xA;&#xD;&#xA;\note Even an InfiniteIterator stops if its inner Iterator is empty.&#xD;&#xA;&#xD;&#xA;\verbatim&#xD;&#xA;$it       = new ArrayIterator(array(1,2,3));&#xD;&#xA;$infinite = new InfiniteIterator($it);&#xD;&#xA;$limit    = new LimitIterator($infinite, 0, 5);&#xD;&#xA;foreach($limit as $val=&gt;$key)&#xD;&#xA;{&#xD;&#xA; echo &quot;$val=&gt;$key\n&quot;;&#xD;&#xA;}&#xD;&#xA;\endverbatim" ilk="class" line="33" lineend="46" name="InfiniteIterator">
        <scope doc="Move the inner Iterator forward to its next element or rewind it.&#xD;&#xA;@return void" ilk="function" line="38" lineend="45" name="next" signature="next()" />
      </scope>
      <scope doc="@file regexiterator.inc&#xA;@ingroup SPL&#xA;@brief class RegexIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2006&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Regular expression filter for iterators&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;This filter iterator assumes that the inner iterator" ilk="class" interfacerefs="FilterIterator" line="20" lineend="161" name="RegexIterator">
        <scope attributes="__ctor__" doc="&lt; the value used for current() &#xA;/**&#xD;&#xA;Constructs a regular expression filter around an iterator whose &#xD;&#xA;elemnts or keys are strings.&#xD;&#xA;&#xD;&#xA;@param it          inner iterator&#xD;&#xA;@param regex       the regular expression to match&#xD;&#xA;@param mode        operation mode (one of self::MATCH, self::GET_MATCH, &#xD;&#xA;                   self::ALL_MATCHES, self::SPLIT)&#xD;&#xA;@param flags       special flags (self::USE_KEY)&#xD;&#xA;@param preg_flags  global PREG_* flags, see preg_match(), &#xD;&#xA;                   preg_match_all(), preg_split()" ilk="function" line="52" lineend="58" name="__construct" signature="__construct(inner, the, operation, special, global)" />
        <scope doc="Match current or key against regular expression using mode, flags and&#xD;&#xA;preg_flags.&#xD;&#xA;&#xD;&#xA;@return whether this is a match&#xD;&#xA;&#xD;&#xA;@warning never call this twice for the same state" ilk="function" line="68" lineend="104" name="accept" returns="whether" signature="accept()" />
        <scope doc="@return the key after accept has been called" ilk="function" line="108" lineend="111" name="key" returns="the" signature="key()" />
        <scope doc="@return the current value after accept has been called" ilk="function" line="115" lineend="118" name="current" returns="the" signature="current()" />
        <scope doc="@return current operation mode" ilk="function" line="122" lineend="125" name="getMode" returns="current" signature="getMode()" />
        <scope doc="@param mode new operaion mode" ilk="function" line="129" lineend="132" name="setMode" signature="setMode(mode, new)" />
        <scope doc="@return current operation flags" ilk="function" line="136" lineend="139" name="getFlags" returns="current" signature="getFlags()" />
        <scope doc="@param flags new operaion flags" ilk="function" line="143" lineend="146" name="setFlags" signature="setFlags(flags, new)" />
        <scope doc="@return current PREG flags" ilk="function" line="150" lineend="153" name="getPregFlags" returns="current" signature="getPregFlags()" />
        <scope doc="@param preg_flags new PREG flags" ilk="function" line="157" lineend="160" name="setPregFlags" signature="setPregFlags(preg_flags, new)" />
        <variable citdl="int" ilk="constant" line="22" name="USE_KEY" />
        <variable citdl="int" ilk="constant" line="25" name="MATCH" />
        <variable citdl="int" ilk="constant" line="26" name="GET_MATCH" />
        <variable citdl="int" ilk="constant" line="27" name="ALL_MATCHES" />
        <variable citdl="int" ilk="constant" line="28" name="SPLIT" />
        <variable citdl="int" ilk="constant" line="29" name="REPLACE" />
        <variable attributes="private" citdl="regex" line="31" name="regex" />
        <variable attributes="private" citdl="mode" line="32" name="mode" />
        <variable attributes="private" citdl="flags" line="34" name="flags" />
        <variable attributes="private" citdl="preg_flags" line="35" name="preg_flags" />
        <variable attributes="private" citdl="result" line="37" name="key" />
        <variable attributes="private" citdl="result" line="38" name="current" />
      </scope>
      <scope classrefs="RegexIterator" doc="@file recursiveregexiterator.inc&#xA;@ingroup SPL&#xA;@brief class RegexIterator&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2006&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Recursive regular expression filter for iterators&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;This filter iterator assumes that the inner iterator" ilk="class" interfacerefs="RecursiveIterator" line="20" lineend="59" name="RecursiveRegexIterator">
        <scope attributes="__ctor__" doc="Constructs a regular expression filter around an iterator whose &#xD;&#xA;elemnts or keys are strings.&#xD;&#xA;&#xD;&#xA;@param it          inner iterator&#xD;&#xA;@param regex       the regular expression to match&#xD;&#xA;@param mode        operation mode (one of self::MATCH, self::GET_MATCH, &#xD;&#xA;                   self::ALL_MATCHES, self::SPLIT)&#xD;&#xA;@param flags       special flags (self::USE_KEY)&#xD;&#xA;@param preg_flags  global PREG_* flags, see preg_match(), &#xD;&#xA;                   preg_match_all(), preg_split()" ilk="function" line="34" lineend="36" name="__construct" signature="__construct(inner, the, operation, special, global)" />
        <scope doc="@return whether the current element has children" ilk="function" line="40" lineend="43" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return an iterator for the current elements children&#xD;&#xA;&#xD;&#xA;@note the returned iterator will be of the same class as $this" ilk="function" line="49" lineend="56" name="getChildren" returns="an" signature="getChildren()" />
        <variable attributes="private" line="58" name="ref" />
      </scope>
      <scope doc="@file emptyiterator.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class EmptyIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   An empty Iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 5.1" ilk="class" interfacerefs="Iterator" line="18" lineend="60" name="EmptyIterator">
        <scope doc="No operation.&#xD;&#xA;@return void" ilk="function" line="23" lineend="26" name="rewind" signature="rewind()" />
        <scope doc="@return \c false" ilk="function" line="30" lineend="33" name="valid" returns="boolean" signature="valid()" />
        <scope doc="This function must not be called. It throws an exception upon access.&#xD;&#xA;@throw Exception&#xD;&#xA;@return void" ilk="function" line="39" lineend="42" name="current" signature="current()" />
        <scope doc="This function must not be called. It throws an exception upon access.&#xD;&#xA;@throw Exception&#xD;&#xA;@return void" ilk="function" line="48" lineend="51" name="key" signature="key()" />
        <scope doc="No operation.&#xD;&#xA;@return void" ilk="function" line="56" lineend="59" name="next" signature="next()" />
      </scope>
      <scope doc="@ingroup SPL&#xA;@brief An Array wrapper&#xA;@since PHP 5.0&#xA;@version 1.2&#xA;&#xA;This array wrapper allows to recursively iterate over Arrays and public &#xA;Object properties.&#xA;&#xA;@see ArrayIterator" ilk="class" interfacerefs="IteratorAggregate ArrayAccess Countable" line="606" lineend="712" name="ArrayObject">
        <scope attributes="__ctor__" doc="Construct a new array iterator from anything that has a hash table.&#xA;That is any Array or Object.&#xA;&#xA;@param $array the array to use.&#xA;@param $flags see setFlags().&#xA;@param $iterator_class class used in getIterator()" ilk="function" line="621" lineend="621" name="__construct" signature="__construct(array, flags=0, iterator_class=&quot;ArrayIterator&quot;)" />
        <scope doc="Set behavior flags.&#xA;&#xA;@param $flags bitmask as follows:&#xA;       0 set: properties of the object have their normal functionality&#xA;              when accessed as list (var_dump, foreach, etc.)&#xA;       1 set: array indices can be accessed as properties in read/write" ilk="function" line="630" lineend="630" name="setFlags" signature="setFlags(flags)" />
        <scope doc="@return current flags" ilk="function" line="634" lineend="634" name="getFlags" returns="current" signature="getFlags()" />
        <scope doc="Sort the entries by values." ilk="function" line="638" lineend="638" name="asort" signature="asort()" />
        <scope doc="Sort the entries by key." ilk="function" line="642" lineend="642" name="ksort" signature="ksort()" />
        <scope doc="Sort the entries by values using user defined function." ilk="function" line="646" lineend="646" name="uasort" signature="uasort()" />
        <scope doc="Sort the entries by key using user defined function." ilk="function" line="650" lineend="650" name="uksort" signature="uksort()" />
        <scope doc="Sort the entries by values using &quot;natural order&quot; algorithm." ilk="function" line="654" lineend="654" name="natsort" signature="natsort()" />
        <scope doc="Sort the entries by values using case insensitive &quot;natural order&quot; algorithm." ilk="function" line="658" lineend="658" name="natcasesort" signature="natcasesort()" />
        <scope doc="@param $array new array or object" ilk="function" line="662" lineend="662" name="exchangeArray" signature="exchangeArray(array)" />
        <scope doc="@return the iterator which is an ArrayIterator object connected to&#xA;this object." ilk="function" line="667" lineend="667" name="getIterator" returns="the" signature="getIterator()" />
        <scope doc="@param $index offset to inspect&#xA;@return whetehr offset $index esists" ilk="function" line="672" lineend="672" name="offsetExists" returns="whetehr" signature="offsetExists(index)" />
        <scope doc="@param $index offset to return value for&#xA;@return value at offset $index" ilk="function" line="677" lineend="677" name="offsetGet" returns="value" signature="offsetGet(index)" />
        <scope doc="@param $index index to set&#xA;@param $newval new value to store at offset $index" ilk="function" line="682" lineend="682" name="offsetSet" signature="offsetSet(index, newval)" />
        <scope doc="@param $index offset to unset" ilk="function" line="686" lineend="686" name="offsetUnset" signature="offsetUnset(index)" />
        <scope doc="@param $value is appended as last element&#xA;@warning this method cannot be called when the ArrayObject refers to &#xA;         an object." ilk="function" line="692" lineend="692" name="append" signature="append(value)" />
        <scope doc="@return a \b copy of the array&#xA;@note when the ArrayObject refers to an object then this method &#xA;      returns an array of the public properties." ilk="function" line="698" lineend="698" name="getArrayCopy" returns="a" signature="getArrayCopy()" />
        <scope doc="@return the number of elements in the array or the number of public&#xA;properties in the object." ilk="function" line="703" lineend="703" name="count" returns="the" signature="count()" />
        <scope doc="@param $iterator_class new class used in getIterator()" ilk="function" line="707" lineend="707" name="setIteratorClass" signature="setIteratorClass(itertor_class)" />
        <scope doc="@return class used in getIterator()" ilk="function" line="711" lineend="711" name="getIteratorClass" returns="class" signature="getIteratorClass()" />
        <variable citdl="int" ilk="constant" line="610" name="STD_PROP_LIST" />
        <variable citdl="int" ilk="constant" line="612" name="ARRAY_AS_PROPS" />
      </scope>
      <scope doc="@ingroup SPL&#xA;@brief An Array iterator&#xA;@since PHP 5.0&#xA;@version 1.2&#xA;&#xA;This iterator allows to unset and modify values and keys while iterating&#xA;over Arrays and Objects.&#xA;&#xA;When you want to iterate over the same array multiple times you need to &#xA;instanciate ArrayObject and let it create ArrayIterator instances that &#xA;refer to it either by using foreach or by calling its getIterator() &#xA;method manually." ilk="class" interfacerefs="SeekableIterator ArrayAccess Countable" line="727" lineend="836" name="ArrayIterator">
        <scope attributes="__ctor__" doc="Construct a new array iterator from anything that has a hash table.&#xA;That is any Array or Object.&#xA;&#xA;@param $array the array to use.&#xA;@param $flags see setFlags()." ilk="function" line="741" lineend="741" name="__construct" signature="__construct(array, flags=0)" />
        <scope doc="Set behavior flags.&#xA;&#xA;@param $flags bitmask as follows:&#xA;       0 set: properties of the object have their normal functionality&#xA;              when accessed as list (var_dump, foreach, etc.)&#xA;       1 set: array indices can be accessed as properties in read/write" ilk="function" line="750" lineend="750" name="setFlags" signature="setFlags(flags)" />
        <scope doc="@return current flags" ilk="function" line="755" lineend="755" name="getFlags" returns="current" signature="getFlags()" />
        <scope doc="Sort the entries by values." ilk="function" line="759" lineend="759" name="asort" signature="asort()" />
        <scope doc="Sort the entries by key." ilk="function" line="763" lineend="763" name="ksort" signature="ksort()" />
        <scope doc="Sort the entries by values using user defined function." ilk="function" line="767" lineend="767" name="uasort" signature="uasort()" />
        <scope doc="Sort the entries by key using user defined function." ilk="function" line="771" lineend="771" name="uksort" signature="uksort()" />
        <scope doc="Sort the entries by values using &quot;natural order&quot; algorithm." ilk="function" line="775" lineend="775" name="natsort" signature="natsort()" />
        <scope doc="Sort the entries by values using case insensitive &quot;natural order&quot; algorithm." ilk="function" line="779" lineend="779" name="natcasesort" signature="natcasesort()" />
        <scope doc="@param $index offset to inspect&#xA;@return whetehr offset $index esists" ilk="function" line="784" lineend="784" name="offsetExists" returns="whetehr" signature="offsetExists(index)" />
        <scope doc="@param $index offset to return value for&#xA;@return value at offset $index" ilk="function" line="789" lineend="789" name="offsetGet" returns="value" signature="offsetGet(index)" />
        <scope doc="@param $index index to set&#xA;@param $newval new value to store at offset $index" ilk="function" line="794" lineend="794" name="offsetSet" signature="offsetSet(index, newval)" />
        <scope doc="@param $index offset to unset" ilk="function" line="798" lineend="798" name="offsetUnset" signature="offsetUnset(index)" />
        <scope doc="@param $value is appended as last element&#xA;@warning this method cannot be called when the ArrayIterator refers to &#xA;         an object." ilk="function" line="804" lineend="804" name="append" signature="append(value)" />
        <scope doc="@return a \b copy of the array&#xA;@note when the ArrayIterator refers to an object then this method &#xA;      returns an array of the public properties." ilk="function" line="810" lineend="810" name="getArrayCopy" returns="a" signature="getArrayCopy()" />
        <scope doc="@param $position offset to seek to&#xA;@throw OutOfBoundsException if $position is invalid" ilk="function" line="815" lineend="815" name="seek" signature="seek(position)" />
        <scope doc="@return the number of elements in the array or the number of public&#xA;properties in the object." ilk="function" line="820" lineend="820" name="count" returns="the" signature="count()" />
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="823" lineend="823" name="rewind" signature="rewind()" />
        <scope doc="@copydoc Iterator::valid" ilk="function" line="826" lineend="826" name="valid" signature="valid()" />
        <scope doc="@copydoc Iterator::current" ilk="function" line="829" lineend="829" name="current" signature="current()" />
        <scope doc="@copydoc Iterator::key" ilk="function" line="832" lineend="832" name="key" signature="key()" />
        <scope doc="@copydoc Iterator::next" ilk="function" line="835" lineend="835" name="next" signature="next()" />
        <variable citdl="int" ilk="constant" line="731" name="STD_PROP_LIST" />
        <variable citdl="int" ilk="constant" line="733" name="ARRAY_AS_PROPS" />
      </scope>
      <scope classrefs="ArrayIterator" doc="@file recursivearrayiterator.inc&#xD;&#xA;@ingroup Examples&#xD;&#xA;@brief class RecursiveArrayIterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2005&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   A recursive array iterator&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 5.1&#xD;&#xA;&#xD;&#xA;Passes the RecursiveIterator interface to the inner Iterator and provides&#xD;&#xA;the same functionality as FilterIterator. This allows you to skip parents&#xD;&#xA;and all their childs before loading them all. You need to care about&#xD;&#xA;function getChildren() because it may not always suit your needs. The &#xD;&#xA;builtin behavior uses reflection to return a new instance of the exact same&#xD;&#xA;class it is called from. That is you extend RecursiveFilterIterator and&#xD;&#xA;getChildren() will create instance of that class. The problem is that doing&#xD;&#xA;this does not transport any state or control information of your accept()&#xD;&#xA;implementation to the new instance. To overcome this problem you might &#xD;&#xA;need to overwrite getChildren(), call this implementation and pass the&#xD;&#xA;control vaules manually." ilk="class" interfacerefs="RecursiveIterator" line="30" lineend="57" name="RecursiveArrayIterator">
        <scope doc="@return whether the current element has children" ilk="function" line="34" lineend="37" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return an iterator for the current elements children&#xD;&#xA;&#xD;&#xA;@note the returned iterator will be of the same class as $this" ilk="function" line="43" lineend="54" name="getChildren" returns="an" signature="getChildren()" />
        <variable attributes="private" line="56" name="ref" />
      </scope>
      <scope doc="@ingroup SPL&#xA;@brief File info class&#xA;@since PHP 5.1.3" ilk="class" line="842" lineend="970" name="SplFileInfo">
        <scope attributes="__ctor__" doc="Construct a file info object&#xA;&#xA;@param $file_name path or file name" ilk="function" line="848" lineend="848" name="__construct" signature="__construct(file_name)" />
        <scope doc="@return the path part only." ilk="function" line="852" lineend="852" name="getPath" returns="the" signature="getPath()" />
        <scope doc="@return the filename only." ilk="function" line="856" lineend="856" name="getFilename" returns="the" signature="getFilename()" />
        <scope doc="@return SplFileInfo created for the file&#xA;@param class_name name of class to instantiate&#xA;@see SplFileInfo::setInfoClass()" ilk="function" line="862" lineend="862" name="getFileInfo" returns="SplFileInfo" signature="getFileInfo(name)" />
        <scope doc="@return The current entries path and file name." ilk="function" line="866" lineend="866" name="getPathname" returns="The" signature="getPathname()" />
        <scope doc="@return SplFileInfo created for the path&#xA;@param class_name name of class to instantiate&#xA;@see SplFileInfo::setInfoClass()" ilk="function" line="872" lineend="872" name="getPathInfo" returns="SplFileInfo" signature="getPathInfo(name)" />
        <scope doc="@return The current entry&apos;s permissions." ilk="function" line="876" lineend="876" name="getPerms" returns="The" signature="getPerms()" />
        <scope doc="@return The current entry&apos;s inode." ilk="function" line="880" lineend="880" name="getInode" returns="The" signature="getInode()" />
        <scope doc="@return The current entry&apos;s size in bytes ." ilk="function" line="884" lineend="884" name="getSize" returns="The" signature="getSize()" />
        <scope doc="@return The current entry&apos;s owner name." ilk="function" line="888" lineend="888" name="getOwner" returns="The" signature="getOwner()" />
        <scope doc="@return The current entry&apos;s group name." ilk="function" line="892" lineend="892" name="getGroup" returns="The" signature="getGroup()" />
        <scope doc="@return The current entry&apos;s last access time." ilk="function" line="896" lineend="896" name="getATime" returns="The" signature="getATime()" />
        <scope doc="@return The current entry&apos;s last modification time." ilk="function" line="900" lineend="900" name="getMTime" returns="The" signature="getMTime()" />
        <scope doc="@return The current entry&apos;s last change time." ilk="function" line="904" lineend="904" name="getCTime" returns="The" signature="getCTime()" />
        <scope doc="@return The current entry&apos;s file type." ilk="function" line="908" lineend="908" name="getType" returns="The" signature="getType()" />
        <scope doc="@return Whether the current entry is writeable." ilk="function" line="912" lineend="912" name="isWritable" returns="Whether" signature="isWritable()" />
        <scope doc="@return Whether the current entry is readable." ilk="function" line="916" lineend="916" name="isReadable" returns="Whether" signature="isReadable()" />
        <scope doc="@return Whether the current entry is executable." ilk="function" line="920" lineend="920" name="isExecutable" returns="Whether" signature="isExecutable()" />
        <scope doc="@return Whether the current entry is ." ilk="function" line="924" lineend="924" name="isFile" returns="Whether" signature="isFile()" />
        <scope doc="@return Whether the current entry is a directory." ilk="function" line="928" lineend="928" name="isDir" returns="Whether" signature="isDir()" />
        <scope doc="@return whether the current entry is a link." ilk="function" line="932" lineend="932" name="isLink" returns="whether" signature="isLink()" />
        <scope doc="@return target of link." ilk="function" line="936" lineend="936" name="getLinkTarget" returns="target" signature="getLinkTarget()" />
        <scope doc="@return The resolved path" ilk="function" line="940" lineend="940" name="getRealPath" returns="The" signature="getRealPath()" />
        <scope doc="@return getPathname()" ilk="function" line="944" lineend="944" name="__toString" returns="getPathname" signature="__toString()" />
        <scope doc="Open the current file as a SplFileObject instance&#xA;&#xA;@param mode              open mode&#xA;@param use_include_path  whether to search include paths (don&apos;t use)&#xA;@param context           resource context to pased to open function&#xA;@throw RuntimeException  if file cannot be opened (e.g. insufficient &#xA;                         access rights).&#xA;@return The opened file as a SplFileObject instance&#xA;&#xA;@see SplFileObject&#xA;@see SplFileInfo::setFileClass()&#xA;@see file()" ilk="function" line="959" lineend="959" name="openFile" returns="The" signature="openFile(open, whether, resource, mode=&apos;r&apos;, use_include_path=false, context=NULL)" />
        <scope doc="@param class_name name of class used with openFile(). Must be derived &#xA;from SPLFileObject." ilk="function" line="964" lineend="964" name="setFileClass" signature="setFileClass(name)" />
        <scope doc="@param class_name name of class used with getFileInfo(), getPathInfo().&#xA;                    Must be derived from SplFileInfo." ilk="function" line="969" lineend="969" name="setInfoClass" signature="setInfoClass(name)" />
      </scope>
      <scope classrefs="SplFileInfo" doc="@ingroup SPL&#xA;@brief Directory iterator&#xA;@version 1.1&#xA;@since PHP 5.0" ilk="class" interfacerefs="Iterator" line="977" lineend="1013" name="DirectoryIterator">
        <scope attributes="__ctor__" doc="Construct a directory iterator from a path-string.&#xA;&#xA;@param $path directory to iterate." ilk="function" line="983" lineend="983" name="__construct" signature="__construct(path)" />
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="986" lineend="986" name="rewind" signature="rewind()" />
        <scope doc="@copydoc Iterator::valid" ilk="function" line="989" lineend="989" name="valid" signature="valid()" />
        <scope doc="@return index of entry" ilk="function" line="993" lineend="993" name="key" returns="index" signature="key()" />
        <scope doc="@return $this" ilk="function" line="997" lineend="997" name="current" signature="current()" />
        <scope doc="@copydoc Iterator::next" ilk="function" line="1000" lineend="1000" name="next" signature="next()" />
        <scope doc="@return Whether the current entry is either &apos;.&apos; or &apos;..&apos;." ilk="function" line="1004" lineend="1004" name="isDot" returns="Whether" signature="isDot()" />
        <scope doc="@return whether the current entry is a link." ilk="function" line="1008" lineend="1008" name="isLink" returns="whether" signature="isLink()" />
        <scope doc="@return getFilename()" ilk="function" line="1012" lineend="1012" name="__toString" returns="getFilename" signature="__toString()" />
      </scope>
      <scope classrefs="DirectoryIterator" doc="@ingroup SPL&#xA;@brief recursive directory iterator&#xA;@version 1.1&#xA;@since PHP 5.0" ilk="class" interfacerefs="RecursiveIterator" line="1020" lineend="1059" name="RecursiveDirectoryIterator">
        <scope attributes="__ctor__" doc="CURRENT_AS_FILEINFO + KEY_AS_FILENAME &#xA;/** Construct a directory iterator from a path-string.&#xA;&#xA;@param $path   directory to iterate.&#xA;@param $flags  open flags&#xA;- CURRENT_AS_FILEINFO&#xA;- KEY_AS_FILENAME&#xA;- NEW_CURRENT_AND_KEY" ilk="function" line="1034" lineend="1034" name="__construct" signature="__construct(path, flags=0)" />
        <scope doc="@return getPathname() or getFilename() depending on flags" ilk="function" line="1038" lineend="1038" name="key" returns="getPathname" signature="key()" />
        <scope doc="@return getFilename() or getFileInfo() depending on flags" ilk="function" line="1042" lineend="1042" name="current" returns="getFilename" signature="current()" />
        <scope doc="@return whether the current is a directory (not &apos;.&apos; or &apos;..&apos;)." ilk="function" line="1046" lineend="1046" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return a RecursiveDirectoryIterator for the current entry." ilk="function" line="1050" lineend="1050" name="getChildren" returns="a" signature="getChildren()" />
        <scope doc="@return sub path only (without main path)" ilk="function" line="1054" lineend="1054" name="getSubPath" returns="sub" signature="getSubPath()" />
        <scope doc="@return the current sub path" ilk="function" line="1058" lineend="1058" name="getSubPathname" returns="the" signature="getSubPathname()" />
      </scope>
      <scope classrefs="SplFileInfo" doc="@file splfileobject.inc&#xD;&#xA;@ingroup SPL&#xD;&#xA;@brief class FileObject&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@date    2003 - 2006&#xD;&#xA;&#xD;&#xA;SPL - Standard PHP Library&#xD;&#xA;/&#xA;/** @ingroup SPL&#xD;&#xA;@brief   Object representation for any stream&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.1&#xD;&#xA;@since PHP 5.1" ilk="class" interfacerefs="RecursiveIterator SeekableIterator" line="18" lineend="375" name="SplFileObject">
        <scope attributes="__ctor__" doc="Constructs a new file object&#xD;&#xA;&#xD;&#xA;@param $file_name         The name of the stream to open&#xD;&#xA;@param $open_mode         The file open mode&#xD;&#xA;@param $use_include_path  Whether to search in include paths&#xD;&#xA;@param $context           A stream context&#xD;&#xA;@throw RuntimeException   If file cannot be opened (e.g. insufficient &#xD;&#xA;                          access rights)." ilk="function" line="42" lineend="50" name="__construct" signature="__construct(file_name, open_mode=&apos;r&apos;, use_include_path=false, context=NULL)" />
        <scope doc="@return whether the end of the stream is reached" ilk="function" line="55" lineend="58" name="eof" returns="whether" signature="eof()" />
        <scope doc="increase current line number&#xD;&#xA;@return next line from stream" ilk="function" line="63" lineend="70" name="fgets" returns="next" signature="fgets()" />
        <scope doc="@param delimiter  character used as field separator&#xD;&#xA;@param enclosure  end of &#xD;&#xA;@return array containing read data" ilk="function" line="77" lineend="92" name="fgetcsv" returns="array" signature="fgetcsv(character, end, delimiter=NULL, enclosure=NULL)" />
        <scope doc="Set the delimiter and enclosure character used in fgetcsv&#xD;&#xA;&#xD;&#xA;@param delimiter new delimiter, defaults to &apos;,&apos;&#xD;&#xA;@param enclosure new enclosure, defaults to &apos;&quot;&apos;" ilk="function" line="100" lineend="104" name="setCsvControl" signature="setCsvControl(new, delimiter=&apos;;&apos;, enclosure=&apos;&quot;&apos;)" />
        <scope doc="@return array(delimiter, enclosure) as used in fgetcsv" ilk="function" line="109" lineend="112" name="getCsvControl" returns="array" signature="getCsvControl(delimiter=&apos;,&apos;, enclosure=&apos;&quot;&apos;)" />
        <scope doc="@param operation lock operation (LOCK_SH, LOCK_EX, LOCK_UN, LOCK_NB)&#xD;&#xA;@retval $wouldblock  whether the operation would block" ilk="function" line="118" lineend="121" name="flock" returns="flock()" signature="flock(operation, wouldblock, lock)" />
        <scope doc="Flush current data&#xD;&#xA;@return success or failure" ilk="function" line="127" lineend="130" name="fflush" returns="success" signature="fflush()" />
        <scope doc="@return current file position" ilk="function" line="135" lineend="138" name="ftell" returns="current" signature="ftell()" />
        <scope doc="@param pos new file position&#xD;&#xA;@param whence seek method (SEEK_SET, SEEK_CUR, SEEK_END)&#xD;&#xA;@return Upon success, returns 0; otherwise, returns -1. Note that &#xD;&#xA;        seeking past EOF is not considered an error." ilk="function" line="146" lineend="149" name="fseek" returns="Upon" signature="fseek(pos, new, seek, whence=SEEK_SET)" />
        <scope doc="@return next char from file&#xD;&#xA;@note a new line character does not increase $this-&gt;lnum" ilk="function" line="155" lineend="162" name="fgetc" returns="next" signature="fgetc()" />
        <scope doc="Read and return remaining part of stream&#xD;&#xA;@return size of remaining part passed through" ilk="function" line="167" lineend="170" name="fpassthru" returns="size" signature="fpassthru()" />
        <scope doc="Get a line from the file and strip HTML tags&#xD;&#xA;@param $allowable_tags tags to keep in the string" ilk="function" line="175" lineend="178" name="fgetss" returns="fgetss()" signature="fgetss(allowable_tags=NULL)" />
        <scope doc="Scan the next line&#xD;&#xA;@param $format string specifying format to parse&#xD;&#xA;//* , ..." ilk="function" line="183" lineend="188" name="fscanf" returns="fscanf()" signature="fscanf(format)" />
        <scope doc="@param $str to write&#xD;&#xA;@param $length maximum line length to write" ilk="function" line="194" lineend="197" name="fwrite" returns="fwrite()" signature="fwrite(str, length=NULL)" />
        <scope doc="@return array of file stat information" ilk="function" line="202" lineend="205" name="fstat" returns="array" signature="fstat()" />
        <scope doc="@param $size new size to truncate file to" ilk="function" line="210" lineend="213" name="ftruncate" returns="ftruncate()" signature="ftruncate(size)" />
        <scope doc="@param $flags new flag set" ilk="function" line="218" lineend="221" name="setFlags" signature="setFlags(flags)" />
        <scope doc="@return current set of flags" ilk="function" line="226" lineend="229" name="getFlags" returns="current" signature="getFlags()" />
        <scope doc="@param $max_len set the maximum line length read" ilk="function" line="234" lineend="237" name="setMaxLineLen" signature="setMaxLineLen(max_len)" />
        <scope doc="@return current setting for max line" ilk="function" line="242" lineend="245" name="getMaxLineLen" returns="current" signature="getMaxLineLen()" />
        <scope doc="@return false" ilk="function" line="250" lineend="253" name="hasChildren" returns="false" signature="hasChildren()" />
        <scope doc="@return false" ilk="function" line="258" lineend="261" name="getChildren" returns="false" signature="getChildren()" />
        <scope doc="Invalidate current line buffer and set line number to 0." ilk="function" line="266" lineend="270" name="rewind" signature="rewind()" />
        <scope doc="@return whether more data can be read" ilk="function" line="275" lineend="278" name="valid" returns="whether" signature="valid()" />
        <scope doc="@note Fill current line buffer if not done yet.&#xD;&#xA;@return line buffer" ilk="function" line="284" lineend="291" name="current" returns="line" signature="current()" />
        <scope doc="@return line number &#xD;&#xA;@note fgetc() will increase the line number when reaing a new line char.&#xD;&#xA;      This has the effect key() called on a read a new line will already&#xD;&#xA;      return the increased line number.&#xD;&#xA;@note Line counting works as long as you only read the file and do not&#xD;&#xA;      use fseek()." ilk="function" line="301" lineend="304" name="key" returns="line" signature="key()" />
        <scope doc="Invalidate current line buffer." ilk="function" line="308" lineend="311" name="next" signature="next()" />
        <scope attributes="private" doc="@return next line read from file and increase the line counter" ilk="function" line="316" lineend="329" name="readLine" returns="next" signature="readLine()" />
        <scope attributes="private" doc="Free the current line buffer and increment the line counter" ilk="function" line="334" lineend="339" name="freeLine" signature="freeLine()" />
        <scope doc="@note If you DO overload this function key() and current() will increment&#xD;&#xA;      $this-&gt;lnum automatically. If not then function reaLine() will do&#xD;&#xA;      that for you." ilk="function" line="346" lineend="354" name="getCurrentLine" signature="getCurrentLine()" />
        <scope doc="@return current line" ilk="function" line="359" lineend="362" name="__toString" returns="current" signature="__toString()" />
        <scope doc="@param $line_pos Seek to this line" ilk="function" line="367" lineend="374" name="seek" signature="seek(line_pos)" />
        <variable citdl="int" ilk="constant" line="21" name="DROP_NEW_LINE" />
        <variable attributes="private" citdl="fopen()" line="23" name="fp" />
        <variable attributes="private" citdl="file_name" line="24" name="fname" />
        <variable attributes="private" citdl="getCurrentLine()" line="25" name="line" />
        <variable attributes="private" citdl="int" line="26" name="lnum" />
        <variable attributes="private" citdl="int" line="27" name="max_len" />
        <variable attributes="private" citdl="int" line="28" name="flags" />
        <variable attributes="private" citdl="string" line="29" name="delimiter" />
        <variable attributes="private" citdl="string" line="30" name="enclosure" />
      </scope>
      <scope classrefs="SplFileObject" ilk="class" name="SplTempFileObject">
        <scope doc="Construct a new temp file object" ilk="function" name="__construct" returns="void" signature="__construct([int max_memory])" src="spl_directory.c" />
        <scope ilk="function" name="rewind" signature="rewind()" />
        <scope ilk="function" name="eof" signature="eof()" />
        <scope ilk="function" name="valid" signature="valid()" />
        <scope ilk="function" name="fgets" signature="fgets()" />
        <scope ilk="function" name="fgetcsv" signature="fgetcsv()" />
        <scope ilk="function" name="setCsvControl" signature="setCsvControl()" />
        <scope ilk="function" name="getCsvControl" signature="getCsvControl()" />
        <scope ilk="function" name="flock" signature="flock()" />
        <scope ilk="function" name="fflush" signature="fflush()" />
        <scope ilk="function" name="ftell" signature="ftell()" />
        <scope ilk="function" name="fseek" signature="fseek()" />
        <scope ilk="function" name="fgetc" signature="fgetc()" />
        <scope ilk="function" name="fpassthru" signature="fpassthru()" />
        <scope ilk="function" name="fgetss" signature="fgetss()" />
        <scope ilk="function" name="fscanf" signature="fscanf()" />
        <scope ilk="function" name="fwrite" signature="fwrite()" />
        <scope ilk="function" name="fstat" signature="fstat()" />
        <scope ilk="function" name="ftruncate" signature="ftruncate()" />
        <scope ilk="function" name="current" signature="current()" />
        <scope ilk="function" name="key" signature="key()" />
        <scope ilk="function" name="next" signature="next()" />
        <scope ilk="function" name="setFlags" signature="setFlags()" />
        <scope ilk="function" name="getFlags" signature="getFlags()" />
        <scope ilk="function" name="setMaxLineLen" signature="setMaxLineLen()" />
        <scope ilk="function" name="getMaxLineLen" signature="getMaxLineLen()" />
        <scope ilk="function" name="hasChildren" signature="hasChildren()" />
        <scope ilk="function" name="getChildren" signature="getChildren()" />
        <scope ilk="function" name="seek" signature="seek()" />
        <scope ilk="function" name="getCurrentLine" signature="getCurrentLine()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <scope ilk="function" name="getPath" signature="getPath()" />
        <scope ilk="function" name="getFilename" signature="getFilename()" />
        <scope ilk="function" name="getBasename" signature="getBasename()" />
        <scope ilk="function" name="getPathname" signature="getPathname()" />
        <scope ilk="function" name="getPerms" signature="getPerms()" />
        <scope ilk="function" name="getInode" signature="getInode()" />
        <scope ilk="function" name="getSize" signature="getSize()" />
        <scope ilk="function" name="getOwner" signature="getOwner()" />
        <scope ilk="function" name="getGroup" signature="getGroup()" />
        <scope ilk="function" name="getATime" signature="getATime()" />
        <scope ilk="function" name="getMTime" signature="getMTime()" />
        <scope ilk="function" name="getCTime" signature="getCTime()" />
        <scope ilk="function" name="getType" signature="getType()" />
        <scope ilk="function" name="isWritable" signature="isWritable()" />
        <scope ilk="function" name="isReadable" signature="isReadable()" />
        <scope ilk="function" name="isExecutable" signature="isExecutable()" />
        <scope ilk="function" name="isFile" signature="isFile()" />
        <scope ilk="function" name="isDir" signature="isDir()" />
        <scope ilk="function" name="isLink" signature="isLink()" />
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()" />
        <scope ilk="function" name="getRealPath" signature="getRealPath()" />
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()" />
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()" />
        <scope ilk="function" name="openFile" signature="openFile()" />
        <scope ilk="function" name="setFileClass" signature="setFileClass()" />
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()" />
        <variable citdl="integer" ilk="constant" name="DROP_NEW_LINE" />
        <variable citdl="integer" ilk="constant" name="READ_AHEAD" />
        <variable citdl="integer" ilk="constant" name="SKIP_EMPTY" />
        <variable citdl="integer" ilk="constant" name="READ_CSV" />
      </scope>
      <scope classrefs="SimpleXMLElement" doc="@ingroup SPL&#xA;@brief recursive SimpleXML_Element iterator&#xA;@since PHP 5.0&#xA;&#xA;The SimpleXMLIterator implements the RecursiveIterator interface. This &#xA;allows iteration over all elements using foreach or an appropriate while&#xA;construct, just like SimpleXMLElement does. When using the foreach construct,&#xA;you will also iterate over the subelements. For every element which&#xA;has subelements, hasChildren() returns true.  This will trigger a call to&#xA;getChildren() which returns the iterator for that sub element." ilk="class" interfacerefs="RecursiveIterator Countable" line="1072" lineend="1100" name="SimpleXMLIterator">
        <scope doc="@return whether the current node has sub nodes." ilk="function" line="1076" lineend="1076" name="hasChildren" returns="whether" signature="hasChildren()" />
        <scope doc="@return a SimpleXMLIterator for the current node." ilk="function" line="1080" lineend="1080" name="getChildren" returns="a" signature="getChildren()" />
        <scope doc="@return number of elements/attributes seen with foreach()" ilk="function" line="1084" lineend="1084" name="count" returns="number" signature="count()" />
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="1087" lineend="1087" name="rewind" signature="rewind()" />
        <scope doc="@copydoc Iterator::valid" ilk="function" line="1090" lineend="1090" name="valid" signature="valid()" />
        <scope doc="@copydoc Iterator::current" ilk="function" line="1093" lineend="1093" name="current" signature="current()" />
        <scope doc="@copydoc Iterator::key" ilk="function" line="1096" lineend="1096" name="key" signature="key()" />
        <scope doc="@copydoc Iterator::next" ilk="function" line="1099" lineend="1099" name="next" signature="next()" />
      </scope>
      <scope classrefs="Exception" doc="@ingroup SPL&#xA;@brief Exception that represents error in the program logic.&#xA;@since PHP 5.1&#xA;&#xA;This kind of exceptions should directly leed to a fix in your code." ilk="class" line="339" lineend="341" name="LogicException" />
      <scope classrefs="LogicException" doc="@ingroup SPL&#xA;@brief Exception thrown when a function call was illegal.&#xA;@since PHP 5.1" ilk="class" line="347" lineend="349" name="BadFunctionCallException" />
      <scope classrefs="BadFunctionCallException" doc="@ingroup SPL&#xA;@brief Exception thrown when a method call was illegal.&#xA;@since PHP 5.1" ilk="class" line="355" lineend="357" name="BadMethodCallException" />
      <scope classrefs="LogicException" doc="@ingroup SPL&#xA;@brief Exception that denotes a value not in the valid domain was used.&#xA;@since PHP 5.1&#xA;&#xA;This kind of exception should be used to inform about domain erors in &#xA;mathematical sense.&#xA;&#xA;@see RangeException" ilk="class" line="368" lineend="370" name="DomainException" />
      <scope classrefs="LogicException" doc="@ingroup SPL&#xA;@brief Exception that denotes invalid arguments were passed.&#xA;@since PHP 5.1&#xA;&#xA;@see UnexpectedValueException" ilk="class" line="378" lineend="380" name="InvalidArgumentException" />
      <scope classrefs="LogicException" doc="@ingroup SPL&#xA;@brief Exception thrown when a parameter exceeds the allowed length.&#xA;@since PHP 5.1&#xA;&#xA;This can be used for strings length, array size, file size, number of &#xA;elements read from an Iterator and so on." ilk="class" line="389" lineend="391" name="LengthException" />
      <scope classrefs="LogicException" doc="@ingroup SPL&#xA;@brief Exception thrown when an illegal index was requested.&#xA;@since PHP 5.1&#xA;&#xA;This represents errors that should be detected at compile time.&#xA;&#xA;@see OutOfBoundsException" ilk="class" line="401" lineend="403" name="OutOfRangeException" />
      <scope classrefs="Exception" doc="@ingroup SPL&#xA;@brief Exception thrown for errors that are only detectable at runtime. &#xA;@since PHP 5.1" ilk="class" line="409" lineend="411" name="RuntimeException" />
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#xA;@brief Exception thrown when an illegal index was requested.&#xA;@since PHP 5.1&#xA;&#xA;This represents errors that cannot be detected at compile time.&#xA;&#xA;@see OutOfRangeException" ilk="class" line="421" lineend="423" name="OutOfBoundsException" />
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#xA;@brief Exception thrown to indicate arithmetic/buffer overflow.&#xA;@since PHP 5.1" ilk="class" line="429" lineend="431" name="OverflowException" />
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#xA;@brief Exception thrown to indicate range errors during program execution.&#xA;@since PHP 5.1&#xA;&#xA;Normally this means there was an arithmetic error other than under/overflow.&#xA;This is the runtime version of DomainException.&#xA;&#xA;@see DomainException" ilk="class" line="442" lineend="444" name="RangeException" />
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#xA;@brief Exception thrown to indicate arithmetic/buffer underflow.&#xA;@since PHP 5.1" ilk="class" line="450" lineend="452" name="UnderflowException" />
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#xA;@brief Exception thrown to indicate an unexpected value.&#xA;@since PHP 5.1&#xA;&#xA;Typically this happens when a function calls another function and espects&#xA;the return value to be of a certain type or value not including arithmetic&#xA;or buffer related errors. &#xA;&#xA;@see InvalidArgumentException" ilk="class" line="464" lineend="466" name="UnexpectedValueException" />
      <scope doc="@file splobjectstorage.inc&#xA;@ingroup SPL&#xA;@brief class SplObjectStorage&#xA;@author  Marcus Boerger&#xA;@date    2003 - 2005&#xA;&#xA;SPL - Standard PHP Library&#xA;/&#xA;/**&#xD;&#xA;@brief   Object storage&#xD;&#xA;@author  Marcus Boerger&#xD;&#xA;@version 1.0&#xD;&#xA;@since PHP 6.0&#xD;&#xA;&#xD;&#xA;This container allows to store objects uniquly without the need to compare&#xD;&#xA;them one by one. This is only possible internally. The code represenation&#xD;&#xA;here therefore has a complexity of O(n) while the actual implementation has&#xD;&#xA;complexity O(1)." ilk="class" interfacerefs="Iterator Countable" line="23" lineend="116" name="SplObjectStorage">
        <scope doc="Rewind to top iterator as set in constructor" ilk="function" line="30" lineend="33" name="rewind" signature="rewind()" />
        <scope doc="@return whether iterator is valid" ilk="function" line="37" lineend="40" name="valid" returns="whether" signature="valid()" />
        <scope doc="@return current key" ilk="function" line="44" lineend="47" name="key" returns="current" signature="key()" />
        <scope doc="@return current object" ilk="function" line="51" lineend="54" name="current" returns="current" signature="current()" />
        <scope doc="Forward to next element" ilk="function" line="58" lineend="62" name="next" signature="next()" />
        <scope doc="@return number of objects in storage" ilk="function" line="66" lineend="69" name="count" returns="number" signature="count()" />
        <scope doc="@param obj object to look for&#xD;&#xA;@return whether $obj is contained in storage" ilk="function" line="74" lineend="87" name="contains" returns="whether" signature="contains(obj, object)" />
        <scope doc="@param $obj new object to attach to storage if not yet contained" ilk="function" line="91" lineend="97" name="attach" signature="attach(obj)" />
        <scope doc="@param $obj object to remove from storage" ilk="function" line="101" lineend="115" name="detach" signature="detach(obj)" />
        <variable attributes="private" citdl="array()" line="25" name="storage" />
        <variable attributes="private" citdl="int" line="26" name="index" />
      </scope>
      <scope classrefs="RuntimeException" ilk="class" name="PDOException">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__construct" signature="__construct()" />
        <scope ilk="function" name="getMessage" signature="getMessage()" />
        <scope ilk="function" name="getCode" signature="getCode()" />
        <scope ilk="function" name="getFile" signature="getFile()" />
        <scope ilk="function" name="getLine" signature="getLine()" />
        <scope ilk="function" name="getTrace" signature="getTrace()" />
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <variable name="message" />
        <variable name="code" />
        <variable name="file" />
        <variable name="line" />
        <variable name="errorInfo" />
      </scope>
      <scope ilk="class" name="PDO">
        <scope doc="" ilk="function" name="__construct" returns="void" signature="__construct(string dsn, string username, string passwd [, array options])" src="pdo_dbh.c" />
        <scope doc="Prepares a statement for execution and returns a&#xA;statement object" ilk="function" name="prepare" returns="object" signature="prepare(string statment [, array options])" src="pdo_dbh.c" />
        <scope doc="Initiates a transaction" ilk="function" name="beginTransaction" returns="bool" signature="beginTransaction()" src="pdo_dbh.c" />
        <scope doc="Commit a transaction" ilk="function" name="commit" returns="bool" signature="commit()" src="pdo_dbh.c" />
        <scope doc="roll back a transaction" ilk="function" name="rollBack" returns="bool" signature="rollBack()" src="pdo_dbh.c" />
        <scope doc="Set an attribute" ilk="function" name="setAttribute" returns="bool" signature="setAttribute(long attribute, mixed value)" src="pdo_dbh.c" />
        <scope doc="Execute a query that does not return a row set&#xA;returning the number of affected rows" ilk="function" name="exec" returns="long" signature="exec(string query)" src="pdo_dbh.c" />
        <scope doc="args Prepare and execute sql returns the statement&#xA;object for iteration" ilk="function" name="query" returns="object" signature="query(string sql [, PDOStatement::setFetchMode()" src="pdo_dbh.c" />
        <scope doc="Returns the id of the last row that we affected on this&#xA;connection Some databases require a sequence or table" ilk="function" name="lastInsertId" returns="string" signature="lastInsertId([string seqname])" src="pdo_dbh.c" />
        <scope doc="Fetch the error code associated with the last operation&#xA;on the database handle" ilk="function" name="errorCode" returns="string" signature="errorCode()" src="pdo_dbh.c" />
        <scope doc="Fetch extended error information associated with the&#xA;last operation on the database handle" ilk="function" name="errorInfo" returns="int" signature="errorInfo()" src="pdo_dbh.c" />
        <scope doc="Get an attribute" ilk="function" name="getAttribute" returns="mixed" signature="getAttribute(long attribute)" src="pdo_dbh.c" />
        <scope doc="quotes string for use in a query The optional paramtype&#xA;acts as a hint for drivers that have alternate quoting" ilk="function" name="quote" returns="string" signature="quote(string string [, int paramtype])" src="pdo_dbh.c" />
        <scope doc="Prevents use of a PDO instance that has been&#xA;unserialized" ilk="function" name="__wakeup" returns="int" signature="__wakeup()" src="pdo_dbh.c" />
        <scope doc="Prevents serialization of a PDO instance" ilk="function" name="__sleep" returns="int" signature="__sleep()" src="pdo_dbh.c" />
        <scope ilk="function" name="getAvailableDrivers" signature="getAvailableDrivers()" />
        <variable citdl="integer" ilk="constant" name="PARAM_BOOL" />
        <variable citdl="integer" ilk="constant" name="PARAM_NULL" />
        <variable citdl="integer" ilk="constant" name="PARAM_INT" />
        <variable citdl="integer" ilk="constant" name="PARAM_STR" />
        <variable citdl="integer" ilk="constant" name="PARAM_LOB" />
        <variable citdl="integer" ilk="constant" name="PARAM_STMT" />
        <variable citdl="integer" ilk="constant" name="PARAM_INPUT_OUTPUT" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_ALLOC" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_FREE" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_EXEC_PRE" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_EXEC_POST" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_FETCH_PRE" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_FETCH_POST" />
        <variable citdl="integer" ilk="constant" name="PARAM_EVT_NORMALIZE" />
        <variable citdl="integer" ilk="constant" name="FETCH_LAZY" />
        <variable citdl="integer" ilk="constant" name="FETCH_ASSOC" />
        <variable citdl="integer" ilk="constant" name="FETCH_NUM" />
        <variable citdl="integer" ilk="constant" name="FETCH_BOTH" />
        <variable citdl="integer" ilk="constant" name="FETCH_OBJ" />
        <variable citdl="integer" ilk="constant" name="FETCH_BOUND" />
        <variable citdl="integer" ilk="constant" name="FETCH_COLUMN" />
        <variable citdl="integer" ilk="constant" name="FETCH_CLASS" />
        <variable citdl="integer" ilk="constant" name="FETCH_INTO" />
        <variable citdl="integer" ilk="constant" name="FETCH_FUNC" />
        <variable citdl="integer" ilk="constant" name="FETCH_GROUP" />
        <variable citdl="integer" ilk="constant" name="FETCH_UNIQUE" />
        <variable citdl="integer" ilk="constant" name="FETCH_KEY_PAIR" />
        <variable citdl="integer" ilk="constant" name="FETCH_CLASSTYPE" />
        <variable citdl="integer" ilk="constant" name="FETCH_SERIALIZE" />
        <variable citdl="integer" ilk="constant" name="FETCH_PROPS_LATE" />
        <variable citdl="integer" ilk="constant" name="FETCH_NAMED" />
        <variable citdl="integer" ilk="constant" name="ATTR_AUTOCOMMIT" />
        <variable citdl="integer" ilk="constant" name="ATTR_PREFETCH" />
        <variable citdl="integer" ilk="constant" name="ATTR_TIMEOUT" />
        <variable citdl="integer" ilk="constant" name="ATTR_ERRMODE" />
        <variable citdl="integer" ilk="constant" name="ATTR_SERVER_VERSION" />
        <variable citdl="integer" ilk="constant" name="ATTR_CLIENT_VERSION" />
        <variable citdl="integer" ilk="constant" name="ATTR_SERVER_INFO" />
        <variable citdl="integer" ilk="constant" name="ATTR_CONNECTION_STATUS" />
        <variable citdl="integer" ilk="constant" name="ATTR_CASE" />
        <variable citdl="integer" ilk="constant" name="ATTR_CURSOR_NAME" />
        <variable citdl="integer" ilk="constant" name="ATTR_CURSOR" />
        <variable citdl="integer" ilk="constant" name="ATTR_ORACLE_NULLS" />
        <variable citdl="integer" ilk="constant" name="ATTR_PERSISTENT" />
        <variable citdl="integer" ilk="constant" name="ATTR_STATEMENT_CLASS" />
        <variable citdl="integer" ilk="constant" name="ATTR_FETCH_TABLE_NAMES" />
        <variable citdl="integer" ilk="constant" name="ATTR_FETCH_CATALOG_NAMES" />
        <variable citdl="integer" ilk="constant" name="ATTR_DRIVER_NAME" />
        <variable citdl="integer" ilk="constant" name="ATTR_STRINGIFY_FETCHES" />
        <variable citdl="integer" ilk="constant" name="ATTR_MAX_COLUMN_LEN" />
        <variable citdl="integer" ilk="constant" name="ATTR_EMULATE_PREPARES" />
        <variable citdl="integer" ilk="constant" name="ATTR_DEFAULT_FETCH_MODE" />
        <variable citdl="integer" ilk="constant" name="ERRMODE_SILENT" />
        <variable citdl="integer" ilk="constant" name="ERRMODE_WARNING" />
        <variable citdl="integer" ilk="constant" name="ERRMODE_EXCEPTION" />
        <variable citdl="integer" ilk="constant" name="CASE_NATURAL" />
        <variable citdl="integer" ilk="constant" name="CASE_LOWER" />
        <variable citdl="integer" ilk="constant" name="CASE_UPPER" />
        <variable citdl="integer" ilk="constant" name="NULL_NATURAL" />
        <variable citdl="integer" ilk="constant" name="NULL_EMPTY_STRING" />
        <variable citdl="integer" ilk="constant" name="NULL_TO_STRING" />
        <variable citdl="string" ilk="constant" name="ERR_NONE" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_NEXT" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_PRIOR" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_FIRST" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_LAST" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_ABS" />
        <variable citdl="integer" ilk="constant" name="FETCH_ORI_REL" />
        <variable citdl="integer" ilk="constant" name="CURSOR_FWDONLY" />
        <variable citdl="integer" ilk="constant" name="CURSOR_SCROLL" />
      </scope>
      <scope ilk="class" name="PDOStatement">
        <scope doc="Execute a prepared statement optionally binding&#xA;parameters" ilk="function" name="execute" returns="bool" signature="execute([array $bound_input_params])" src="pdo_stmt.c" />
        <scope doc="Fetches the next row and returns it or false if there&#xA;are no more rows" ilk="function" name="fetch" returns="mixed" signature="fetch([int $how = PDO_FETCH_BOTH [, int $orientation [, int $offset]]])" src="pdo_stmt.c" />
        <scope doc="bind a parameter to a PHP variable paramno is the&#xA;-based position of the placeholder in the SQL statement&#xA;but" ilk="function" name="bindParam" returns="bool" signature="bindParam(mixed $paramno, mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" src="pdo_stmt.c" />
        <scope doc="bind a column to a PHP variable On each row fetch param&#xA;will contain the value of the corresponding column" ilk="function" name="bindColumn" returns="bool" signature="bindColumn(mixed $column, mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" src="pdo_stmt.c" />
        <scope doc="bind an input parameter to the value of a PHP variable&#xA;paramno is the -based position of the placeholder in" ilk="function" name="bindValue" returns="bool" signature="bindValue(mixed $paramno, mixed $param [, int $type ])" src="pdo_stmt.c" />
        <scope doc="Returns the number of rows in a result set or the&#xA;number of rows affected by the last execute It" ilk="function" name="rowCount" returns="int" signature="rowCount()" src="pdo_stmt.c" />
        <scope doc="Returns a data of the specified column in the result&#xA;set" ilk="function" name="fetchColumn" returns="string" signature="fetchColumn([int column_number])" src="pdo_stmt.c" />
        <scope doc="Returns an array of all of the results" ilk="function" name="fetchAll" returns="array" signature="fetchAll([int $how = PDO_FETCH_BOTH [, string class_name [, NULL" src="pdo_stmt.c" />
        <scope doc="Fetches the next row and returns it as an object" ilk="function" name="fetchObject" returns="mixed" signature="fetchObject(string class_name [, NULL" src="pdo_stmt.c" />
        <scope doc="Fetch the error code associated with the last operation&#xA;on the statement handle" ilk="function" name="errorCode" returns="string" signature="errorCode()" src="pdo_stmt.c" />
        <scope doc="Fetch extended error information associated with the&#xA;last operation on the statement handle" ilk="function" name="errorInfo" returns="array" signature="errorInfo()" src="pdo_stmt.c" />
        <scope doc="Set an attribute" ilk="function" name="setAttribute" returns="bool" signature="setAttribute(long attribute, mixed value)" src="pdo_stmt.c" />
        <scope doc="Get an attribute" ilk="function" name="getAttribute" returns="mixed" signature="getAttribute(long attribute)" src="pdo_stmt.c" />
        <scope doc="Returns the number of columns in the result set" ilk="function" name="columnCount" returns="int" signature="columnCount()" src="pdo_stmt.c" />
        <scope doc="Returns meta data for a numbered column" ilk="function" name="getColumnMeta" returns="array" signature="getColumnMeta(int $column)" src="pdo_stmt.c" />
        <scope doc="Changes the default fetch mode for subsequent fetches&#xA;params have different meaning for different fetch modes" ilk="function" name="setFetchMode" returns="bool" signature="setFetchMode(int mode [mixed* params])" src="pdo_stmt.c" />
        <scope doc="Advances to the next rowset in a multi-rowset statement&#xA;handle Returns true if it succeded false otherwise" ilk="function" name="nextRowset" returns="bool" signature="nextRowset()" src="pdo_stmt.c" />
        <scope doc="Closes the cursor leaving the statement ready for&#xA;re-execution" ilk="function" name="closeCursor" returns="bool" signature="closeCursor()" src="pdo_stmt.c" />
        <scope doc="A utility for internals hackers to debug parameter&#xA;internals" ilk="function" name="debugDumpParams" returns="void" signature="debugDumpParams()" src="pdo_stmt.c" />
        <scope doc="Prevents use of a PDOStatement instance that has been&#xA;unserialized" ilk="function" name="__wakeup" returns="int" signature="__wakeup()" src="pdo_stmt.c" />
        <scope doc="Prevents serialization of a PDOStatement instance" ilk="function" name="__sleep" returns="int" signature="__sleep()" src="pdo_stmt.c" />
        <variable name="queryString" />
      </scope>
      <scope ilk="class" name="PDORow" />
      <scope ilk="class" name="SQLiteDatabase">
        <scope ilk="function" name="__construct" signature="__construct()" />
        <scope doc="Executes an SQL statement given by the query against a given database handle." ilk="function" name="query" signature="query ( string $query  [, int $result_type  [, string &amp;$error_msg ]] )" />
        <scope doc="Executes an SQL statement given by the query against a given database handle (specified by the dbhandle  parameter)." ilk="function" name="queryExec" signature="queryExec ( string $query  [, string &amp;$error_msg ] )" />
        <scope doc="sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling  sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned." ilk="function" name="arrayQuery" signature="arrayQuery ( string $query  [, int $result_type  [, bool $decode_binary ]] )" />
        <scope doc="undocumented" ilk="function" name="singleQuery" signature="singleQuery ( string $query  [, bool $first_row_only  [, bool $decode_binary ]] )" />
        <scope doc="sqlite_unbuffered_query() is identical to sqlite_query() except that the result that is returned is a sequential forward-only result set that can only be used to read each row, one after the other." ilk="function" name="unbufferedQuery" signature="unbufferedQuery ( string $query  [, int $result_type  [, string &amp;$error_msg ]] )" />
        <scope doc="Returns the rowid of the row that was most recently inserted into the database dbhandle, if it was created as an auto-increment field." ilk="function" name="lastInsertRowid" signature="lastInsertRowid ( void  )" />
        <scope doc="Returns the numbers of rows that were changed by the most recent SQL statement executed against the dbhandle database handle." ilk="function" name="changes" signature="changes ( void  )" />
        <scope doc="sqlite_create_aggregate() is similar to sqlite_create_function() except that it registers functions that can be used to calculate a result aggregated across all the rows of a query." ilk="function" name="createAggregate" signature="createAggregate ( string $function_name  , callback $step_func  , callback $finalize_func  [, int $num_args ] )" />
        <scope doc="sqlite_create_function() allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements." ilk="function" name="createFunction" signature="createFunction ( string $function_name  , callback $callback  [, int $num_args ] )" />
        <scope doc="Set the maximum time, in milliseconds, that SQLite will wait for a dbhandle to become ready for use." ilk="function" name="busyTimeout" signature="busyTimeout ( int $milliseconds  )" />
        <scope doc="Returns the error code from the last operation performed on dbhandle (the database handle), or 0 when no error occurred. A human readable description of the error code can be retrieved using sqlite_error_string()." ilk="function" name="lastError" signature="lastError ( void  )" />
        <scope doc="sqlite_fetch_column_types() returns an array of column data types from the specified table_name table." ilk="function" name="fetchColumnTypes" signature="fetchColumnTypes ( string $table_name  [, int $result_type ] )" />
      </scope>
      <scope ilk="class" name="SQLiteResult">
        <scope doc="Fetches the next row from the given result handle. If there are no more rows, returns FALSE, otherwise returns an associative array representing the row data." ilk="function" name="fetch" signature="fetch ([ int $result_type  [, bool $decode_binary ]] )" />
        <scope doc="undocumented" ilk="function" name="fetchObject" signature="fetchObject ([ string $class_name  [, array $ctor_params  [, bool $decode_binary ]]] )" />
        <scope doc="sqlite_fetch_single() is identical to sqlite_fetch_array() except that it returns the value of the first column of the rowset." ilk="function" name="fetchSingle" signature="fetchSingle ([ bool $decode_binary ] )" />
        <scope doc="sqlite_fetch_all() returns an array of the entire result set from the result resource. It is similar to calling sqlite_query() (or sqlite_unbuffered_query()) and then sqlite_fetch_array() for each row in the result set." ilk="function" name="fetchAll" signature="fetchAll ([ int $result_type  [, bool $decode_binary ]] )" />
        <scope doc="Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result." ilk="function" name="column" signature="column ( mixed $index_or_name  [, bool $decode_binary ] )" />
        <scope doc="Returns the number of fields in the result set." ilk="function" name="numFields" signature="numFields ( void  )" />
        <scope doc="Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result." ilk="function" name="fieldName" signature="fieldName ( int $field_index  )" />
        <scope doc="sqlite_current() is identical to sqlite_fetch_array() except that it does not advance to the next row prior to returning the data; it returns the data from the current position only." ilk="function" name="current" signature="current ([ int $result_type  [, bool $decode_binary ]] )" />
        <scope doc="sqlite_key() returns the current row index of the buffered result set result." ilk="function" name="key" signature="key ( void  )" />
        <scope doc="sqlite_next() advances the result handle result to the next row." ilk="function" name="next" signature="next ( void  )" />
        <scope doc="Finds whether more rows are available from the given result handle." ilk="function" name="valid" signature="valid ( void  )" />
        <scope doc="sqlite_rewind() seeks back to the first row in the given result set." ilk="function" name="rewind" signature="rewind ( void  )" />
        <scope ilk="function" name="count" signature="count()" />
        <scope doc="sqlite_prev() seeks back the  result handle to the previous row." ilk="function" name="prev" signature="prev ( void  )" />
        <scope doc="Find whether there are more previous rows from the given result handle." ilk="function" name="hasPrev" signature="hasPrev ( void  )" />
        <scope doc="Returns the number of rows in the buffered result set." ilk="function" name="numRows" signature="numRows ( void  )" />
        <scope doc="sqlite_seek() seeks to the row given by the parameter rownum." ilk="function" name="seek" signature="seek ( int $rownum  )" />
      </scope>
      <scope ilk="class" name="SQLiteUnbuffered">
        <scope ilk="function" name="fetch" signature="fetch()" />
        <scope ilk="function" name="fetchObject" signature="fetchObject()" />
        <scope ilk="function" name="fetchSingle" signature="fetchSingle()" />
        <scope ilk="function" name="fetchAll" signature="fetchAll()" />
        <scope ilk="function" name="column" signature="column()" />
        <scope ilk="function" name="numFields" signature="numFields()" />
        <scope ilk="function" name="fieldName" signature="fieldName()" />
        <scope ilk="function" name="current" signature="current()" />
        <scope ilk="function" name="next" signature="next()" />
        <scope ilk="function" name="valid" signature="valid()" />
      </scope>
      <scope classrefs="RuntimeException" ilk="class" name="SQLiteException">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__construct" signature="__construct()" />
        <scope ilk="function" name="getMessage" signature="getMessage()" />
        <scope ilk="function" name="getCode" signature="getCode()" />
        <scope ilk="function" name="getFile" signature="getFile()" />
        <scope ilk="function" name="getLine" signature="getLine()" />
        <scope ilk="function" name="getTrace" signature="getTrace()" />
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <variable name="message" />
        <variable name="code" />
        <variable name="file" />
        <variable name="line" />
      </scope>
      <scope ilk="class" name="__PHP_Incomplete_Class" />
      <scope ilk="class" name="php_user_filter">
        <scope ilk="function" name="filter" signature="filter()" />
        <scope ilk="function" name="onCreate" signature="onCreate()" />
        <scope ilk="function" name="onClose" signature="onClose()" />
        <variable name="filtername" />
        <variable name="params" />
      </scope>
      <scope ilk="class" name="Directory">
        <scope ilk="function" name="close" signature="close()" />
        <scope ilk="function" name="rewind" signature="rewind()" />
        <scope ilk="function" name="read" signature="read()" />
      </scope>
      <scope classrefs="Exception" ilk="class" name="ReflectionException">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__construct" signature="__construct()" />
        <scope ilk="function" name="getMessage" signature="getMessage()" />
        <scope ilk="function" name="getCode" signature="getCode()" />
        <scope ilk="function" name="getFile" signature="getFile()" />
        <scope ilk="function" name="getLine" signature="getLine()" />
        <scope ilk="function" name="getTrace" signature="getTrace()" />
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <variable name="message" />
        <variable name="code" />
        <variable name="file" />
        <variable name="line" />
      </scope>
      <scope ilk="class" name="Reflection">
        <scope doc="Returns an array of modifier names" ilk="function" name="getModifierNames" returns="array" signature="getModifierNames(int modifiers)" src="php_reflection.c" />
        <scope doc="Exports a reflection object Returns the output if TRUE&#xA;is specified for return printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(Reflector r [, bool return])" src="php_reflection.c" />
      </scope>
      <scope ilk="class" name="ReflectionFunctionAbstract">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <scope ilk="function" name="isInternal" signature="isInternal()" />
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()" />
        <scope ilk="function" name="getName" signature="getName()" />
        <scope ilk="function" name="getFileName" signature="getFileName()" />
        <scope ilk="function" name="getStartLine" signature="getStartLine()" />
        <scope ilk="function" name="getEndLine" signature="getEndLine()" />
        <scope ilk="function" name="getDocComment" signature="getDocComment()" />
        <scope ilk="function" name="getStaticVariables" signature="getStaticVariables()" />
        <scope ilk="function" name="returnsReference" signature="returnsReference()" />
        <scope ilk="function" name="getParameters" signature="getParameters()" />
        <scope ilk="function" name="getNumberOfParameters" signature="getNumberOfParameters()" />
        <scope ilk="function" name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()" />
        <scope ilk="function" name="getExtension" signature="getExtension()" />
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()" />
        <scope ilk="function" name="isDeprecated" signature="isDeprecated()" />
        <variable name="name" />
      </scope>
      <scope classrefs="ReflectionFunctionAbstract" ilk="class" name="ReflectionFunction">
        <scope doc="Constructor Throws an Exception in case the given&#xA;function does not exist" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Exports a reflection object Returns the output if TRUE&#xA;is specified for return printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(string name [, bool return])" src="php_reflection.c" />
        <scope doc="Returns whether this function has been disabled or not" ilk="function" name="isDisabled" returns="bool" signature="isDisabled()" src="php_reflection.c" />
        <scope doc="Invokes the function" ilk="function" name="invoke" returns="mixed" signature="invoke(mixed* args)" src="php_reflection.c" />
        <scope doc="Invokes the function and pass its arguments as array" ilk="function" name="invokeArgs" returns="mixed" signature="invokeArgs(array args)" src="php_reflection.c" />
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope doc="Returns whether this is an internal function" ilk="function" name="isInternal" returns="bool" signature="isInternal()" src="php_reflection.c" />
        <scope doc="Returns whether this is an user-defined function" ilk="function" name="isUserDefined" returns="bool" signature="isUserDefined()" src="php_reflection.c" />
        <scope doc="Returns this function&apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" />
        <scope doc="Returns the filename of the file this function was&#xA;declared in" ilk="function" name="getFileName" returns="string" signature="getFileName()" src="php_reflection.c" />
        <scope doc="Returns the line this function&apos;s declaration starts at" ilk="function" name="getStartLine" returns="int" signature="getStartLine()" src="php_reflection.c" />
        <scope doc="Returns the line this function&apos;s declaration ends at" ilk="function" name="getEndLine" returns="int" signature="getEndLine()" src="php_reflection.c" />
        <scope doc="Returns the doc comment for this function" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" />
        <scope doc="Returns an associative array containing this function&apos;s&#xA;static variables and their values" ilk="function" name="getStaticVariables" returns="array" signature="getStaticVariables()" src="php_reflection.c" />
        <scope doc="Gets whether this function returns a reference" ilk="function" name="returnsReference" returns="bool" signature="returnsReference()" src="php_reflection.c" />
        <scope doc="Returns an array of parameter objects for this function" ilk="function" name="getParameters" returns="ReflectionParameter[]" signature="getParameters()" src="php_reflection.c" />
        <scope doc="Gets the number of required parameters" ilk="function" name="getNumberOfParameters" returns="bool" signature="getNumberOfParameters()" src="php_reflection.c" />
        <scope doc="Gets the number of required parameters" ilk="function" name="getNumberOfRequiredParameters" returns="bool" signature="getNumberOfRequiredParameters()" src="php_reflection.c" />
        <scope doc="Returns NULL or the extension the function belongs to" ilk="function" name="getExtension" returns="ReflectionExtension" signature="getExtension()" src="php_reflection.c" />
        <scope doc="Returns false or the name of the extension the function&#xA;belongs to" ilk="function" name="getExtensionName" returns="string" signature="getExtensionName()" src="php_reflection.c" />
        <scope doc="Returns whether this function is deprecated" ilk="function" name="isDeprecated" returns="bool" signature="isDeprecated()" src="php_reflection.c" />
        <variable citdl="integer" ilk="constant" name="IS_DEPRECATED" />
        <variable name="name" />
      </scope>
      <scope ilk="class" name="ReflectionParameter">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed function, mixed parameter [, bool return])" src="php_reflection.c" />
        <scope doc="Constructor Throws an Exception in case the given&#xA;method does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed function, mixed parameter)" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Returns this parameters&apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" />
        <scope doc="Returns whether this parameters is passed to by&#xA;reference" ilk="function" name="isPassedByReference" returns="bool" signature="isPassedByReference()" src="php_reflection.c" />
        <scope doc="Returns the ReflectionFunction for the function of this&#xA;parameter" ilk="function" name="getDeclaringFunction" returns="ReflectionFunction" signature="getDeclaringFunction()" src="php_reflection.c" />
        <scope doc="Returns in which class this parameter is defined not&#xA;the typehint of the parameter" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" />
        <scope doc="Returns this parameters&apos;s class hint or NULL if there&#xA;is none" ilk="function" name="getClass" returns="ReflectionClass" signature="getClass()" src="php_reflection.c" />
        <scope doc="Returns whether parameter MUST be an array" ilk="function" name="isArray" returns="bool" signature="isArray()" src="php_reflection.c" />
        <scope doc="Returns whether NULL is allowed as this parameters&apos;s&#xA;value" ilk="function" name="allowsNull" returns="bool" signature="allowsNull()" src="php_reflection.c" />
        <scope doc="Returns whether this parameter is an optional parameter" ilk="function" name="getPosition" returns="bool" signature="getPosition()" src="php_reflection.c" />
        <scope doc="Returns whether this parameter is an optional parameter" ilk="function" name="isOptional" returns="bool" signature="isOptional()" src="php_reflection.c" />
        <scope doc="Returns whether the default value of this parameter is&#xA;available" ilk="function" name="isDefaultValueAvailable" returns="bool" signature="isDefaultValueAvailable()" src="php_reflection.c" />
        <scope doc="Returns the default value of this parameter or throws&#xA;an exception" ilk="function" name="getDefaultValue" returns="bool" signature="getDefaultValue()" src="php_reflection.c" />
        <variable name="name" />
      </scope>
      <scope classrefs="ReflectionFunctionAbstract" ilk="class" name="ReflectionMethod">
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed class, string name [, bool return])" src="php_reflection.c" />
        <scope doc="Constructor Throws an Exception in case the given&#xA;method does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed class_or_method [, string name])" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Returns whether this method is public" ilk="function" name="isPublic" returns="bool" signature="isPublic()" src="php_reflection.c" />
        <scope doc="Returns whether this method is private" ilk="function" name="isPrivate" returns="bool" signature="isPrivate()" src="php_reflection.c" />
        <scope doc="Returns whether this method is protected" ilk="function" name="isProtected" returns="bool" signature="isProtected()" src="php_reflection.c" />
        <scope doc="Returns whether this method is abstract" ilk="function" name="isAbstract" returns="bool" signature="isAbstract()" src="php_reflection.c" />
        <scope doc="Returns whether this method is final" ilk="function" name="isFinal" returns="bool" signature="isFinal()" src="php_reflection.c" />
        <scope doc="Returns whether this method is static" ilk="function" name="isStatic" returns="bool" signature="isStatic()" src="php_reflection.c" />
        <scope doc="Returns whether this method is the constructor" ilk="function" name="isConstructor" returns="bool" signature="isConstructor()" src="php_reflection.c" />
        <scope doc="Returns whether this method is static" ilk="function" name="isDestructor" returns="bool" signature="isDestructor()" src="php_reflection.c" />
        <scope doc="Returns a bitfield of the access modifiers for this&#xA;method" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" />
        <scope doc="Invokes the method" ilk="function" name="invoke" returns="mixed" signature="invoke(mixed object, mixed* args)" src="php_reflection.c" />
        <scope doc="Invokes the function and pass its arguments as array" ilk="function" name="invokeArgs" returns="mixed" signature="invokeArgs(mixed object, array args)" src="php_reflection.c" />
        <scope doc="Get the declaring class" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" />
        <scope doc="Get the prototype" ilk="function" name="getPrototype" returns="ReflectionClass" signature="getPrototype()" src="php_reflection.c" />
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="isInternal" signature="isInternal()" />
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()" />
        <scope ilk="function" name="getName" signature="getName()" />
        <scope ilk="function" name="getFileName" signature="getFileName()" />
        <scope ilk="function" name="getStartLine" signature="getStartLine()" />
        <scope ilk="function" name="getEndLine" signature="getEndLine()" />
        <scope ilk="function" name="getDocComment" signature="getDocComment()" />
        <scope ilk="function" name="getStaticVariables" signature="getStaticVariables()" />
        <scope ilk="function" name="returnsReference" signature="returnsReference()" />
        <scope ilk="function" name="getParameters" signature="getParameters()" />
        <scope ilk="function" name="getNumberOfParameters" signature="getNumberOfParameters()" />
        <scope ilk="function" name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()" />
        <scope ilk="function" name="getExtension" signature="getExtension()" />
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()" />
        <scope ilk="function" name="isDeprecated" signature="isDeprecated()" />
        <variable citdl="integer" ilk="constant" name="IS_STATIC" />
        <variable citdl="integer" ilk="constant" name="IS_PUBLIC" />
        <variable citdl="integer" ilk="constant" name="IS_PROTECTED" />
        <variable citdl="integer" ilk="constant" name="IS_PRIVATE" />
        <variable citdl="integer" ilk="constant" name="IS_ABSTRACT" />
        <variable citdl="integer" ilk="constant" name="IS_FINAL" />
        <variable name="name" />
        <variable name="class" />
      </scope>
      <scope ilk="class" name="ReflectionClass">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed argument [, bool return])" src="php_reflection.c" />
        <scope doc="throws ReflectionException Constructor Takes a string&#xA;or an instance as an argument" ilk="function" name="__construct" returns="void" signature="__construct(mixed argument)" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Returns the class&apos; name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" />
        <scope doc="Returns whether this class is an internal class" ilk="function" name="isInternal" returns="bool" signature="isInternal()" src="php_reflection.c" />
        <scope doc="Returns whether this class is user-defined" ilk="function" name="isUserDefined" returns="bool" signature="isUserDefined()" src="php_reflection.c" />
        <scope doc="Returns whether this class is instantiable" ilk="function" name="isInstantiable" returns="bool" signature="isInstantiable()" src="php_reflection.c" />
        <scope doc="Returns the filename of the file this class was&#xA;declared in" ilk="function" name="getFileName" returns="string" signature="getFileName()" src="php_reflection.c" />
        <scope doc="Returns the line this class&apos; declaration starts at" ilk="function" name="getStartLine" returns="int" signature="getStartLine()" src="php_reflection.c" />
        <scope doc="Returns the line this class&apos; declaration ends at" ilk="function" name="getEndLine" returns="int" signature="getEndLine()" src="php_reflection.c" />
        <scope doc="Returns the doc comment for this class" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" />
        <scope doc="Returns the class&apos; constructor if there is one NULL&#xA;otherwise" ilk="function" name="getConstructor" returns="ReflectionMethod" signature="getConstructor()" src="php_reflection.c" />
        <scope doc="Returns whether a method exists or not" ilk="function" name="hasMethod" returns="bool" signature="hasMethod(string name)" src="php_reflection.c" />
        <scope doc="throws ReflectionException Returns the class&apos; method&#xA;specified by its name" ilk="function" name="getMethod" returns="ReflectionMethod" signature="getMethod(string name)" src="php_reflection.c" />
        <scope doc="Returns an array of this class&apos; methods" ilk="function" name="getMethods" returns="ReflectionMethod[]" signature="getMethods([long $filter])" src="php_reflection.c" />
        <scope doc="Returns whether a property exists or not" ilk="function" name="hasProperty" returns="bool" signature="hasProperty(string name)" src="php_reflection.c" />
        <scope doc="throws ReflectionException Returns the class&apos; property&#xA;specified by its name" ilk="function" name="getProperty" returns="ReflectionProperty" signature="getProperty(string name)" src="php_reflection.c" />
        <scope doc="Returns an array of this class&apos; properties" ilk="function" name="getProperties" returns="ReflectionProperty[]" signature="getProperties([long $filter])" src="php_reflection.c" />
        <scope doc="Returns whether a constant exists or not" ilk="function" name="hasConstant" returns="bool" signature="hasConstant(string name)" src="php_reflection.c" />
        <scope doc="Returns an associative array containing this class&apos;&#xA;constants and their values" ilk="function" name="getConstants" returns="array" signature="getConstants()" src="php_reflection.c" />
        <scope doc="Returns the class&apos; constant specified by its name" ilk="function" name="getConstant" returns="mixed" signature="getConstant(string name)" src="php_reflection.c" />
        <scope doc="Returns an array of interfaces this class implements" ilk="function" name="getInterfaces" returns="ReflectionClass[]" signature="getInterfaces()" src="php_reflection.c" />
        <scope doc="Returns an array of names of interfaces this class&#xA;implements" ilk="function" name="getInterfaceNames" returns="String[]" signature="getInterfaceNames()" src="php_reflection.c" />
        <scope doc="Returns whether this is an interface or a class" ilk="function" name="isInterface" returns="bool" signature="isInterface()" src="php_reflection.c" />
        <scope doc="Returns whether this class is abstract" ilk="function" name="isAbstract" returns="bool" signature="isAbstract()" src="php_reflection.c" />
        <scope doc="Returns whether this class is final" ilk="function" name="isFinal" returns="bool" signature="isFinal()" src="php_reflection.c" />
        <scope doc="Returns a bitfield of the access modifiers for this&#xA;class" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" />
        <scope doc="Returns whether the given object is an instance of this&#xA;class" ilk="function" name="isInstance" returns="bool" signature="isInstance(stdclass object)" src="php_reflection.c" />
        <scope doc="Returns an instance of this class" ilk="function" name="newInstance" returns="stdclass" signature="newInstance(mixed* args, ...)" src="php_reflection.c" />
        <scope doc="Returns an instance of this class" ilk="function" name="newInstanceArgs" returns="stdclass" signature="newInstanceArgs([array args])" src="php_reflection.c" />
        <scope doc="Returns the class&apos; parent class or if none exists FALSE" ilk="function" name="getParentClass" returns="ReflectionClass" signature="getParentClass()" src="php_reflection.c" />
        <scope doc="Returns whether this class is a subclass of another&#xA;class" ilk="function" name="isSubclassOf" returns="bool" signature="isSubclassOf(string" src="php_reflection.c" />
        <scope doc="Returns an associative array containing all static&#xA;property values of the class" ilk="function" name="getStaticProperties" returns="array" signature="getStaticProperties()" src="php_reflection.c" />
        <scope doc="Returns the value of a static property" ilk="function" name="getStaticPropertyValue" returns="mixed" signature="getStaticPropertyValue(string name [, mixed default])" src="php_reflection.c" />
        <scope doc="Sets the value of a static property" ilk="function" name="setStaticPropertyValue" returns="void" signature="setStaticPropertyValue($name, $value)" src="php_reflection.c" />
        <scope doc="Returns an associative array containing copies of all&#xA;default property values of the class" ilk="function" name="getDefaultProperties" returns="array" signature="getDefaultProperties()" src="php_reflection.c" />
        <scope doc="Returns whether this class is iterateable can be used&#xA;inside foreach" ilk="function" name="isIterateable" returns="bool" signature="isIterateable()" src="php_reflection.c" />
        <scope doc="Returns whether this class is a subclass of another&#xA;class" ilk="function" name="implementsInterface" returns="bool" signature="implementsInterface(string" src="php_reflection.c" />
        <scope doc="Returns NULL or the extension the class belongs to" ilk="function" name="getExtension" returns="ReflectionExtension" signature="getExtension()" src="php_reflection.c" />
        <scope doc="Returns false or the name of the extension the class&#xA;belongs to" ilk="function" name="getExtensionName" returns="string" signature="getExtensionName()" src="php_reflection.c" />
        <variable citdl="integer" ilk="constant" name="IS_IMPLICIT_ABSTRACT" />
        <variable citdl="integer" ilk="constant" name="IS_EXPLICIT_ABSTRACT" />
        <variable citdl="integer" ilk="constant" name="IS_FINAL" />
        <variable name="name" />
      </scope>
      <scope classrefs="ReflectionClass" ilk="class" name="ReflectionObject">
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed argument [, bool return])" src="php_reflection.c" />
        <scope doc="throws ReflectionException Constructor Takes an&#xA;instance as an argument" ilk="function" name="__construct" returns="void" signature="__construct(mixed argument)" src="php_reflection.c" />
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope ilk="function" name="__toString" signature="__toString()" />
        <scope ilk="function" name="getName" signature="getName()" />
        <scope ilk="function" name="isInternal" signature="isInternal()" />
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()" />
        <scope ilk="function" name="isInstantiable" signature="isInstantiable()" />
        <scope ilk="function" name="getFileName" signature="getFileName()" />
        <scope ilk="function" name="getStartLine" signature="getStartLine()" />
        <scope ilk="function" name="getEndLine" signature="getEndLine()" />
        <scope ilk="function" name="getDocComment" signature="getDocComment()" />
        <scope ilk="function" name="getConstructor" signature="getConstructor()" />
        <scope ilk="function" name="hasMethod" signature="hasMethod()" />
        <scope ilk="function" name="getMethod" signature="getMethod()" />
        <scope ilk="function" name="getMethods" signature="getMethods()" />
        <scope ilk="function" name="hasProperty" signature="hasProperty()" />
        <scope ilk="function" name="getProperty" signature="getProperty()" />
        <scope ilk="function" name="getProperties" signature="getProperties()" />
        <scope ilk="function" name="hasConstant" signature="hasConstant()" />
        <scope ilk="function" name="getConstants" signature="getConstants()" />
        <scope ilk="function" name="getConstant" signature="getConstant()" />
        <scope ilk="function" name="getInterfaces" signature="getInterfaces()" />
        <scope ilk="function" name="getInterfaceNames" signature="getInterfaceNames()" />
        <scope ilk="function" name="isInterface" signature="isInterface()" />
        <scope ilk="function" name="isAbstract" signature="isAbstract()" />
        <scope ilk="function" name="isFinal" signature="isFinal()" />
        <scope ilk="function" name="getModifiers" signature="getModifiers()" />
        <scope ilk="function" name="isInstance" signature="isInstance()" />
        <scope ilk="function" name="newInstance" signature="newInstance()" />
        <scope ilk="function" name="newInstanceArgs" signature="newInstanceArgs()" />
        <scope ilk="function" name="getParentClass" signature="getParentClass()" />
        <scope ilk="function" name="isSubclassOf" signature="isSubclassOf()" />
        <scope ilk="function" name="getStaticProperties" signature="getStaticProperties()" />
        <scope ilk="function" name="getStaticPropertyValue" signature="getStaticPropertyValue()" />
        <scope ilk="function" name="setStaticPropertyValue" signature="setStaticPropertyValue()" />
        <scope ilk="function" name="getDefaultProperties" signature="getDefaultProperties()" />
        <scope ilk="function" name="isIterateable" signature="isIterateable()" />
        <scope ilk="function" name="implementsInterface" signature="implementsInterface()" />
        <scope ilk="function" name="getExtension" signature="getExtension()" />
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()" />
        <variable citdl="integer" ilk="constant" name="IS_IMPLICIT_ABSTRACT" />
        <variable citdl="integer" ilk="constant" name="IS_EXPLICIT_ABSTRACT" />
        <variable citdl="integer" ilk="constant" name="IS_FINAL" />
        <variable name="name" />
      </scope>
      <scope ilk="class" name="ReflectionProperty">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(mixed class, string name [, bool return])" src="php_reflection.c" />
        <scope doc="Constructor Throws an Exception in case the given&#xA;property does not exist" ilk="function" name="__construct" returns="void" signature="__construct(mixed class, string name)" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Returns the class&apos; name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" />
        <scope doc="Returns this property&apos;s value" ilk="function" name="getValue" returns="mixed" signature="getValue([stdclass object])" src="php_reflection.c" />
        <scope doc="Sets this property&apos;s value" ilk="function" name="setValue" returns="void" signature="setValue([stdclass object,] mixed value)" src="php_reflection.c" />
        <scope doc="Returns whether this property is public" ilk="function" name="isPublic" returns="bool" signature="isPublic()" src="php_reflection.c" />
        <scope doc="Returns whether this property is private" ilk="function" name="isPrivate" returns="bool" signature="isPrivate()" src="php_reflection.c" />
        <scope doc="Returns whether this property is protected" ilk="function" name="isProtected" returns="bool" signature="isProtected()" src="php_reflection.c" />
        <scope doc="Returns whether this property is static" ilk="function" name="isStatic" returns="bool" signature="isStatic()" src="php_reflection.c" />
        <scope doc="Returns whether this property is default declared at&#xA;compilation time" ilk="function" name="isDefault" returns="bool" signature="isDefault()" src="php_reflection.c" />
        <scope doc="Returns a bitfield of the access modifiers for this&#xA;property" ilk="function" name="getModifiers" returns="int" signature="getModifiers()" src="php_reflection.c" />
        <scope doc="Get the declaring class" ilk="function" name="getDeclaringClass" returns="ReflectionClass" signature="getDeclaringClass()" src="php_reflection.c" />
        <scope doc="Returns the doc comment for this property" ilk="function" name="getDocComment" returns="string" signature="getDocComment()" src="php_reflection.c" />
        <variable citdl="integer" ilk="constant" name="IS_STATIC" />
        <variable citdl="integer" ilk="constant" name="IS_PUBLIC" />
        <variable citdl="integer" ilk="constant" name="IS_PROTECTED" />
        <variable citdl="integer" ilk="constant" name="IS_PRIVATE" />
        <variable name="name" />
        <variable name="class" />
      </scope>
      <scope ilk="class" name="ReflectionExtension">
        <scope ilk="function" name="__clone" signature="__clone()" />
        <scope doc="throws ReflectionException Exports a reflection object&#xA;Returns the output if TRUE is specified for return&#xA;printing it otherwise" ilk="function" name="export" returns="mixed" signature="export(string name [, bool return])" src="php_reflection.c" />
        <scope doc="Constructor Throws an Exception in case the given&#xA;extension does not exist" ilk="function" name="__construct" returns="void" signature="__construct(string name)" src="php_reflection.c" />
        <scope doc="Returns a string representation" ilk="function" name="__toString" returns="string" signature="__toString()" src="php_reflection.c" />
        <scope doc="Returns this extension&apos;s name" ilk="function" name="getName" returns="string" signature="getName()" src="php_reflection.c" />
        <scope doc="Returns this extension&apos;s version" ilk="function" name="getVersion" returns="string" signature="getVersion()" src="php_reflection.c" />
        <scope doc="Returns an array of this extension&apos;s fuctions" ilk="function" name="getFunctions" returns="ReflectionFunction[]" signature="getFunctions()" src="php_reflection.c" />
        <scope doc="Returns an associative array containing this&#xA;extension&apos;s constants and their values" ilk="function" name="getConstants" returns="array" signature="getConstants()" src="php_reflection.c" />
        <scope doc="Returns an associative array containing this&#xA;extension&apos;s INI entries and their values" ilk="function" name="getINIEntries" returns="array" signature="getINIEntries()" src="php_reflection.c" />
        <scope doc="Returns an array containing ReflectionClass objects for&#xA;all classes of this extension" ilk="function" name="getClasses" returns="ReflectionClass[]" signature="getClasses()" src="php_reflection.c" />
        <scope doc="Returns an array containing all names of all classes of&#xA;this extension" ilk="function" name="getClassNames" returns="array" signature="getClassNames()" src="php_reflection.c" />
        <scope doc="Returns an array containing all names of all extensions&#xA;this extension depends on" ilk="function" name="getDependencies" returns="array" signature="getDependencies()" src="php_reflection.c" />
        <scope doc="U Prints phpinfo block for the extension" ilk="function" name="info" returns="void" signature="info()" src="php_reflection.c" />
        <variable name="name" />
      </scope>
      <scope ilk="class" name="DateTime">
        <scope doc="Creates new DateTime object" ilk="function" name="__construct" signature="__construct([string time[, DateTimeZone object]])" src="php_date.c" />
        <scope ilk="function" name="format" signature="format()" />
        <scope ilk="function" name="modify" signature="modify()" />
        <scope ilk="function" name="getTimezone" signature="getTimezone()" />
        <scope ilk="function" name="setTimezone" signature="setTimezone()" />
        <scope ilk="function" name="getOffset" signature="getOffset()" />
        <scope ilk="function" name="setTime" signature="setTime()" />
        <scope ilk="function" name="setDate" signature="setDate()" />
        <scope ilk="function" name="setISODate" signature="setISODate()" />
        <variable citdl="string" ilk="constant" name="ATOM" />
        <variable citdl="string" ilk="constant" name="COOKIE" />
        <variable citdl="string" ilk="constant" name="ISO8601" />
        <variable citdl="string" ilk="constant" name="RFC822" />
        <variable citdl="string" ilk="constant" name="RFC850" />
        <variable citdl="string" ilk="constant" name="RFC1036" />
        <variable citdl="string" ilk="constant" name="RFC1123" />
        <variable citdl="string" ilk="constant" name="RFC2822" />
        <variable citdl="string" ilk="constant" name="RFC3339" />
        <variable citdl="string" ilk="constant" name="RSS" />
        <variable citdl="string" ilk="constant" name="W3C" />
      </scope>
      <scope ilk="class" name="DateTimeZone">
        <scope doc="Creates new DateTimeZone object" ilk="function" name="__construct" signature="__construct(string timezone)" src="php_date.c" />
        <scope ilk="function" name="getName" signature="getName()" />
        <scope ilk="function" name="getOffset" signature="getOffset()" />
        <scope ilk="function" name="getTransitions" signature="getTransitions()" />
        <scope ilk="function" name="listAbbreviations" signature="listAbbreviations()" />
        <scope ilk="function" name="listIdentifiers" signature="listIdentifiers()" />
      </scope>
      <scope classrefs="CachingIterator" ilk="class" interfacerefs="RecursiveIterator" line="3" lineend="51" name="CachingRecursiveIterator">
        <scope attributes="__ctor__" ilk="function" line="8" lineend="11" name="__construct" signature="__construct()" />
        <scope ilk="function" line="13" lineend="18" name="rewind" signature="rewind()" />
        <scope ilk="function" line="20" lineend="40" name="next" signature="next()" />
        <scope ilk="function" line="42" lineend="45" name="hasChildren" returns="this.hasChildren" signature="hasChildren()" />
        <scope ilk="function" line="47" lineend="50" name="getChildren" returns="this.getChildren" signature="getChildren()" />
        <variable attributes="protected" citdl="boolean" line="5" name="hasChildren" />
        <variable attributes="protected" citdl="CachingRecursiveIterator" line="6" name="getChildren" />
      </scope>
      <scope />
      <scope ilk="class" name="mysqli_result">
        <scope doc="The mysqli_data_seek() function seeks to an arbitrary  result pointer specified by the offset in the  result set." ilk="function" name="data_seek" signature="data_seek ( int offset )" />
        <scope doc="Available only with mysqlnd." ilk="function" name="fetch_all" signature="fetch_all ( int resulttype )" />
        <scope doc="Returns an array that corresponds to the fetched row or NULL if there  are no more rows for the resultset represented by the  result parameter." ilk="function" name="fetch_array" signature="fetch_array ( int resulttype )" />
        <scope doc="Returns an associative array that corresponds to the fetched row or NULL  if there are no more rows." ilk="function" name="fetch_assoc" signature="fetch_assoc ( void )" />
        <scope doc="Returns an object which contains field definition information from the  specified result set." ilk="function" name="fetch_field_direct" signature="fetch_field_direct ( int fieldnr )" />
        <scope doc="Returns the definition of one column of a result set as an object. Call  this function repeatedly to retrieve information about all columns in the  result set." ilk="function" name="fetch_field" signature="fetch_field ( void )" />
        <scope doc="This function serves an identical purpose to the  mysqli_fetch_field() function with the single  difference that, instead of returning one object at a time for each field,  the columns are returned as an array of objects." ilk="function" name="fetch_fields" signature="fetch_fields ( void )" />
        <scope doc="The mysqli_fetch_object() will return the current row  result set as an object where the attributes of the object represent the  names of the fields found within the result set." ilk="function" name="fetch_object" signature="fetch_object ( string class_name, array params )" />
        <scope doc="Fetches one row of data from the result set and returns it as an enumerated  array, where each column is stored in an array offset starting from 0 (zero).  Each subsequent call to this function will return the next row within the  result set, or NULL if there are no more rows." ilk="function" name="fetch_row" signature="fetch_row ( void )" />
        <scope doc="Sets the field cursor to the given offset. The next call to  mysqli_fetch_field() will retrieve the field definition  of the column associated with that offset." ilk="function" name="field_seek" signature="field_seek ( int fieldnr )" />
        <scope doc="Frees the memory associated with the result." ilk="function" name="free" signature="free ( void )" />
        <variable citdl="int" name="current_field" />
        <variable citdl="int" name="field_count" />
        <variable citdl="array" name="lengths" />
        <variable citdl="int" name="num_rows" />
      </scope>
      <scope ilk="class" name="mysqli">
        <scope doc="Turns on or off auto-commit mode on queries for the database connection." ilk="function" name="autocommit" signature="autocommit ( bool mode )" />
        <scope doc="Changes the user of the specified database connection and sets the current  database." ilk="function" name="change_user" signature="change_user ( string user, string password, string database )" />
        <scope doc="Returns the current character set for the database connection." ilk="function" name="character_set_name" signature="character_set_name ( void )" />
        <scope doc="Closes a previously opened database connection." ilk="function" name="close" signature="close ( void )" />
        <scope doc="Commits the current transaction for the database connection." ilk="function" name="commit" signature="commit ( void )" />
        <scope doc="Opens a connection to the MySQL Server running on." ilk="function" name="__construct" signature="__construct ( string host, string username, string passwd, string dbname, int port, string socket )" />
        <scope doc="Performs debugging operations using the Fred Fish debugging library." ilk="function" name="debug" signature="debug ( string message )" />
        <scope doc="This function is designed to be executed by an user with the SUPER  privilege and is used to dump debugging information into the log for the  MySQL Server relating to the connection." ilk="function" name="dump_debug_info" signature="dump_debug_info ( void )" />
        <scope doc="Returns a character set object providing several properties  of the current active character set." ilk="function" name="get_charset" signature="get_charset ( void )" />
        <scope doc="The mysqli_get_client_info() function is used to  return a string representing the client version being used in the  MySQLi extension." ilk="function" name="get_client_info" signature="get_client_info ( void )" />
        <scope doc="Returns client version number as an integer." ilk="function" name="get_client_version" signature="get_client_version ( void )" />
        <scope doc="No documentation available." ilk="function" name="get_connection_stats" signature="get_connection_stats ( void )" />
        <scope doc="No documentation available." ilk="function" name="get_client_stats" signature="get_client_stats ( void )" />
        <scope doc="No documentation available." ilk="function" name="get_cache_stats" signature="get_cache_stats ( void )" />
        <scope doc="Returns a string representing the version of the MySQL server that the  MySQLi extension is connected to." ilk="function" name="get_server_info" signature="get_server_info ( void )" />
        <scope doc="No documentation available." ilk="function" name="get_warnings" signature="get_warnings ( void )" />
        <scope doc="This function is used to ask the server to kill a MySQL thread specified  by the processid parameter. This value must be  retrieved by calling the mysqli_thread_id() function." ilk="function" name="kill" signature="kill ( int processid )" />
        <scope doc="Indicates if one or more result sets are available from a previous call to  mysqli_multi_query()." ilk="function" name="more_results" signature="more_results ( void )" />
        <scope doc="Executes one or multiple queries which are concatenated by a semicolon." ilk="function" name="multi_query" signature="multi_query ( string query )" />
        <scope doc="Prepares next result set from a previous call to  mysqli_multi_query() which can be retrieved by  mysqli_store_result() or  mysqli_use_result()." ilk="function" name="next_result" signature="next_result ( void )" />
        <scope doc="Used to set extra connect options and affect behavior for a connection." ilk="function" name="options" signature="options ( int option, mixed value )" />
        <scope doc="Checks whether the connection to the server is working. If it has gone  down, and global option mysqli.reconnect is enabled  an automatic reconnection is attempted." ilk="function" name="ping" signature="ping ( void )" />
        <scope doc="Procedure style:" ilk="function" name="prepare" signature="prepare ( string query, mysqli link, string query )" />
        <scope doc="Performs a query against the database." ilk="function" name="query" signature="query ( string query, int resultmode )" />
        <scope doc="Establish a connection to a MySQL database engine." ilk="function" name="real_connect" signature="real_connect ( string host, string username, string passwd, string dbname, int port, string socket, int flags )" />
        <scope doc="This function is used to create a legal SQL string that you can use in an  SQL statement. The given string is encoded to an escaped SQL string,  taking into account the current character set of the connection." ilk="function" name="real_escape_string" signature="real_escape_string ( string escapestr, string escapestr )" />
        <scope doc="Executes a single query against the database whose result can then be  retrieved or stored using the mysqli_store_result() or  mysqli_use_result() functions." ilk="function" name="real_query" signature="real_query ( string query )" />
        <scope doc="Rollbacks the current transaction for the database." ilk="function" name="rollback" signature="rollback ( void )" />
        <scope doc="Selects the default database to be used when performing queries against  the database connection." ilk="function" name="select_db" signature="select_db ( string dbname )" />
        <scope doc="Sets the default character set to be used when sending data from and to  the database server." ilk="function" name="set_charset" signature="set_charset ( string charset )" />
        <scope doc="Deactivates a LOAD DATA INFILE LOCAL handler previously  set with mysqli_set_local_infile_handler()." ilk="function" name="set_local_infile_default" signature="set_local_infile_default ( mysqli link )" />
        <scope doc="Object oriented style (method)" ilk="function" name="set_local_infile_handler" signature="set_local_infile_handler ( mysqli link, callback read_func, mysqli link, callback read_func )" />
        <scope doc="Used for establishing secure connections using SSL. It must be called  before mysqli_real_connect(). This function does  nothing unless OpenSSL support is enabled." ilk="function" name="ssl_set" signature="ssl_set ( string key, string cert, string ca, string capath, string cipher )" />
        <scope doc="mysqli_stat() returns a string containing  information similar to that provided by the &amp;#039;mysqladmin status&amp;#039; command.  This includes uptime in seconds and the number of running threads,  questions, reloads, and open tables." ilk="function" name="stat" signature="stat ( void )" />
        <scope doc="Allocates and initializes a statement object suitable for  mysqli_stmt_prepare()." ilk="function" name="stmt_init" signature="stmt_init ( void )" />
        <scope doc="Transfers the result set from the last query on the database connection  represented by the link parameter to be used with  the mysqli_data_seek() function." ilk="function" name="store_result" signature="store_result ( void )" />
        <scope doc="The mysqli_thread_id() function returns the thread  ID for the current connection which can then be killed using the  mysqli_kill() function. If the connection is lost  and you reconnect with mysqli_ping(), the thread ID  will be other. Therefore you should get the thread ID only when you need it." ilk="function" name="thread_id" signature="thread_id ( void )" />
        <scope doc="Tells whether the client library is compiled as thread-safe." ilk="function" name="thread_safe" signature="thread_safe ( void )" />
        <scope doc="Used to initiate the retrieval of a result set from the last query  executed using the mysqli_real_query() function on the  database connection." ilk="function" name="use_result" signature="use_result ( void )" />
        <variable citdl="int" name="affected_rows" />
        <variable citdl="string" name="connect_errno" />
        <variable citdl="string" name="connect_error" />
        <variable citdl="int" name="errno" />
        <variable citdl="string" name="error" />
        <variable citdl="int" name="field_count" />
        <variable citdl="string" name="host_info" />
        <variable citdl="string" name="protocol_version" />
        <variable citdl="string" name="server_info" />
        <variable citdl="int" name="server_version" />
        <variable citdl="string" name="info" />
        <variable citdl="int" name="insert_id" />
        <variable citdl="string" name="sqlstate" />
        <variable citdl="int" name="warning_count" />
      </scope>
      <scope ilk="class" name="mysqli_stmt">
        <scope doc="Gets the current value of a statement attribute." ilk="function" name="attr_get" signature="attr_get ( int attr )" />
        <scope doc="Used to modify the behavior of a prepared statement. This function may be  called multiple times to set several attributes." ilk="function" name="attr_set" signature="attr_set ( int attr, int mode )" />
        <scope doc="Bind variables for the parameter markers in the SQL statement that was  passed to mysqli_prepare()." ilk="function" name="bind_param" signature="bind_param ( string types, mixed amp;$var1, mixed amp;$... )" />
        <scope doc="Binds columns in the result set to variables." ilk="function" name="bind_result" signature="bind_result ( mixed amp;$var1, mixed amp;$... )" />
        <scope doc="Closes a prepared statement. mysqli_stmt_close() also  deallocates the statement handle. If the current statement has pending or  unread results, this function cancels them so that the next query can be  executed." ilk="function" name="close" signature="close ( void )" />
        <scope doc="Seeks to an arbitrary result pointer in the statement result set." ilk="function" name="data_seek" signature="data_seek ( int offset )" />
        <scope doc="Executes a query that has been previously prepared using the  mysqli_prepare() function. When executed any  parameter markers which exist will automatically be replaced with the  appropiate data." ilk="function" name="execute" signature="execute ( void )" />
        <scope doc="Fetch the result from a prepared statement into the variables bound by  mysqli_stmt_bind_result()." ilk="function" name="fetch" signature="fetch ( void )" />
        <scope doc="Frees the result memory associated with the statement, which was allocated by  mysqli_stmt_store_result()." ilk="function" name="free_result" signature="free_result ( void )" />
        <scope doc="No documentation available." ilk="function" name="get_warnings" signature="get_warnings ( mysqli_stmt stmt, mysqli_stmt stmt )" />
        <scope doc="Returns the number of rows in the result set.  The use of mysqli_stmt_num_rows()  depends on whether or not you used  mysqli_stmt_store_result() to buffer the entire result  set in the statement handle." ilk="function" name="num_rows" signature="num_rows ( void )" />
        <scope doc="Procedure style:" ilk="function" name="prepare" signature="prepare ( string query, mysqli_stmt stmt, string query )" />
        <scope doc="Resets a prepared statement on client and server to state after prepare." ilk="function" name="reset" signature="reset ( void )" />
        <scope doc="If a statement passed to mysqli_prepare() is one that produces  a result set, mysqli_stmt_result_metadata() returns the result object  that can be used to process the meta information such as total number of fields  and individual field information." ilk="function" name="result_metadata" signature="result_metadata ( void )" />
        <scope doc="Allows to send parameter data to the server in pieces (or chunks), e.g. if the  size of a blob exceeds the size of max_allowed_packet.  This function can be called multiple times to send the parts of a character or  binary data value for a column, which must be one of the TEXT or BLOB datatypes." ilk="function" name="send_long_data" signature="send_long_data ( int param_nr, string data )" />
        <scope doc="You must call mysqli_stmt_store_result() for every query that  successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN),  and only if you want to buffer the complete result set by the client,  so that the subsequent mysqli_stmt_fetch() call returns buffered data." ilk="function" name="store_result" signature="store_result ( void )" />
        <variable citdl="int" name="affected_rows" />
        <variable citdl="int" name="errno" />
        <variable citdl="string" name="error" />
        <variable citdl="int" name="field_count" />
        <variable citdl="int" name="insert_id" />
        <variable citdl="int" name="num_rows" />
        <variable citdl="int" name="param_count" />
        <variable citdl="string" name="sqlstate" />
      </scope>
      <scope ilk="class" name="mysqli_driver">
        <scope doc="No documentation available." ilk="function" name="embedded_server_end" signature="embedded_server_end ( void )" />
        <scope doc="No documentation available." ilk="function" name="embedded_server_start" signature="embedded_server_start ( bool start, array arguments, array groups, bool start, array arguments, array groups )" />
      </scope>
      <scope ilk="function" name="chown" signature="chown( filename, user )" />
      <scope doc="Determine whether a variable is set" ilk="function" name="isset" signature="bool isset ( mixed var [, mixed var [, ...]] )" />
      <scope doc="Determine whether a variable is considered to be empty." ilk="function" name="empty" signature="bool empty ( mixed $var )" />
      <scope doc="unset() destroys the specified variables." ilk="function" name="unset" signature="void unset ( mixed $var [, mixed $var [, mixed $...]] )" />
      <scope ilk="function" name="lchown" signature="lchown( filename, user )" />
      <scope doc="Directory class with properties handle and class and&#xA;methods read rewind and close" ilk="function" name="dir" returns="object" signature="dir(string directory[, resource context])" src="dir.c" />
      <scope doc="force an xdebug breakpoint here." ilk="function" name="xdebug_break" signature="xdebug_break()" />
      <scope doc="Returns the sum of two arbitrary precision numbers" ilk="function" name="bcadd" returns="string" signature="bcadd(string left_operand, string right_operand [, int scale])" src="bcmath.c" />
      <scope doc="Returns the difference between two arbitrary precision&#xA;numbers" ilk="function" name="bcsub" returns="string" signature="bcsub(string left_operand, string right_operand [, int scale])" src="bcmath.c" />
      <scope doc="Returns the multiplication of two arbitrary precision&#xA;numbers" ilk="function" name="bcmul" returns="string" signature="bcmul(string left_operand, string right_operand [, int scale])" src="bcmath.c" />
      <scope doc="Returns the quotient of two arbitrary precision numbers&#xA;division" ilk="function" name="bcdiv" returns="string" signature="bcdiv(string left_operand, string right_operand [, int scale])" src="bcmath.c" />
      <scope doc="Returns the modulus of the two arbitrary precision&#xA;operands" ilk="function" name="bcmod" returns="string" signature="bcmod(string left_operand, string right_operand)" src="bcmath.c" />
      <scope doc="Returns the value of an arbitrary precision number&#xA;raised to the power of another reduced by a modulous" ilk="function" name="bcpowmod" returns="string" signature="bcpowmod(string x, string y, string mod [, int scale])" src="bcmath.c" />
      <scope doc="Returns the value of an arbitrary precision number&#xA;raised to the power of another" ilk="function" name="bcpow" returns="string" signature="bcpow(string x, string y [, int scale])" src="bcmath.c" />
      <scope doc="Returns the square root of an arbitray precision number" ilk="function" name="bcsqrt" returns="string" signature="bcsqrt(string operand [, int scale])" src="bcmath.c" />
      <scope doc="Compares two arbitrary precision numbers" ilk="function" name="bccomp" returns="int" signature="bccomp(string left_operand, string right_operand [, int scale])" src="bcmath.c" />
      <scope doc="Sets default scale parameter for all bc math functions" ilk="function" name="bcscale" returns="bool" signature="bcscale(int scale)" src="bcmath.c" />
      <scope doc="Reads up to length bytes from a BZip stream or bytes if&#xA;length is not specified" ilk="function" name="bzread" returns="string" signature="bzread(resource bz[, int length])" src="bz2.c" />
      <scope doc="Opens a new BZip stream" ilk="function" name="bzopen" returns="resource" signature="bzopen(string" src="bz2.c" />
      <scope doc="Returns the error number" ilk="function" name="bzerrno" returns="int" signature="bzerrno(resource bz)" src="bz2.c" />
      <scope doc="Returns the error string" ilk="function" name="bzerrstr" returns="string" signature="bzerrstr(resource bz)" src="bz2.c" />
      <scope doc="Returns the error number and error string in an&#xA;associative array" ilk="function" name="bzerror" returns="array" signature="bzerror(resource bz)" src="bz2.c" />
      <scope doc="Compresses a string into BZip encoded data" ilk="function" name="bzcompress" returns="string" signature="bzcompress(string source [, int blocksize100k [, int workfactor]])" src="bz2.c" />
      <scope doc="Decompresses BZip compressed data" ilk="function" name="bzdecompress" returns="string" signature="bzdecompress(string source [, int small])" src="bz2.c" />
      <scope doc="Convert UNIX timestamp to Julian Day" ilk="function" name="unixtojd" returns="int" signature="unixtojd([int timestamp])" src="cal_unix.c" />
      <scope doc="Convert Julian Day to UNIX timestamp" ilk="function" name="jdtounix" returns="int" signature="jdtounix(int jday)" src="cal_unix.c" />
      <scope doc="Returns information about a particular calendar" ilk="function" name="cal_info" returns="array" signature="cal_info([int calendar])" src="calendar.c" />
      <scope doc="Returns the number of days in a month for a given year&#xA;and calendar" ilk="function" name="cal_days_in_month" returns="int" signature="cal_days_in_month(int calendar, int month, int year)" src="calendar.c" />
      <scope doc="Converts from a supported calendar to Julian Day Count" ilk="function" name="cal_to_jd" returns="int" signature="cal_to_jd(int calendar, int month, int day, int year)" src="calendar.c" />
      <scope doc="Converts from Julian Day Count to a supported calendar&#xA;and return extended information" ilk="function" name="cal_from_jd" returns="array" signature="cal_from_jd(int jd, int calendar)" src="calendar.c" />
      <scope doc="Converts a julian day count to a gregorian calendar&#xA;date" ilk="function" name="jdtogregorian" returns="string" signature="jdtogregorian(int juliandaycount)" src="calendar.c" />
      <scope doc="Converts a gregorian calendar date to julian day count" ilk="function" name="gregoriantojd" returns="int" signature="gregoriantojd(int month, int day, int year)" src="calendar.c" />
      <scope doc="Convert a julian day count to a julian calendar date" ilk="function" name="jdtojulian" returns="string" signature="jdtojulian(int juliandaycount)" src="calendar.c" />
      <scope doc="Converts a julian calendar date to julian day count" ilk="function" name="juliantojd" returns="int" signature="juliantojd(int month, int day, int year)" src="calendar.c" />
      <scope doc="Converts a julian day count to a jewish calendar date" ilk="function" name="jdtojewish" returns="string" signature="jdtojewish(int juliandaycount [, bool hebrew [, int fl]])" src="calendar.c" />
      <scope doc="Converts a jewish calendar date to a julian day count" ilk="function" name="jewishtojd" returns="int" signature="jewishtojd(int month, int day, int year)" src="calendar.c" />
      <scope doc="Converts a julian day count to a french republic&#xA;calendar date" ilk="function" name="jdtofrench" returns="string" signature="jdtofrench(int juliandaycount)" src="calendar.c" />
      <scope doc="Converts a french republic calendar date to julian day&#xA;count" ilk="function" name="frenchtojd" returns="int" signature="frenchtojd(int month, int day, int year)" src="calendar.c" />
      <scope doc="Returns name or number of day of week from julian day&#xA;count" ilk="function" name="jddayofweek" returns="mixed" signature="jddayofweek(int juliandaycount [, int mode])" src="calendar.c" />
      <scope doc="Returns name of month for julian day count" ilk="function" name="jdmonthname" returns="string" signature="jdmonthname(int juliandaycount, int mode)" src="calendar.c" />
      <scope doc="Return the timestamp of midnight on Easter of a given&#xA;year defaults to current year" ilk="function" name="easter_date" returns="int" signature="easter_date([int year])" src="easter.c" />
      <scope doc="Return the number of days after March that Easter falls&#xA;on for a given year defaults to current year" ilk="function" name="easter_days" returns="int" signature="easter_days([int year, [int method]])" src="easter.c" />
      <scope doc="Returns a handle to an already running instance of a&#xA;COM object" ilk="function" name="com_get_active_object" returns="object" signature="com_get_active_object(string progid [, int code_page ])" src="com_com.c" />
      <scope doc="Generate a globally unique identifier GUID" ilk="function" name="com_create_guid" returns="string" signature="com_create_guid()" src="com_com.c" />
      <scope doc="Connect events from a COM object to a PHP object" ilk="function" name="com_event_sink" returns="bool" signature="com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])" src="com_com.c" />
      <scope doc="Print out a PHP class definition for a dispatchable&#xA;interface" ilk="function" name="com_print_typeinfo" returns="bool" signature="com_print_typeinfo(object comobject" src="com_com.c" />
      <scope doc="Process COM messages sleeping for up to timeoutms&#xA;milliseconds" ilk="function" name="com_message_pump" returns="bool" signature="com_message_pump([int timeoutms])" src="com_com.c" />
      <scope doc="Loads a Typelibrary and registers its constants" ilk="function" name="com_load_typelib" returns="bool" signature="com_load_typelib(string typelib_name [, int case_insensitive])" src="com_com.c" />
      <scope doc="Assigns a new value for a variant object" ilk="function" name="variant_set" returns="void" signature="variant_set(object variant, mixed value)" src="com_variant.c" />
      <scope doc="Adds two variant values together and returns the result" ilk="function" name="variant_add" returns="mixed" signature="variant_add(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="concatenates two variant values together and returns&#xA;the result" ilk="function" name="variant_cat" returns="mixed" signature="variant_cat(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="subtracts the value of the right variant from the left&#xA;variant value and returns the result" ilk="function" name="variant_sub" returns="mixed" signature="variant_sub(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="multiplies the values of the two variants and returns&#xA;the result" ilk="function" name="variant_mul" returns="mixed" signature="variant_mul(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="performs a bitwise AND operation between two variants&#xA;and returns the result" ilk="function" name="variant_and" returns="mixed" signature="variant_and(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Returns the result from dividing two variants" ilk="function" name="variant_div" returns="mixed" signature="variant_div(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Performs a bitwise equivalence on two variants" ilk="function" name="variant_eqv" returns="mixed" signature="variant_eqv(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Converts variants to integers and then returns the&#xA;result from dividing them" ilk="function" name="variant_idiv" returns="mixed" signature="variant_idiv(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Performs a bitwise implication on two variants" ilk="function" name="variant_imp" returns="mixed" signature="variant_imp(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Divides two variants and returns only the remainder" ilk="function" name="variant_mod" returns="mixed" signature="variant_mod(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Performs a logical disjunction on two variants" ilk="function" name="variant_or" returns="mixed" signature="variant_or(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Returns the result of performing the power function&#xA;with two variants" ilk="function" name="variant_pow" returns="mixed" signature="variant_pow(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Performs a logical exclusion on two variants" ilk="function" name="variant_xor" returns="mixed" signature="variant_xor(mixed left, mixed right)" src="com_variant.c" />
      <scope doc="Returns the absolute value of a variant" ilk="function" name="variant_abs" returns="mixed" signature="variant_abs(mixed left)" src="com_variant.c" />
      <scope doc="Returns the integer part of a variant" ilk="function" name="variant_fix" returns="mixed" signature="variant_fix(mixed left)" src="com_variant.c" />
      <scope doc="Returns the integer portion of a variant" ilk="function" name="variant_int" returns="mixed" signature="variant_int(mixed left)" src="com_variant.c" />
      <scope doc="Performs logical negation on a variant" ilk="function" name="variant_neg" returns="mixed" signature="variant_neg(mixed left)" src="com_variant.c" />
      <scope doc="Performs bitwise not negation on a variant" ilk="function" name="variant_not" returns="mixed" signature="variant_not(mixed left)" src="com_variant.c" />
      <scope doc="Rounds a variant to the specified number of decimal&#xA;places" ilk="function" name="variant_round" returns="mixed" signature="variant_round(mixed left, int decimals)" src="com_variant.c" />
      <scope doc="Compares two variants" ilk="function" name="variant_cmp" returns="int" signature="variant_cmp(mixed left, mixed right [, int lcid [, int flags]])" src="com_variant.c" />
      <scope doc="Converts a variant date time value to unix timestamp" ilk="function" name="variant_date_to_timestamp" returns="int" signature="variant_date_to_timestamp(object variant)" src="com_variant.c" />
      <scope doc="Returns a variant date representation of a unix&#xA;timestamp" ilk="function" name="variant_date_from_timestamp" returns="object" signature="variant_date_from_timestamp(int timestamp)" src="com_variant.c" />
      <scope doc="Returns the VT XXX type code for a variant" ilk="function" name="variant_get_type" returns="int" signature="variant_get_type(object variant)" src="com_variant.c" />
      <scope doc="Convert a variant into another type Variant is modified&#xA;in-place" ilk="function" name="variant_set_type" returns="void" signature="variant_set_type(object variant, int type)" src="com_variant.c" />
      <scope doc="Convert a variant into a new variant object of another&#xA;type" ilk="function" name="variant_cast" returns="object" signature="variant_cast(object variant, int type)" src="com_variant.c" />
      <scope doc="Checks for alphanumeric character s" ilk="function" name="ctype_alnum" returns="bool" signature="ctype_alnum(mixed c)" src="ctype.c" />
      <scope doc="Checks for alphabetic character s" ilk="function" name="ctype_alpha" returns="bool" signature="ctype_alpha(mixed c)" src="ctype.c" />
      <scope doc="Checks for control character s" ilk="function" name="ctype_cntrl" returns="bool" signature="ctype_cntrl(mixed c)" src="ctype.c" />
      <scope doc="Checks for numeric character s" ilk="function" name="ctype_digit" returns="bool" signature="ctype_digit(mixed c)" src="ctype.c" />
      <scope doc="Checks for lowercase character s" ilk="function" name="ctype_lower" returns="bool" signature="ctype_lower(mixed c)" src="ctype.c" />
      <scope doc="Checks for any printable character s except space" ilk="function" name="ctype_graph" returns="bool" signature="ctype_graph(mixed c)" src="ctype.c" />
      <scope doc="Checks for printable character s" ilk="function" name="ctype_print" returns="bool" signature="ctype_print(mixed c)" src="ctype.c" />
      <scope doc="Checks for any printable character which is not&#xA;whitespace or an alphanumeric character" ilk="function" name="ctype_punct" returns="bool" signature="ctype_punct(mixed c)" src="ctype.c" />
      <scope doc="Checks for whitespace character s" ilk="function" name="ctype_space" returns="bool" signature="ctype_space(mixed c)" src="ctype.c" />
      <scope doc="Checks for uppercase character s" ilk="function" name="ctype_upper" returns="bool" signature="ctype_upper(mixed c)" src="ctype.c" />
      <scope doc="Checks for character s representing a hexadecimal digit" ilk="function" name="ctype_xdigit" returns="bool" signature="ctype_xdigit(mixed c)" src="ctype.c" />
      <scope doc="Return cURL version information" ilk="function" name="curl_version" returns="array" signature="curl_version([int version])" src="interface.c" />
      <scope doc="Initialize a cURL session" ilk="function" name="curl_init" returns="resource" signature="curl_init([string url])" src="interface.c" />
      <scope doc="Copy a cURL handle along with all of it&apos;s preferences" ilk="function" name="curl_copy_handle" returns="resource" signature="curl_copy_handle(resource ch)" src="interface.c" />
      <scope doc="Set an option for a cURL transfer" ilk="function" name="curl_setopt" returns="bool" signature="curl_setopt(resource ch, int option, mixed value)" src="interface.c" />
      <scope doc="Set an array of option for a cURL transfer" ilk="function" name="curl_setopt_array" returns="bool" signature="curl_setopt_array(resource ch, array options)" src="interface.c" />
      <scope doc="Perform a cURL session" ilk="function" name="curl_exec" returns="bool" signature="curl_exec(resource ch)" src="interface.c" />
      <scope doc="Get information regarding a specific transfer" ilk="function" name="curl_getinfo" returns="mixed" signature="curl_getinfo(resource ch [, int option])" src="interface.c" />
      <scope doc="Return a string contain the last error for the current&#xA;session" ilk="function" name="curl_error" returns="string" signature="curl_error(resource ch)" src="interface.c" />
      <scope doc="Return an integer containing the last error number" ilk="function" name="curl_errno" returns="int" signature="curl_errno(resource ch)" src="interface.c" />
      <scope doc="Close a cURL session" ilk="function" name="curl_close" returns="void" signature="curl_close(resource ch)" src="interface.c" />
      <scope doc="Returns a new cURL multi handle" ilk="function" name="curl_multi_init" returns="resource" signature="curl_multi_init(void)" src="multi.c" />
      <scope doc="Add a normal cURL handle to a cURL multi handle" ilk="function" name="curl_multi_add_handle" returns="int" signature="curl_multi_add_handle(resource mh, resource ch)" src="multi.c" />
      <scope doc="Remove a multi handle from a set of cURL handles" ilk="function" name="curl_multi_remove_handle" returns="int" signature="curl_multi_remove_handle(resource mh, resource ch)" src="multi.c" />
      <scope doc="Get all the sockets associated with the cURL extension&#xA;which can then be selected" ilk="function" name="curl_multi_select" returns="int" signature="curl_multi_select(resource mh[, double timeout])" src="multi.c" />
      <scope doc="Run the sub-connections of the current cURL handle" ilk="function" name="curl_multi_exec" returns="int" signature="curl_multi_exec(resource mh, int &amp;still_running)" src="multi.c" />
      <scope doc="Return the content of a cURL handle if CURLOPT&#xA;RETURNTRANSFER is set" ilk="function" name="curl_multi_getcontent" returns="string" signature="curl_multi_getcontent(resource ch)" src="multi.c" />
      <scope doc="Get information about the current transfers" ilk="function" name="curl_multi_info_read" returns="array" signature="curl_multi_info_read(resource mh [, long msgs_in_queue])" src="multi.c" />
      <scope doc="Close a set of cURL handles" ilk="function" name="curl_multi_close" returns="void" signature="curl_multi_close(resource mh)" src="multi.c" />
      <scope doc="Format a local date time" ilk="function" name="date" returns="string" signature="date(string format [, long timestamp])" src="php_date.c" />
      <scope doc="Format a GMT date time" ilk="function" name="gmdate" returns="string" signature="gmdate(string format [, long timestamp])" src="php_date.c" />
      <scope doc="Format a local time date as integer" ilk="function" name="idate" returns="int" signature="idate(string format [, int timestamp])" src="php_date.c" />
      <scope doc="Convert string representation of date and time to a&#xA;timestamp" ilk="function" name="strtotime" returns="int" signature="strtotime(string time [, int now ])" src="php_date.c" />
      <scope doc="Get UNIX timestamp for a date" ilk="function" name="mktime" returns="int" signature="mktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" src="php_date.c" />
      <scope doc="Get UNIX timestamp for a GMT date" ilk="function" name="gmmktime" returns="int" signature="gmmktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" src="php_date.c" />
      <scope doc="Returns true if it is a valid date in gregorian&#xA;calendar" ilk="function" name="checkdate" returns="bool" signature="checkdate(int month, int day, int year)" src="php_date.c" />
      <scope doc="Format a local time date according to locale settings" ilk="function" name="strftime" returns="string" signature="strftime(string format [, int timestamp])" src="php_date.c" />
      <scope doc="Format a GMT UCT time date according to locale settings" ilk="function" name="gmstrftime" returns="string" signature="gmstrftime(string format [, int timestamp])" src="php_date.c" />
      <scope doc="Return current UNIX timestamp" ilk="function" name="time" returns="int" signature="time(void)" src="php_date.c" />
      <scope doc="Returns the results of the C system call localtime as&#xA;an associative array if the associative array argument&#xA;is set" ilk="function" name="localtime" returns="array" signature="localtime([int timestamp [, bool associative_array]])" src="php_date.c" />
      <scope doc="Get date time information" ilk="function" name="getdate" returns="array" signature="getdate([int timestamp])" src="php_date.c" />
      <scope doc="Returns new DateTime object" ilk="function" name="date_create" returns="DateTime" signature="date_create([string time[, DateTimeZone object]])" src="php_date.c" />
      <scope doc="Returns associative array with detailed info about&#xA;given date" ilk="function" name="date_parse" returns="array" signature="date_parse(string date)" src="php_date.c" />
      <scope doc="Returns date formatted according to given format" ilk="function" name="date_format" returns="string" signature="date_format(DateTime object, string format)" src="php_date.c" />
      <scope doc="Alters the timestamp" ilk="function" name="date_modify" returns="void" signature="date_modify(DateTime object, string modify)" src="php_date.c" />
      <scope doc="Return new DateTimeZone object relative to give&#xA;DateTime" ilk="function" name="date_timezone_get" returns="DateTimeZone" signature="date_timezone_get(DateTime object)" src="php_date.c" />
      <scope doc="Sets the timezone for the DateTime object" ilk="function" name="date_timezone_set" returns="void" signature="date_timezone_set(DateTime object, DateTimeZone object)" src="php_date.c" />
      <scope doc="Returns the DST offset" ilk="function" name="date_offset_get" returns="long" signature="date_offset_get(DateTime object)" src="php_date.c" />
      <scope doc="Sets the time" ilk="function" name="date_time_set" returns="void" signature="date_time_set(DateTime object, long hour, long minute[, long second])" src="php_date.c" />
      <scope doc="Sets the date" ilk="function" name="date_date_set" returns="void" signature="date_date_set(DateTime object, long year, long month, long day)" src="php_date.c" />
      <scope doc="Sets the ISO date" ilk="function" name="date_isodate_set" returns="void" signature="date_isodate_set(DateTime object, long year, long week[, long day])" src="php_date.c" />
      <scope doc="Returns new DateTimeZone object" ilk="function" name="timezone_open" returns="DateTimeZone" signature="timezone_open(string timezone)" src="php_date.c" />
      <scope doc="Returns the name of the timezone" ilk="function" name="timezone_name_get" returns="string" signature="timezone_name_get(DateTimeZone object)" src="php_date.c" />
      <scope doc="Returns the timezone name from abbrevation" ilk="function" name="timezone_name_from_abbr" returns="string" signature="timezone_name_from_abbr(string abbr[, long gmtOffset[, long isdst]])" src="php_date.c" />
      <scope doc="Returns the timezone offset" ilk="function" name="timezone_offset_get" returns="long" signature="timezone_offset_get(DateTimeZone object, DateTime object)" src="php_date.c" />
      <scope doc="Returns numeracilly indexed array containing&#xA;associative array for all transitions for the timezone" ilk="function" name="timezone_transitions_get" returns="array" signature="timezone_transitions_get(DateTimeZone object)" src="php_date.c" />
      <scope doc="Returns numerically index array with all timezone&#xA;identifiers" ilk="function" name="timezone_identifiers_list" returns="array" signature="timezone_identifiers_list()" src="php_date.c" />
      <scope doc="Returns associative array containing dst offset and the&#xA;timezone name" ilk="function" name="timezone_abbreviations_list" returns="array" signature="timezone_abbreviations_list()" src="php_date.c" />
      <scope doc="Sets the default timezone used by all date time&#xA;functions in a script" ilk="function" name="date_default_timezone_set" returns="bool" signature="date_default_timezone_set(string timezone_identifier)" src="php_date.c" />
      <scope doc="Gets the default timezone used by all date time&#xA;functions in a script" ilk="function" name="date_default_timezone_get" returns="string" signature="date_default_timezone_get()" src="php_date.c" />
      <scope doc="Returns time of sunrise for a given day and location" ilk="function" name="date_sunrise" returns="mixed" signature="date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" src="php_date.c" />
      <scope doc="Returns time of sunset for a given day and location" ilk="function" name="date_sunset" returns="mixed" signature="date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" src="php_date.c" />
      <scope doc="Returns an array with information about sun set rise&#xA;and twilight begin end" ilk="function" name="date_sun_info" returns="array" signature="date_sun_info(long time, float latitude, float longitude)" src="php_date.c" />
      <scope doc="Opens path using the specified handler in mode&#xA;persistently" ilk="function" name="dba_popen" returns="resource" signature="dba_popen(string path, string mode [, string handlername, string ...])" src="dba.c" />
      <scope doc="Opens path using the specified handler in mode" ilk="function" name="dba_open" returns="resource" signature="dba_open(string path, string mode [, string handlername, string ...])" src="dba.c" />
      <scope doc="Closes database" ilk="function" name="dba_close" returns="void" signature="dba_close(resource handle)" src="dba.c" />
      <scope doc="Checks if the specified key exists" ilk="function" name="dba_exists" returns="bool" signature="dba_exists(string key, resource handle)" src="dba.c" />
      <scope doc="Fetches the data associated with key" ilk="function" name="dba_fetch" returns="string" signature="dba_fetch(string key, [int skip ,] resource handle)" src="dba.c" />
      <scope doc="Splits an inifile key into an array of the form array&#xA;group value name but returns false if input is" ilk="function" name="dba_key_split" returns="false" signature="dba_key_split(string key)" src="dba.c" />
      <scope doc="Resets the internal key pointer and returns the first&#xA;key" ilk="function" name="dba_firstkey" returns="string" signature="dba_firstkey(resource handle)" src="dba.c" />
      <scope doc="Returns the next key" ilk="function" name="dba_nextkey" returns="string" signature="dba_nextkey(resource handle)" src="dba.c" />
      <scope doc="Deletes the entry associated with key If inifile remove&#xA;all other key lines" ilk="function" name="dba_delete" returns="bool" signature="dba_delete(string key, resource handle)" src="dba.c" />
      <scope doc="If not inifile Insert value as key return false if key&#xA;exists already If inifile Add vakue as key next" ilk="function" name="dba_insert" returns="bool" signature="dba_insert(string key, string value, resource handle)" src="dba.c" />
      <scope doc="Inserts value as key replaces key if key exists already&#xA;If inifile remove all other key lines" ilk="function" name="dba_replace" returns="bool" signature="dba_replace(string key, string value, resource handle)" src="dba.c" />
      <scope doc="Optimizes e g clean up vacuum database" ilk="function" name="dba_optimize" returns="bool" signature="dba_optimize(resource handle)" src="dba.c" />
      <scope doc="Synchronizes database" ilk="function" name="dba_sync" returns="bool" signature="dba_sync(resource handle)" src="dba.c" />
      <scope doc="List configured database handlers" ilk="function" name="dba_handlers" returns="array" signature="dba_handlers([bool full_info])" src="dba.c" />
      <scope doc="List opened databases" ilk="function" name="dba_list" returns="array" signature="dba_list()" src="dba.c" />
      <scope doc="Opens a dBase-format database file" ilk="function" name="dbase_open" returns="int" signature="dbase_open(string name, int mode)" src="dbase.c" />
      <scope doc="Closes an open dBase-format database file" ilk="function" name="dbase_close" returns="bool" signature="dbase_close(int identifier)" src="dbase.c" />
      <scope doc="Returns the number of records in the database" ilk="function" name="dbase_numrecords" returns="int" signature="dbase_numrecords(int identifier)" src="dbase.c" />
      <scope doc="Returns the number of fields columns in the database" ilk="function" name="dbase_numfields" returns="int" signature="dbase_numfields(int identifier)" src="dbase.c" />
      <scope doc="Packs the database deletes records marked for deletion" ilk="function" name="dbase_pack" returns="bool" signature="dbase_pack(int identifier)" src="dbase.c" />
      <scope doc="Adds a record to the database" ilk="function" name="dbase_add_record" returns="bool" signature="dbase_add_record(int identifier, array data)" src="dbase.c" />
      <scope doc="Replaces a record to the database" ilk="function" name="dbase_replace_record" returns="bool" signature="dbase_replace_record(int identifier, array data, int recnum)" src="dbase.c" />
      <scope doc="Marks a record to be deleted" ilk="function" name="dbase_delete_record" returns="bool" signature="dbase_delete_record(int identifier, int record)" src="dbase.c" />
      <scope doc="Returns an array representing a record from the&#xA;database" ilk="function" name="dbase_get_record" returns="array" signature="dbase_get_record(int identifier, int record)" src="dbase.c" />
      <scope doc="Returns an associative array representing a record from&#xA;the database" ilk="function" name="dbase_get_record_with_names" returns="array" signature="dbase_get_record_with_names(int identifier, int record)" src="dbase.c" />
      <scope doc="Creates a new dBase-format database file" ilk="function" name="dbase_create" returns="bool" signature="dbase_create(string filename, array fields)" src="dbase.c" />
      <scope doc="" ilk="function" name="dbase_get_header_info" returns="array" signature="dbase_get_header_info(int database_handle)" src="dbase.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Attr-isId Since DOM Level" ilk="function" name="dom_attr_is_id" returns="boolean" signature="dom_attr_is_id()" src="attr.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- BCCF Since" ilk="function" name="dom_characterdata_substring_data" returns="string" signature="dom_characterdata_substring_data(int offset, int count)" src="characterdata.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- A F Since" ilk="function" name="dom_characterdata_append_data" returns="void" signature="dom_characterdata_append_data(string arg)" src="characterdata.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- EDB F Since" ilk="function" name="dom_characterdata_insert_data" returns="void" signature="dom_characterdata_insert_data(int offset, string arg)" src="characterdata.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- C Since" ilk="function" name="dom_characterdata_delete_data" returns="void" signature="dom_characterdata_delete_data(int offset, int count)" src="characterdata.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-E CBA FB Since" ilk="function" name="dom_characterdata_replace_data" returns="void" signature="dom_characterdata_replace_data(int offset, int count, string arg)" src="characterdata.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_document_create_element" returns="DOMElement" signature="dom_document_create_element(string tagName [, string value])" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- CB B Since" ilk="function" name="dom_document_create_document_fragment" returns="DOMDocumentFragment" signature="dom_document_create_document_fragment()" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_document_create_text_node" returns="DOMText" signature="dom_document_create_text_node(string data)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_document_create_comment" returns="DOMComment" signature="dom_document_create_comment(string data)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-D C AF Since" ilk="function" name="dom_document_create_cdatasection" returns="DOMCdataSection" signature="dom_document_create_cdatasection(string data)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_document_create_processing_instruction" returns="DOMProcessingInstruction" signature="dom_document_create_processing_instruction(string target, string data)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_document_create_attribute" returns="DOMAttr" signature="dom_document_create_attribute(string name)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- B AE Since" ilk="function" name="dom_document_create_entity_reference" returns="DOMEntityReference" signature="dom_document_create_entity_reference(string name)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-A C Since" ilk="function" name="dom_document_get_elements_by_tag_name" returns="DOMNodeList" signature="dom_document_get_elements_by_tag_name(string tagname)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Core-Document-importNode Since DOM Level" ilk="function" name="dom_document_import_node" returns="DOMNode" signature="dom_document_import_node(DOMNode importedNode, boolean deep)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-DocCrElNS Since DOM Level" ilk="function" name="dom_document_create_element_ns" returns="DOMElement" signature="dom_document_create_element_ns(string namespaceURI, string qualifiedName [,string value])" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-DocCrAttrNS Since DOM Level" ilk="function" name="dom_document_create_attribute_ns" returns="DOMAttr" signature="dom_document_create_attribute_ns(string namespaceURI, string qualifiedName)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-getElBTNNS Since DOM Level" ilk="function" name="dom_document_get_elements_by_tag_name_ns" returns="DOMNodeList" signature="dom_document_get_elements_by_tag_name_ns(string namespaceURI, string localName)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-getElBId Since DOM Level" ilk="function" name="dom_document_get_element_by_id" returns="DOMElement" signature="dom_document_get_element_by_id(string elementId)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Document -adoptNode Since DOM Level" ilk="function" name="dom_document_adopt_node" returns="DOMNode" signature="dom_document_adopt_node(DOMNode source)" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Document -normalizeDocument Since DOM Level" ilk="function" name="dom_document_normalize_document" returns="void" signature="dom_document_normalize_document()" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Document -renameNode Since DOM Level" ilk="function" name="dom_document_rename_node" returns="DOMNode" signature="dom_document_rename_node(node n, string namespaceURI, string qualifiedName)" src="document.c" />
      <scope doc="URL http www w org TR DOM-Level- -LS load-save html&#xA;LS-DocumentLS-load Since DOM Level" ilk="function" name="dom_document_load" returns="DOMNode" signature="dom_document_load(string source [, int options])" src="document.c" />
      <scope doc="URL http www w org TR DOM-Level- -LS load-save html&#xA;LS-DocumentLS-loadXML Since DOM Level" ilk="function" name="dom_document_loadxml" returns="DOMNode" signature="dom_document_loadxml(string source [, int options])" src="document.c" />
      <scope doc="Convenience method to save to file" ilk="function" name="dom_document_save" returns="int" signature="dom_document_save(string file)" src="document.c" />
      <scope doc="URL http www w org TR DOM-Level- -LS load-save html&#xA;LS-DocumentLS-saveXML Since DOM Level" ilk="function" name="dom_document_savexml" returns="string" signature="dom_document_savexml([node n])" src="document.c" />
      <scope doc="Substitutues xincludes in a DomDocument" ilk="function" name="dom_document_xinclude" returns="int" signature="dom_document_xinclude([int options])" src="document.c" />
      <scope doc="Since DOM extended" ilk="function" name="dom_document_validate" returns="boolean" signature="dom_document_validate()" src="document.c" />
      <scope doc="" ilk="function" name="dom_document_schema_validate_file" returns="boolean" signature="dom_document_schema_validate_file(string filename)" src="document.c" />
      <scope doc="" ilk="function" name="dom_document_schema_validate" returns="boolean" signature="dom_document_schema_validate(string source)" src="document.c" />
      <scope doc="" ilk="function" name="dom_document_relaxNG_validate_file" returns="boolean" signature="dom_document_relaxNG_validate_file(string filename)" src="document.c" />
      <scope doc="" ilk="function" name="dom_document_relaxNG_validate_xml" returns="boolean" signature="dom_document_relaxNG_validate_xml(string source)" src="document.c" />
      <scope doc="Since DOM extended" ilk="function" name="dom_document_load_html_file" returns="DOMNode" signature="dom_document_load_html_file(string source)" src="document.c" />
      <scope doc="Since DOM extended" ilk="function" name="dom_document_load_html" returns="DOMNode" signature="dom_document_load_html(string source)" src="document.c" />
      <scope doc="Convenience method to save to file as html" ilk="function" name="dom_document_save_html_file" returns="int" signature="dom_document_save_html_file(string file)" src="document.c" />
      <scope doc="Convenience method to output as html" ilk="function" name="dom_document_save_html" returns="string" signature="dom_document_save_html()" src="document.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMConfiguration-property Since" ilk="function" name="dom_domconfiguration_set_parameter" returns="dom_void" signature="dom_domconfiguration_set_parameter(string name, domuserdata value)" src="domconfiguration.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMConfiguration-getParameter Since" ilk="function" name="dom_domconfiguration_get_parameter" returns="domdomuserdata" signature="dom_domconfiguration_get_parameter(string name)" src="domconfiguration.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMConfiguration-canSetParameter Since" ilk="function" name="dom_domconfiguration_can_set_parameter" returns="boolean" signature="dom_domconfiguration_can_set_parameter(string name, domuserdata value)" src="domconfiguration.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID-ERRORS-DOMErrorHandler-handleError Since" ilk="function" name="dom_domerrorhandler_handle_error" returns="dom_boolean" signature="dom_domerrorhandler_handle_error(domerror error)" src="domerrorhandler.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID- CED D Since" ilk="function" name="dom_domimplementation_has_feature" returns="boolean" signature="dom_domimplementation_has_feature(string feature, string version)" src="domimplementation.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Level- -Core-DOM-createDocType Since DOM Level" ilk="function" name="dom_domimplementation_create_document_type" returns="DOMDocumentType" signature="dom_domimplementation_create_document_type(string qualifiedName, string publicId, string systemId)" src="domimplementation.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Level- -Core-DOM-createDocument Since DOM Level" ilk="function" name="dom_domimplementation_create_document" returns="DOMDocument" signature="dom_domimplementation_create_document(string namespaceURI, string qualifiedName, DOMDocumentType doctype)" src="domimplementation.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMImplementation -getFeature Since DOM Level" ilk="function" name="dom_domimplementation_get_feature" returns="DOMNode" signature="dom_domimplementation_get_feature(string feature, string version)" src="domimplementation.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMImplementationList-item Since" ilk="function" name="dom_domimplementationlist_item" returns="domdomimplementation" signature="dom_domimplementationlist_item(int index)" src="domimplementationlist.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID-getDOMImpl Since" ilk="function" name="dom_domimplementationsource_get_domimplementation" returns="domdomimplementation" signature="dom_domimplementationsource_get_domimplementation(string features)" src="domimplementationsource.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID-getDOMImpls Since" ilk="function" name="dom_domimplementationsource_get_domimplementations" returns="domimplementationlist" signature="dom_domimplementationsource_get_domimplementations(string features)" src="domimplementationsource.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html DOMStringList-item Since" ilk="function" name="dom_domstringlist_item" returns="domstring" signature="dom_domstringlist_item(int index)" src="domstringlist.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- EE F Since" ilk="function" name="dom_element_get_attribute" returns="string" signature="dom_element_get_attribute(string name)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-F F Since" ilk="function" name="dom_element_set_attribute" returns="void" signature="dom_element_set_attribute(string name, string value)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- D AC F Since" ilk="function" name="dom_element_remove_attribute" returns="void" signature="dom_element_remove_attribute(string name)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- A B Since" ilk="function" name="dom_element_get_attribute_node" returns="DOMAttr" signature="dom_element_get_attribute_node(string name)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_element_set_attribute_node" returns="DOMAttr" signature="dom_element_set_attribute_node(DOMAttr newAttr)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-D Since" ilk="function" name="dom_element_remove_attribute_node" returns="DOMAttr" signature="dom_element_remove_attribute_node(DOMAttr oldAttr)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- D Since" ilk="function" name="dom_element_get_elements_by_tag_name" returns="DOMNodeList" signature="dom_element_get_elements_by_tag_name(string name)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElGetAttrNS Since DOM Level" ilk="function" name="dom_element_get_attribute_ns" returns="string" signature="dom_element_get_attribute_ns(string namespaceURI, string localName)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElSetAttrNS Since DOM Level" ilk="function" name="dom_element_set_attribute_ns" returns="void" signature="dom_element_set_attribute_ns(string namespaceURI, string qualifiedName, string value)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElRemAtNS Since DOM Level" ilk="function" name="dom_element_remove_attribute_ns" returns="void" signature="dom_element_remove_attribute_ns(string namespaceURI, string localName)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElGetAtNodeNS Since DOM Level" ilk="function" name="dom_element_get_attribute_node_ns" returns="DOMAttr" signature="dom_element_get_attribute_node_ns(string namespaceURI, string localName)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElSetAtNodeNS Since DOM Level" ilk="function" name="dom_element_set_attribute_node_ns" returns="DOMAttr" signature="dom_element_set_attribute_node_ns(DOMAttr newAttr)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-A C Since DOM Level" ilk="function" name="dom_element_get_elements_by_tag_name_ns" returns="DOMNodeList" signature="dom_element_get_elements_by_tag_name_ns(string namespaceURI, string localName)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElHasAttr Since DOM Level" ilk="function" name="dom_element_has_attribute" returns="boolean" signature="dom_element_has_attribute(string name)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElHasAttrNS Since DOM Level" ilk="function" name="dom_element_has_attribute_ns" returns="boolean" signature="dom_element_has_attribute_ns(string namespaceURI, string localName)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElSetIdAttr Since DOM Level" ilk="function" name="dom_element_set_id_attribute" returns="void" signature="dom_element_set_id_attribute(string name, boolean isId)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElSetIdAttrNS Since DOM Level" ilk="function" name="dom_element_set_id_attribute_ns" returns="void" signature="dom_element_set_id_attribute_ns(string namespaceURI, string localName, boolean isId)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-ElSetIdAttrNode Since DOM Level" ilk="function" name="dom_element_set_id_attribute_node" returns="void" signature="dom_element_set_id_attribute_node(attr idAttr, boolean isId)" src="element.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_namednodemap_get_named_item" returns="DOMNode" signature="dom_namednodemap_get_named_item(string name)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_namednodemap_set_named_item" returns="DOMNode" signature="dom_namednodemap_set_named_item(DOMNode arg)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-D B Since" ilk="function" name="dom_namednodemap_remove_named_item" returns="DOMNode" signature="dom_namednodemap_remove_named_item(string name)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- F Since" ilk="function" name="dom_namednodemap_item" returns="DOMNode" signature="dom_namednodemap_item(int index)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-getNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_get_named_item_ns" returns="DOMNode" signature="dom_namednodemap_get_named_item_ns(string namespaceURI, string localName)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-setNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_set_named_item_ns" returns="DOMNode" signature="dom_namednodemap_set_named_item_ns(DOMNode arg)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-removeNamedItemNS Since DOM Level" ilk="function" name="dom_namednodemap_remove_named_item_ns" returns="DOMNode" signature="dom_namednodemap_remove_named_item_ns(string namespaceURI, string localName)" src="namednodemap.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html NameList-getName Since" ilk="function" name="dom_namelist_get_name" returns="string" signature="dom_namelist_get_name(int index)" src="namelist.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html NameList-getNamespaceURI Since" ilk="function" name="dom_namelist_get_namespace_uri" returns="string" signature="dom_namelist_get_namespace_uri(int index)" src="namelist.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_node_insert_before" returns="domnode" signature="dom_node_insert_before(DomNode newChild, DomNode refChild)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_node_replace_child" returns="DomNode" signature="dom_node_replace_child(DomNode newChild, DomNode oldChild)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_node_remove_child" returns="DomNode" signature="dom_node_remove_child(DomNode oldChild)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- E Since" ilk="function" name="dom_node_append_child" returns="DomNode" signature="dom_node_append_child(DomNode newChild)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- Since" ilk="function" name="dom_node_has_child_nodes" returns="boolean" signature="dom_node_has_child_nodes()" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- A ED A Since" ilk="function" name="dom_node_clone_node" returns="DomNode" signature="dom_node_clone_node(boolean deep)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-normalize Since" ilk="function" name="dom_node_normalize" returns="void" signature="dom_node_normalize()" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Level- -Core-Node-supports Since DOM Level" ilk="function" name="dom_node_is_supported" returns="boolean" signature="dom_node_is_supported(string feature, string version)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID-NodeHasAttrs Since DOM Level" ilk="function" name="dom_node_has_attributes" returns="boolean" signature="dom_node_has_attributes()" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -compareDocumentPosition Since DOM Level" ilk="function" name="dom_node_compare_document_position" returns="short" signature="dom_node_compare_document_position(DomNode other)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -isSameNode Since DOM Level" ilk="function" name="dom_node_is_same_node" returns="boolean" signature="dom_node_is_same_node(DomNode other)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -lookupNamespacePrefix Since DOM Level" ilk="function" name="dom_node_lookup_prefix" returns="string" signature="dom_node_lookup_prefix(string namespaceURI)" src="node.c" />
      <scope doc="URL http www w org TR DOM-Level- -Core core html Node&#xA;-isDefaultNamespace Since DOM Level" ilk="function" name="dom_node_is_default_namespace" returns="boolean" signature="dom_node_is_default_namespace(string namespaceURI)" src="node.c" />
      <scope doc="URL http www w org TR DOM-Level- -Core core html Node&#xA;-lookupNamespaceURI Since DOM Level" ilk="function" name="dom_node_lookup_namespace_uri" returns="string" signature="dom_node_lookup_namespace_uri(string prefix)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -isEqualNode Since DOM Level" ilk="function" name="dom_node_is_equal_node" returns="boolean" signature="dom_node_is_equal_node(DomNode arg)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -getFeature Since DOM Level" ilk="function" name="dom_node_get_feature" returns="DomNode" signature="dom_node_get_feature(string feature, string version)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -setUserData Since DOM Level" ilk="function" name="dom_node_set_user_data" returns="DomUserData" signature="dom_node_set_user_data(string key, DomUserData data, userdatahandler handler)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Node -getUserData Since DOM Level" ilk="function" name="dom_node_get_user_data" returns="DomUserData" signature="dom_node_get_user_data(string key)" src="node.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID- Since" ilk="function" name="dom_nodelist_item" returns="DOMNode" signature="dom_nodelist_item(int index)" src="nodelist.c" />
      <scope doc="Get a simplexml element object from dom to allow for&#xA;processing" ilk="function" name="dom_import_simplexml" returns="somNode" signature="dom_import_simplexml(sxeobject node)" src="php_dom.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html i n-methods-StringExtend-findOffset Since" ilk="function" name="dom_string_extend_find_offset16" returns="int" signature="dom_string_extend_find_offset16(int offset32)" src="string_extend.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html i n-methods-StringExtend-findOffset Since" ilk="function" name="dom_string_extend_find_offset32" returns="int" signature="dom_string_extend_find_offset32(int offset16)" src="string_extend.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-ID- C D Since" ilk="function" name="dom_text_split_text" returns="DOMText" signature="dom_text_split_text(int offset)" src="text.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Text -isWhitespaceInElementContent Since DOM&#xA;Level" ilk="function" name="dom_text_is_whitespace_in_element_content" returns="boolean" signature="dom_text_is_whitespace_in_element_content()" src="text.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html core-Text -replaceWholeText Since DOM Level" ilk="function" name="dom_text_replace_whole_text" returns="DOMText" signature="dom_text_replace_whole_text(string content)" src="text.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html ID-handleUserDataEvent Since" ilk="function" name="dom_userdatahandler_handle" returns="dom_void" signature="dom_userdatahandler_handle(short operation, string key, domobject data, node src, node dst)" src="userdatahandler.c" />
      <scope doc="" ilk="function" name="dom_xpath_register_ns" returns="boolean" signature="dom_xpath_register_ns(string prefix, string uri)" src="xpath.c" />
      <scope doc="" ilk="function" name="dom_xpath_query" returns="DOMNodeList" signature="dom_xpath_query(string expr [,DOMNode context])" src="xpath.c" />
      <scope doc="" ilk="function" name="dom_xpath_evaluate" returns="mixed" signature="dom_xpath_evaluate(string expr [,DOMNode context])" src="xpath.c" />
      <scope doc="Get headername for index or false if not defined" ilk="function" name="exif_tagname" returns="string" signature="exif_tagname(index)" src="exif.c" />
      <scope doc="Reads header data from the JPEG TIFF image filename and&#xA;optionally reads the internal thumbnails" ilk="function" name="exif_read_data" returns="array" signature="exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])" src="exif.c" />
      <scope doc="Reads the embedded thumbnail" ilk="function" name="exif_thumbnail" returns="string" signature="exif_thumbnail(string filename [, &amp;width, &amp;height [, &amp;imagetype]])" src="exif.c" />
      <scope doc="Get the type of an image" ilk="function" name="exif_imagetype" returns="int" signature="exif_imagetype(string imagefile)" src="exif.c" />
      <scope doc="Create a connection to a database server" ilk="function" name="fbsql_connect" returns="resource" signature="fbsql_connect([string hostname [, string username [, string password]]])" src="php_fbsql.c" />
      <scope doc="Create a persistant connection to a database server" ilk="function" name="fbsql_pconnect" returns="resource" signature="fbsql_pconnect([string hostname [, string username [, string password]]])" src="php_fbsql.c" />
      <scope doc="Close a connection to a database server" ilk="function" name="fbsql_close" returns="bool" signature="fbsql_close([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Sets the transaction locking and isolation" ilk="function" name="fbsql_set_transaction" returns="void" signature="fbsql_set_transaction(resource link_identifier, int locking, int isolation)" src="php_fbsql.c" />
      <scope doc="Turns on auto-commit" ilk="function" name="fbsql_autocommit" returns="bool" signature="fbsql_autocommit(resource link_identifier [, bool OnOff])" src="php_fbsql.c" />
      <scope doc="Commit the transaction" ilk="function" name="fbsql_commit" returns="bool" signature="fbsql_commit([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Rollback all statments since last commit" ilk="function" name="fbsql_rollback" returns="bool" signature="fbsql_rollback([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Create a BLOB in the database for use with an insert or&#xA;update statement" ilk="function" name="fbsql_create_blob" returns="string" signature="fbsql_create_blob(string blob_data [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Create a CLOB in the database for use with an insert or&#xA;update statement" ilk="function" name="fbsql_create_clob" returns="string" signature="fbsql_create_clob(string clob_data [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Sets the mode for how LOB data re retreived actual data&#xA;or a handle" ilk="function" name="fbsql_set_lob_mode" returns="bool" signature="fbsql_set_lob_mode(resource result, int lob_mode)" src="php_fbsql.c" />
      <scope doc="Read the BLOB data identified by blob handle" ilk="function" name="fbsql_read_blob" returns="string" signature="fbsql_read_blob(string blob_handle [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Read the CLOB data identified by clob handle" ilk="function" name="fbsql_read_clob" returns="string" signature="fbsql_read_clob(string clob_handle [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Get the size of a BLOB identified by blob handle" ilk="function" name="fbsql_blob_size" returns="int" signature="fbsql_blob_size(string blob_handle [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Get the size of a CLOB identified by clob handle" ilk="function" name="fbsql_clob_size" returns="int" signature="fbsql_clob_size(string clob_handle [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Get or set the host name used with a connection" ilk="function" name="fbsql_hostname" returns="string" signature="fbsql_hostname(resource link_identifier [, string host_name])" src="php_fbsql.c" />
      <scope doc="Get or set the database name used with a connection" ilk="function" name="fbsql_database" returns="string" signature="fbsql_database(resource link_identifier [, string database])" src="php_fbsql.c" />
      <scope doc="Get or set the databsae password used with a connection" ilk="function" name="fbsql_database_password" returns="string" signature="fbsql_database_password(resource link_identifier [, string database_password])" src="php_fbsql.c" />
      <scope doc="Get or set the host user used with a connection" ilk="function" name="fbsql_username" returns="string" signature="fbsql_username(resource link_identifier [, string username])" src="php_fbsql.c" />
      <scope doc="Get or set the user password used with a connection" ilk="function" name="fbsql_password" returns="string" signature="fbsql_password(resource link_identifier [, string password])" src="php_fbsql.c" />
      <scope doc="Change the password for a given user" ilk="function" name="fbsql_set_password" returns="bool" signature="fbsql_set_password(resource link_identifier, string user, string password, string old_password)" src="php_fbsql.c" />
      <scope doc="Select the database to open" ilk="function" name="fbsql_select_db" returns="bool" signature="fbsql_select_db([string database_name [, resource link_identifier]])" src="php_fbsql.c" />
      <scope doc="Change input output character set" ilk="function" name="fbsql_set_characterset" returns="void" signature="fbsql_set_characterset(resource link_identifier, long charcterset [, long in_out_both]])" src="php_fbsql.c" />
      <scope doc="Change the user for a session" ilk="function" name="fbsql_change_user" returns="int" signature="fbsql_change_user(string user, string password [, string database [, resource link_identifier]])" src="php_fbsql.c" />
      <scope doc="Create a new database on the server" ilk="function" name="fbsql_create_db" returns="bool" signature="fbsql_create_db(string database_name [, resource link_identifier [, string database_options]])" src="php_fbsql.c" />
      <scope doc="Drop a database on the server" ilk="function" name="fbsql_drop_db" returns="int" signature="fbsql_drop_db(string database_name [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Start a database on the server" ilk="function" name="fbsql_start_db" returns="bool" signature="fbsql_start_db(string database_name [, resource link_identifier [, string database_options]])" src="php_fbsql.c" />
      <scope doc="Stop a database on the server" ilk="function" name="fbsql_stop_db" returns="bool" signature="fbsql_stop_db(string database_name [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Gets the status Stopped Starting Running Stopping for a&#xA;given database" ilk="function" name="fbsql_db_status" returns="int" signature="fbsql_db_status(string database_name [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Send one or more SQL statements to the server and&#xA;execute them" ilk="function" name="fbsql_query" returns="resource" signature="fbsql_query(string query [, resource link_identifier [, long batch_size]])" src="php_fbsql.c" />
      <scope doc="Send one or more SQL statements to a specified database&#xA;on the server" ilk="function" name="fbsql_db_query" returns="resource" signature="fbsql_db_query(string database_name, string query [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Retreive a list of all databases on the server" ilk="function" name="fbsql_list_dbs" returns="resource" signature="fbsql_list_dbs([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Retreive a list of all tables from the specifoied&#xA;database" ilk="function" name="fbsql_list_tables" returns="resource" signature="fbsql_list_tables(string database [, int link_identifier])" src="php_fbsql.c" />
      <scope doc="Retrieve a list of all fields for the specified&#xA;database table" ilk="function" name="fbsql_list_fields" returns="resource" signature="fbsql_list_fields(string database_name, string table_name [, resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Returns the last error string" ilk="function" name="fbsql_error" returns="string" signature="fbsql_error([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Returns the last error code" ilk="function" name="fbsql_errno" returns="int" signature="fbsql_errno([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Enable or disable FrontBase warnings" ilk="function" name="fbsql_warnings" returns="bool" signature="fbsql_warnings([int flag])" src="php_fbsql.c" />
      <scope doc="Get the number of rows affected by the last statement" ilk="function" name="fbsql_affected_rows" returns="int" signature="fbsql_affected_rows([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Get the number of rows affected by the last statement" ilk="function" name="fbsql_rows_fetched" returns="int" signature="fbsql_rows_fetched(resource result)" src="php_fbsql.c" />
      <scope doc="Get the internal index for the last insert statement" ilk="function" name="fbsql_insert_id" returns="int" signature="fbsql_insert_id([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="" ilk="function" name="fbsql_result" returns="mixed" signature="fbsql_result(int result [, int row [, mixed field]])" src="php_fbsql.c" />
      <scope doc="Switch to the next result if multiple results are&#xA;available" ilk="function" name="fbsql_next_result" returns="bool" signature="fbsql_next_result(int result)" src="php_fbsql.c" />
      <scope doc="Get number of rows" ilk="function" name="fbsql_num_rows" returns="int" signature="fbsql_num_rows(int result)" src="php_fbsql.c" />
      <scope doc="Get number of fields in the result set" ilk="function" name="fbsql_num_fields" returns="int" signature="fbsql_num_fields(int result)" src="php_fbsql.c" />
      <scope doc="Fetch a row of data Returns an indexed array" ilk="function" name="fbsql_fetch_row" returns="array" signature="fbsql_fetch_row(resource result)" src="php_fbsql.c" />
      <scope doc="Detch a row of data Returns an assoc array" ilk="function" name="fbsql_fetch_assoc" returns="object" signature="fbsql_fetch_assoc(resource result)" src="php_fbsql.c" />
      <scope doc="Fetch a row of data Returns an object" ilk="function" name="fbsql_fetch_object" returns="object" signature="fbsql_fetch_object(resource result [, int result_type])" src="php_fbsql.c" />
      <scope doc="Fetches a result row as an array associative numeric or&#xA;both" ilk="function" name="fbsql_fetch_array" returns="array" signature="fbsql_fetch_array(resource result [, int result_type])" src="php_fbsql.c" />
      <scope doc="Move the internal row counter to the specified row&#xA;number" ilk="function" name="fbsql_data_seek" returns="bool" signature="fbsql_data_seek(int result, int row_number)" src="php_fbsql.c" />
      <scope doc="Returns an array of the lengths of each column in the&#xA;result set" ilk="function" name="fbsql_fetch_lengths" returns="array" signature="fbsql_fetch_lengths(int result)" src="php_fbsql.c" />
      <scope doc="Get the field properties for a specified field index" ilk="function" name="fbsql_fetch_field" returns="object" signature="fbsql_fetch_field(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="" ilk="function" name="fbsql_field_seek" returns="bool" signature="fbsql_field_seek(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="Get the column name for a specified field index" ilk="function" name="fbsql_field_name" returns="string" signature="fbsql_field_name(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="Get the table name for a specified field index" ilk="function" name="fbsql_field_table" returns="string" signature="fbsql_field_table(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="Get the column length for a specified field index" ilk="function" name="fbsql_field_len" returns="mixed" signature="fbsql_field_len(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="Get the field type for a specified field index" ilk="function" name="fbsql_field_type" returns="string" signature="fbsql_field_type(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="" ilk="function" name="fbsql_field_flags" returns="string" signature="fbsql_field_flags(int result [, int field_index])" src="php_fbsql.c" />
      <scope doc="Retreive the table name for index after a call to fbsql&#xA;list tables" ilk="function" name="fbsql_table_name" returns="string" signature="fbsql_table_name(resource result, int index)" src="php_fbsql.c" />
      <scope doc="free the memory used to store a result" ilk="function" name="fbsql_free_result" returns="bool" signature="fbsql_free_result(resource result)" src="php_fbsql.c" />
      <scope doc="" ilk="function" name="fbsql_get_autostart_info" returns="array" signature="fbsql_get_autostart_info([resource link_identifier])" src="php_fbsql.c" />
      <scope doc="Opens a new FDF document" ilk="function" name="fdf_open" returns="resource" signature="fdf_open(string filename)" src="fdf.c" />
      <scope doc="Opens a new FDF document from string" ilk="function" name="fdf_open_string" returns="resource" signature="fdf_open_string(string fdf_data)" src="fdf.c" />
      <scope doc="Creates a new FDF document" ilk="function" name="fdf_create" returns="resource" signature="fdf_create(void)" src="fdf.c" />
      <scope doc="Closes the FDF document" ilk="function" name="fdf_close" returns="void" signature="fdf_close(resource fdfdoc)" src="fdf.c" />
      <scope doc="Gets the value of a field as string" ilk="function" name="fdf_get_value" returns="string" signature="fdf_get_value(resource fdfdoc, string fieldname [, int which])" src="fdf.c" />
      <scope doc="Sets the value of a field" ilk="function" name="fdf_set_value" returns="bool" signature="fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])" src="fdf.c" />
      <scope doc="Gets the name of the next field name or the first field&#xA;name" ilk="function" name="fdf_next_field_name" returns="string" signature="fdf_next_field_name(resource fdfdoc [, string fieldname])" src="fdf.c" />
      <scope doc="Sets the appearence of a field" ilk="function" name="fdf_set_ap" returns="bool" signature="fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)" src="fdf.c" />
      <scope doc="Gets the appearance of a field and creates a PDF&#xA;document out of it" ilk="function" name="fdf_get_ap" returns="bool" signature="fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename)" src="fdf.c" />
      <scope doc="Gets FDF file encoding scheme" ilk="function" name="fdf_get_encoding" returns="string" signature="fdf_get_encoding(resource fdf)" src="fdf.c" />
      <scope doc="Sets the value of Status key" ilk="function" name="fdf_set_status" returns="bool" signature="fdf_set_status(resource fdfdoc, string status)" src="fdf.c" />
      <scope doc="Gets the value of Status key" ilk="function" name="fdf_get_status" returns="string" signature="fdf_get_status(resource fdfdoc)" src="fdf.c" />
      <scope doc="Sets the value of F key" ilk="function" name="fdf_set_file" returns="bool" signature="fdf_set_file(resource fdfdoc, string filename [, string target_frame])" src="fdf.c" />
      <scope doc="Gets the value of F key" ilk="function" name="fdf_get_file" returns="string" signature="fdf_get_file(resource fdfdoc)" src="fdf.c" />
      <scope doc="Writes out the FDF file" ilk="function" name="fdf_save" returns="bool" signature="fdf_save(resource fdfdoc [, string filename])" src="fdf.c" />
      <scope doc="Returns the FDF file as a string" ilk="function" name="fdf_save_string" returns="string" signature="fdf_save_string(resource fdfdoc)" src="fdf.c" />
      <scope doc="Adds a template into the FDF document" ilk="function" name="fdf_add_template" returns="bool" signature="fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)" src="fdf.c" />
      <scope doc="Sets flags for a field in the FDF document" ilk="function" name="fdf_set_flags" returns="bool" signature="fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)" src="fdf.c" />
      <scope doc="Gets the flags of a field" ilk="function" name="fdf_get_flags" returns="int" signature="fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags)" src="fdf.c" />
      <scope doc="Sets a value in the opt array for a field" ilk="function" name="fdf_set_opt" returns="bool" signature="fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)" src="fdf.c" />
      <scope doc="Gets a value from the opt array of a field" ilk="function" name="fdf_get_opt" returns="mixed" signature="fdf_get_opt(resource fdfdof, string fieldname [, int element])" src="fdf.c" />
      <scope doc="Sets the submit form action for a field" ilk="function" name="fdf_set_submit_form_action" returns="bool" signature="fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)" src="fdf.c" />
      <scope doc="Sets the javascript action for a field" ilk="function" name="fdf_set_javascript_action" returns="bool" signature="fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)" src="fdf.c" />
      <scope doc="Sets FDF encoding either Shift-JIS or Unicode" ilk="function" name="fdf_set_encoding" returns="bool" signature="fdf_set_encoding(resource fdf_document, string encoding)" src="fdf.c" />
      <scope doc="Gets error code for last operation" ilk="function" name="fdf_errno" returns="int" signature="fdf_errno(void)" src="fdf.c" />
      <scope doc="Gets error description for error code" ilk="function" name="fdf_error" returns="string" signature="fdf_error([int errno])" src="fdf.c" />
      <scope doc="Gets version number for FDF api or file" ilk="function" name="fdf_get_version" returns="string" signature="fdf_get_version([resource fdfdoc])" src="fdf.c" />
      <scope doc="Sets FDF version for a file" ilk="function" name="fdf_set_version" returns="bool" signature="fdf_set_version(resourece fdfdoc, string version)" src="fdf.c" />
      <scope doc="Add javascript code to the fdf file" ilk="function" name="fdf_add_doc_javascript" returns="bool" signature="fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script)" src="fdf.c" />
      <scope doc="Adds javascript code to be executed when Acrobat opens&#xA;the FDF" ilk="function" name="fdf_set_on_import_javascript" returns="bool" signature="fdf_set_on_import_javascript(resource fdfdoc, string script, bool before_data_import)" src="fdf.c" />
      <scope doc="Sets target frame for form" ilk="function" name="fdf_set_target_frame" returns="bool" signature="fdf_set_target_frame(resource fdfdoc, string target)" src="fdf.c" />
      <scope doc="Sets target frame for form" ilk="function" name="fdf_remove_item" returns="bool" signature="fdf_remove_item(resource fdfdoc, string fieldname, int item)" src="fdf.c" />
      <scope doc="Get attached uploaded file" ilk="function" name="fdf_get_attachment" returns="array" signature="fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)" src="fdf.c" />
      <scope doc="Call a user defined function for each document value" ilk="function" name="fdf_enum_values" returns="bool" signature="fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])" src="fdf.c" />
      <scope doc="Set FDF specific HTTP headers" ilk="function" name="fdf_header" returns="void" signature="fdf_header(void)" src="fdf.c" />
      <scope doc="Returns true if the variable with the name &apos;name&apos;&#xA;exists in source" ilk="function" name="filter_has_var" returns="mixed" signature="filter_has_var(constant type, string variable_name)" src="filter.c" />
      <scope doc="Returns the filtered variable &apos;name&apos; from source type" ilk="function" name="filter_input" returns="mixed" signature="filter_input(constant type, string variable_name [, long filter [, mixed options]])" src="filter.c" />
      <scope doc="Returns the filtered version of the vriable" ilk="function" name="filter_var" returns="mixed" signature="filter_var(mixed variable [, long filter [, mixed options]])" src="filter.c" />
      <scope doc="Returns an array with all arguments defined in&#xA;&apos;definition&apos;" ilk="function" name="filter_input_array" returns="mixed" signature="filter_input_array(constant type, [, mixed options]])" src="filter.c" />
      <scope doc="Returns an array with all arguments defined in&#xA;&apos;definition&apos;" ilk="function" name="filter_var_array" returns="mixed" signature="filter_var_array(array data, [, mixed options]])" src="filter.c" />
      <scope doc="Returns the filter ID belonging to a named filter" ilk="function" name="d" returns="filter_i" signature="d(string filtername)" src="filter.c" />
      <scope doc="Opens a FTP stream" ilk="function" name="ftp_connect" returns="resource" signature="ftp_connect(string host [, int port [, int timeout]])" src="php_ftp.c" />
      <scope doc="Opens a FTP-SSL stream" ilk="function" name="ftp_ssl_connect" returns="resource" signature="ftp_ssl_connect(string host [, int port [, int timeout]])" src="php_ftp.c" />
      <scope doc="Logs into the FTP server" ilk="function" name="ftp_login" returns="bool" signature="ftp_login(resource stream, string username, string password)" src="php_ftp.c" />
      <scope doc="Returns the present working directory" ilk="function" name="ftp_pwd" returns="string" signature="ftp_pwd(resource stream)" src="php_ftp.c" />
      <scope doc="Changes to the parent directory" ilk="function" name="ftp_cdup" returns="bool" signature="ftp_cdup(resource stream)" src="php_ftp.c" />
      <scope doc="Changes directories" ilk="function" name="ftp_chdir" returns="bool" signature="ftp_chdir(resource stream, string directory)" src="php_ftp.c" />
      <scope doc="Requests execution of a program on the FTP server" ilk="function" name="ftp_exec" returns="bool" signature="ftp_exec(resource stream, string command)" src="php_ftp.c" />
      <scope doc="Sends a literal command to the FTP server" ilk="function" name="ftp_raw" returns="array" signature="ftp_raw(resource stream, string command)" src="php_ftp.c" />
      <scope doc="Creates a directory and returns the absolute path for&#xA;the new directory or false on error" ilk="function" name="ftp_mkdir" returns="string" signature="ftp_mkdir(resource stream, string directory)" src="php_ftp.c" />
      <scope doc="Removes a directory" ilk="function" name="ftp_rmdir" returns="bool" signature="ftp_rmdir(resource stream, string directory)" src="php_ftp.c" />
      <scope doc="Sets permissions on a file" ilk="function" name="ftp_chmod" returns="int" signature="ftp_chmod(resource stream, int mode, string filename)" src="php_ftp.c" />
      <scope doc="Attempt to allocate space on the remote FTP server" ilk="function" name="ftp_alloc" returns="bool" signature="ftp_alloc(resource stream, int size[, &amp;response])" src="php_ftp.c" />
      <scope doc="Returns an array of filenames in the given directory" ilk="function" name="ftp_nlist" returns="array" signature="ftp_nlist(resource stream, string directory)" src="php_ftp.c" />
      <scope doc="Returns a detailed listing of a directory as an array&#xA;of output lines" ilk="function" name="ftp_rawlist" returns="array" signature="ftp_rawlist(resource stream, string directory [, bool recursive])" src="php_ftp.c" />
      <scope doc="Returns the system type identifier" ilk="function" name="ftp_systype" returns="string" signature="ftp_systype(resource stream)" src="php_ftp.c" />
      <scope doc="Retrieves a file from the FTP server and writes it to&#xA;an open file" ilk="function" name="ftp_fget" returns="bool" signature="ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" src="php_ftp.c" />
      <scope doc="Retrieves a file from the FTP server asynchronly and&#xA;writes it to an open file" ilk="function" name="ftp_nb_fget" returns="int" signature="ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" src="php_ftp.c" />
      <scope doc="Turns passive mode on or off" ilk="function" name="ftp_pasv" returns="bool" signature="ftp_pasv(resource stream, bool pasv)" src="php_ftp.c" />
      <scope doc="Retrieves a file from the FTP server and writes it to a&#xA;local file" ilk="function" name="ftp_get" returns="bool" signature="ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" src="php_ftp.c" />
      <scope doc="Retrieves a file from the FTP server nbhronly and&#xA;writes it to a local file" ilk="function" name="ftp_nb_get" returns="int" signature="ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" src="php_ftp.c" />
      <scope doc="Continues retrieving sending a file nbronously" ilk="function" name="ftp_nb_continue" returns="int" signature="ftp_nb_continue(resource stream)" src="php_ftp.c" />
      <scope doc="Stores a file from an open file to the FTP server" ilk="function" name="ftp_fput" returns="bool" signature="ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" src="php_ftp.c" />
      <scope doc="Stores a file from an open file to the FTP server&#xA;nbronly" ilk="function" name="ftp_nb_fput" returns="int" signature="ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" src="php_ftp.c" />
      <scope doc="Stores a file on the FTP server" ilk="function" name="ftp_put" returns="bool" signature="ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" src="php_ftp.c" />
      <scope doc="Stores a file on the FTP server" ilk="function" name="ftp_nb_put" returns="int" signature="ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" src="php_ftp.c" />
      <scope doc="Returns the size of the file or - on error" ilk="function" name="ftp_size" returns="int" signature="ftp_size(resource stream, string filename)" src="php_ftp.c" />
      <scope doc="Returns the last modification time of the file or - on&#xA;error" ilk="function" name="ftp_mdtm" returns="int" signature="ftp_mdtm(resource stream, string filename)" src="php_ftp.c" />
      <scope doc="Renames the given file to a new path" ilk="function" name="ftp_rename" returns="bool" signature="ftp_rename(resource stream, string src, string dest)" src="php_ftp.c" />
      <scope doc="Deletes a file" ilk="function" name="ftp_delete" returns="bool" signature="ftp_delete(resource stream, string file)" src="php_ftp.c" />
      <scope doc="Sends a SITE command to the server" ilk="function" name="ftp_site" returns="bool" signature="ftp_site(resource stream, string cmd)" src="php_ftp.c" />
      <scope doc="Closes the FTP stream" ilk="function" name="ftp_close" returns="bool" signature="ftp_close(resource stream)" src="php_ftp.c" />
      <scope doc="Sets an FTP option" ilk="function" name="ftp_set_option" returns="bool" signature="ftp_set_option(resource stream, int option, mixed value)" src="php_ftp.c" />
      <scope doc="Gets an FTP option" ilk="function" name="ftp_get_option" returns="mixed" signature="ftp_get_option(resource stream, int option)" src="php_ftp.c" />
      <scope doc="" ilk="function" name="gd_info" returns="array" signature="gd_info()" src="gd.c" />
      <scope doc="Load a new font" ilk="function" name="imageloadfont" returns="int" signature="imageloadfont(string filename)" src="gd.c" />
      <scope doc="Set the line drawing styles for use with imageline and&#xA;IMG COLOR STYLED" ilk="function" name="imagesetstyle" returns="bool" signature="imagesetstyle(resource im, array styles)" src="gd.c" />
      <scope doc="Create a new true color image" ilk="function" name="imagecreatetruecolor" returns="resource" signature="imagecreatetruecolor(int x_size, int y_size)" src="gd.c" />
      <scope doc="return true if the image uses truecolor" ilk="function" name="imageistruecolor" returns="bool" signature="imageistruecolor(resource im)" src="gd.c" />
      <scope doc="Convert a true colour image to a palette based image&#xA;with a number of colours optionally using dithering" ilk="function" name="imagetruecolortopalette" returns="void" signature="imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)" src="gd.c" />
      <scope doc="Makes the colors of the palette version of an image&#xA;more closely match the true color version" ilk="function" name="imagecolormatch" returns="bool" signature="imagecolormatch(resource im1, resource im2)" src="gd.c" />
      <scope doc="Set line thickness for drawing lines ellipses&#xA;rectangles polygons etc" ilk="function" name="imagesetthickness" returns="bool" signature="imagesetthickness(resource im, int thickness)" src="gd.c" />
      <scope doc="Draw an ellipse" ilk="function" name="imagefilledellipse" returns="bool" signature="imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)" src="gd.c" />
      <scope doc="Draw a filled partial ellipse" ilk="function" name="imagefilledarc" returns="bool" signature="imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)" src="gd.c" />
      <scope doc="Turn alpha blending mode on or off for the given image" ilk="function" name="imagealphablending" returns="bool" signature="imagealphablending(resource im, bool on)" src="gd.c" />
      <scope doc="Include alpha channel to a saved image" ilk="function" name="imagesavealpha" returns="bool" signature="imagesavealpha(resource im, bool on)" src="gd.c" />
      <scope doc="Set the alpha blending flag to use the bundled libgd&#xA;layering effects" ilk="function" name="imagelayereffect" returns="bool" signature="imagelayereffect(resource im, int effect)" src="gd.c" />
      <scope doc="Allocate a color with an alpha level Works for true&#xA;color and palette based images" ilk="function" name="imagecolorallocatealpha" returns="int" signature="imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" />
      <scope doc="Resolve Allocate a colour with an alpha level Works for&#xA;true colour and palette based images" ilk="function" name="imagecolorresolvealpha" returns="int" signature="imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" />
      <scope doc="Find the closest matching colour with alpha&#xA;transparency" ilk="function" name="imagecolorclosestalpha" returns="int" signature="imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" />
      <scope doc="Find exact match for colour with transparency" ilk="function" name="imagecolorexactalpha" returns="int" signature="imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)" src="gd.c" />
      <scope doc="Copy and resize part of an image using resampling to&#xA;help ensure clarity" ilk="function" name="imagecopyresampled" returns="bool" signature="imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" src="gd.c" />
      <scope doc="Grab a window or its client area using a windows handle&#xA;HWND property in COM instance" ilk="function" name="imagegrabwindow" returns="resource" signature="imagegrabwindow(int window_handle [, int client_area])" src="gd.c" />
      <scope doc="Grab a screenshot" ilk="function" name="imagegrabscreen" returns="resource" signature="imagegrabscreen()" src="gd.c" />
      <scope doc="Rotate an image using a custom angle" ilk="function" name="imagerotate" returns="resource" signature="imagerotate(resource src_im, float angle, int bgdcolor [, int ignoretransparent])" src="gd.c" />
      <scope doc="Set the tile image to tile when filling image with the&#xA;IMG COLOR TILED color" ilk="function" name="imagesettile" returns="bool" signature="imagesettile(resource image, resource tile)" src="gd.c" />
      <scope doc="Set the brush image to brush when filling image with&#xA;the IMG COLOR BRUSHED color" ilk="function" name="imagesetbrush" returns="bool" signature="imagesetbrush(resource image, resource brush)" src="gd.c" />
      <scope doc="Create a new image" ilk="function" name="imagecreate" returns="resource" signature="imagecreate(int x_size, int y_size)" src="gd.c" />
      <scope doc="Return the types of images supported in a bitfield -&#xA;GIF JPEG PNG WBMP XPM" ilk="function" name="imagetypes" returns="int" signature="imagetypes(void)" src="gd.c" />
      <scope doc="Create a new image from the image stream in the string" ilk="function" name="imagecreatefromstring" returns="resource" signature="imagecreatefromstring(string image)" src="gd.c" />
      <scope doc="Create a new image from GIF file or URL" ilk="function" name="imagecreatefromgif" returns="resource" signature="imagecreatefromgif(string filename)" src="gd.c" />
      <scope doc="Create a new image from JPEG file or URL" ilk="function" name="imagecreatefromjpeg" returns="resource" signature="imagecreatefromjpeg(string filename)" src="gd.c" />
      <scope doc="Create a new image from PNG file or URL" ilk="function" name="imagecreatefrompng" returns="resource" signature="imagecreatefrompng(string filename)" src="gd.c" />
      <scope doc="Create a new image from XBM file or URL" ilk="function" name="imagecreatefromxbm" returns="resource" signature="imagecreatefromxbm(string filename)" src="gd.c" />
      <scope doc="Create a new image from XPM file or URL" ilk="function" name="imagecreatefromxpm" returns="resource" signature="imagecreatefromxpm(string filename)" src="gd.c" />
      <scope doc="Create a new image from WBMP file or URL" ilk="function" name="imagecreatefromwbmp" returns="resource" signature="imagecreatefromwbmp(string filename)" src="gd.c" />
      <scope doc="Create a new image from GD file or URL" ilk="function" name="imagecreatefromgd" returns="resource" signature="imagecreatefromgd(string filename)" src="gd.c" />
      <scope doc="Create a new image from GD file or URL" ilk="function" name="imagecreatefromgd2" returns="resource" signature="imagecreatefromgd2(string filename)" src="gd.c" />
      <scope doc="Create a new image from a given part of GD file or URL" ilk="function" name="imagecreatefromgd2part" returns="resource" signature="imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)" src="gd.c" />
      <scope doc="Output XBM image to browser or file" ilk="function" name="imagexbm" returns="int" signature="imagexbm(int im, string filename [, int foreground])" src="gd.c" />
      <scope doc="Output GIF image to browser or file" ilk="function" name="imagegif" returns="bool" signature="imagegif(resource im [, string filename])" src="gd.c" />
      <scope doc="Output PNG image to browser or file" ilk="function" name="imagepng" returns="bool" signature="imagepng(resource im [, string filename])" src="gd.c" />
      <scope doc="Output JPEG image to browser or file" ilk="function" name="imagejpeg" returns="bool" signature="imagejpeg(resource im [, string filename [, int quality]])" src="gd.c" />
      <scope doc="Output WBMP image to browser or file" ilk="function" name="imagewbmp" returns="bool" signature="imagewbmp(resource im [, string filename, [, int foreground]])" src="gd.c" />
      <scope doc="Output GD image to browser or file" ilk="function" name="imagegd" returns="bool" signature="imagegd(resource im [, string filename])" src="gd.c" />
      <scope doc="Output GD image to browser or file" ilk="function" name="imagegd2" returns="bool" signature="imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])" src="gd.c" />
      <scope doc="Destroy an image" ilk="function" name="imagedestroy" returns="bool" signature="imagedestroy(resource im)" src="gd.c" />
      <scope doc="Allocate a color for an image" ilk="function" name="imagecolorallocate" returns="int" signature="imagecolorallocate(resource im, int red, int green, int blue)" src="gd.c" />
      <scope doc="Copy the palette from the src image onto the dst image" ilk="function" name="imagepalettecopy" returns="void" signature="imagepalettecopy(resource dst, resource src)" src="gd.c" />
      <scope doc="Get the index of the color of a pixel" ilk="function" name="imagecolorat" returns="int" signature="imagecolorat(resource im, int x, int y)" src="gd.c" />
      <scope doc="Get the index of the closest color to the specified&#xA;color" ilk="function" name="imagecolorclosest" returns="int" signature="imagecolorclosest(resource im, int red, int green, int blue)" src="gd.c" />
      <scope doc="Get the index of the color which has the hue white and&#xA;blackness nearest to the given color" ilk="function" name="imagecolorclosesthwb" returns="int" signature="imagecolorclosesthwb(resource im, int red, int green, int blue)" src="gd.c" />
      <scope doc="De-allocate a color for an image" ilk="function" name="imagecolordeallocate" returns="bool" signature="imagecolordeallocate(resource im, int index)" src="gd.c" />
      <scope doc="Get the index of the specified color or its closest&#xA;possible alternative" ilk="function" name="imagecolorresolve" returns="int" signature="imagecolorresolve(resource im, int red, int green, int blue)" src="gd.c" />
      <scope doc="Get the index of the specified color" ilk="function" name="imagecolorexact" returns="int" signature="imagecolorexact(resource im, int red, int green, int blue)" src="gd.c" />
      <scope doc="Set the color for the specified palette index" ilk="function" name="imagecolorset" returns="void" signature="imagecolorset(resource im, int col, int red, int green, int blue)" src="gd.c" />
      <scope doc="Get the colors for an index" ilk="function" name="imagecolorsforindex" returns="array" signature="imagecolorsforindex(resource im, int col)" src="gd.c" />
      <scope doc="Apply a gamma correction to a GD image" ilk="function" name="imagegammacorrect" returns="bool" signature="imagegammacorrect(resource im, float inputgamma, float outputgamma)" src="gd.c" />
      <scope doc="Set a single pixel" ilk="function" name="imagesetpixel" returns="bool" signature="imagesetpixel(resource im, int x, int y, int col)" src="gd.c" />
      <scope doc="Draw a line" ilk="function" name="imageline" returns="bool" signature="imageline(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" />
      <scope doc="Draw a dashed line" ilk="function" name="imagedashedline" returns="bool" signature="imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" />
      <scope doc="Draw a rectangle" ilk="function" name="imagerectangle" returns="bool" signature="imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" />
      <scope doc="Draw a filled rectangle" ilk="function" name="imagefilledrectangle" returns="bool" signature="imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)" src="gd.c" />
      <scope doc="Draw a partial ellipse" ilk="function" name="imagearc" returns="bool" signature="imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)" src="gd.c" />
      <scope doc="Draw an ellipse" ilk="function" name="imageellipse" returns="bool" signature="imageellipse(resource im, int cx, int cy, int w, int h, int color)" src="gd.c" />
      <scope doc="Flood fill to specific color" ilk="function" name="imagefilltoborder" returns="bool" signature="imagefilltoborder(resource im, int x, int y, int border, int col)" src="gd.c" />
      <scope doc="Flood fill" ilk="function" name="imagefill" returns="bool" signature="imagefill(resource im, int x, int y, int col)" src="gd.c" />
      <scope doc="Find out the number of colors in an image&apos;s palette" ilk="function" name="imagecolorstotal" returns="int" signature="imagecolorstotal(resource im)" src="gd.c" />
      <scope doc="Define a color as transparent" ilk="function" name="imagecolortransparent" returns="int" signature="imagecolortransparent(resource im [, int col])" src="gd.c" />
      <scope doc="Enable or disable interlace" ilk="function" name="imageinterlace" returns="int" signature="imageinterlace(resource im [, int interlace])" src="gd.c" />
      <scope doc="Draw a polygon" ilk="function" name="imagepolygon" returns="bool" signature="imagepolygon(resource im, array point, int num_points, int col)" src="gd.c" />
      <scope doc="Draw a filled polygon" ilk="function" name="imagefilledpolygon" returns="bool" signature="imagefilledpolygon(resource im, array point, int num_points, int col)" src="gd.c" />
      <scope doc="Get font width" ilk="function" name="imagefontwidth" returns="int" signature="imagefontwidth(int font)" src="gd.c" />
      <scope doc="Get font height" ilk="function" name="imagefontheight" returns="int" signature="imagefontheight(int font)" src="gd.c" />
      <scope doc="Draw a character" ilk="function" name="imagechar" returns="bool" signature="imagechar(resource im, int font, int x, int y, string c, int col)" src="gd.c" />
      <scope doc="Draw a character rotated degrees counter-clockwise" ilk="function" name="imagecharup" returns="bool" signature="imagecharup(resource im, int font, int x, int y, string c, int col)" src="gd.c" />
      <scope doc="Draw a string horizontally" ilk="function" name="imagestring" returns="bool" signature="imagestring(resource im, int font, int x, int y, string str, int col)" src="gd.c" />
      <scope doc="Draw a string vertically - rotated degrees&#xA;counter-clockwise" ilk="function" name="imagestringup" returns="bool" signature="imagestringup(resource im, int font, int x, int y, string str, int col)" src="gd.c" />
      <scope doc="Copy part of an image" ilk="function" name="imagecopy" returns="bool" signature="imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)" src="gd.c" />
      <scope doc="Merge one part of an image with another" ilk="function" name="imagecopymerge" returns="bool" signature="imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" src="gd.c" />
      <scope doc="Merge one part of an image with another" ilk="function" name="imagecopymergegray" returns="bool" signature="imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" src="gd.c" />
      <scope doc="Copy and resize part of an image" ilk="function" name="imagecopyresized" returns="bool" signature="imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" src="gd.c" />
      <scope doc="Get image width" ilk="function" name="imagesx" returns="int" signature="imagesx(resource im)" src="gd.c" />
      <scope doc="Get image height" ilk="function" name="imagesy" returns="int" signature="imagesy(resource im)" src="gd.c" />
      <scope doc="Give the bounding box of a text using fonts via&#xA;freetype" ilk="function" name="imageftbbox" returns="array" signature="imageftbbox(float size, float angle, string font_file, string text [, array extrainfo])" src="gd.c" />
      <scope doc="Write text to the image using fonts via freetype" ilk="function" name="imagefttext" returns="array" signature="imagefttext(resource im, float size, float angle, int x, int y, int col, string font_file, string text [, array extrainfo])" src="gd.c" />
      <scope doc="Give the bounding box of a text using TrueType fonts" ilk="function" name="imagettfbbox" returns="array" signature="imagettfbbox(float size, float angle, string font_file, string text)" src="gd.c" />
      <scope doc="Write text to the image using a TrueType font" ilk="function" name="imagettftext" returns="array" signature="imagettftext(resource im, float size, float angle, int x, int y, int col, string font_file, string text)" src="gd.c" />
      <scope doc="Load a new font from specified file" ilk="function" name="imagepsloadfont" returns="resource" signature="imagepsloadfont(string pathname)" src="gd.c" />
      <scope doc="Make a copy of a font for purposes like extending or&#xA;reenconding" ilk="function" name="imagepscopyfont" returns="int" signature="imagepscopyfont(int font_index)" src="gd.c" />
      <scope doc="Free memory used by a font" ilk="function" name="imagepsfreefont" returns="bool" signature="imagepsfreefont(resource font_index)" src="gd.c" />
      <scope doc="To change a fonts character encoding vector" ilk="function" name="imagepsencodefont" returns="bool" signature="imagepsencodefont(resource font_index, string filename)" src="gd.c" />
      <scope doc="Extend or or condense if extend a font" ilk="function" name="imagepsextendfont" returns="bool" signature="imagepsextendfont(resource font_index, float extend)" src="gd.c" />
      <scope doc="Slant a font" ilk="function" name="imagepsslantfont" returns="bool" signature="imagepsslantfont(resource font_index, float slant)" src="gd.c" />
      <scope doc="Rasterize a string over an image" ilk="function" name="imagepstext" returns="array" signature="imagepstext(resource image, string text, resource font, int size, int foreground, int background, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])" src="gd.c" />
      <scope doc="Return the bounding box needed by a string if&#xA;rasterized" ilk="function" name="imagepsbbox" returns="array" signature="imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])" src="gd.c" />
      <scope doc="Output WBMP image to browser or file" ilk="function" name="image2wbmp" returns="bool" signature="image2wbmp(resource im [, string filename [, int threshold]])" src="gd.c" />
      <scope doc="Applies Filter an image using a custom angle" ilk="function" name="imagefilter" returns="bool" signature="imagefilter(resource src_im, int filtertype, [args] )" src="gd.c" />
      <scope doc="Apply a x convolution matrix using coefficient div and&#xA;offset" ilk="function" name="imageconvolution" returns="resource" signature="imageconvolution(resource src_im, array matrix3x3, double div, double offset)" src="gd.c" />
      <scope doc="Should antialiased functions used or not" ilk="function" name="imageantialias" returns="bool" signature="imageantialias(resource im, bool on)" src="gd.c" />
      <scope doc="Set the textdomain to domain Returns the current domain" ilk="function" name="textdomain" returns="string" signature="textdomain(string domain)" src="gettext.c" />
      <scope doc="Return the translation of msgid for the current domain&#xA;or msgid unaltered if a translation does not exist" ilk="function" name="gettext" returns="string" signature="gettext(string msgid)" src="gettext.c" />
      <scope doc="Return the translation of msgid for domain name or&#xA;msgid unaltered if a translation does not exist" ilk="function" name="dgettext" returns="string" signature="dgettext(string domain_name, string msgid)" src="gettext.c" />
      <scope doc="Return the translation of msgid for domain name and&#xA;category or msgid unaltered if a translation does not&#xA;exist" ilk="function" name="dcgettext" returns="string" signature="dcgettext(string domain_name, string msgid, long category)" src="gettext.c" />
      <scope doc="Bind to the text domain domain name looking for&#xA;translations in dir Returns the current domain" ilk="function" name="bindtextdomain" returns="string" signature="bindtextdomain(string domain_name, string dir)" src="gettext.c" />
      <scope doc="Plural version of gettext" ilk="function" name="ngettext" returns="string" signature="ngettext(string MSGID1, string MSGID2, int N)" src="gettext.c" />
      <scope doc="Initializes GMP number" ilk="function" name="gmp_init" returns="resource" signature="gmp_init(mixed number [, int base])" src="gmp.c" />
      <scope doc="Gets signed long value of GMP number" ilk="function" name="gmp_intval" returns="int" signature="gmp_intval(resource gmpnumber)" src="gmp.c" />
      <scope doc="Gets string representation of GMP number" ilk="function" name="gmp_strval" returns="string" signature="gmp_strval(resource gmpnumber [, int base])" src="gmp.c" />
      <scope doc="Add a and b" ilk="function" name="gmp_add" returns="resource" signature="gmp_add(resource a, resource b)" src="gmp.c" />
      <scope doc="Subtract b from a" ilk="function" name="gmp_sub" returns="resource" signature="gmp_sub(resource a, resource b)" src="gmp.c" />
      <scope doc="Multiply a and b" ilk="function" name="gmp_mul" returns="resource" signature="gmp_mul(resource a, resource b)" src="gmp.c" />
      <scope doc="Divide a by b returns quotient and reminder" ilk="function" name="gmp_div_qr" returns="array" signature="gmp_div_qr(resource a, resource b [, int round])" src="gmp.c" />
      <scope doc="Divide a by b returns reminder only" ilk="function" name="gmp_div_r" returns="resource" signature="gmp_div_r(resource a, resource b [, int round])" src="gmp.c" />
      <scope doc="Divide a by b returns quotient only" ilk="function" name="gmp_div_q" returns="resource" signature="gmp_div_q(resource a, resource b [, int round])" src="gmp.c" />
      <scope doc="Computes a modulo b" ilk="function" name="gmp_mod" returns="resource" signature="gmp_mod(resource a, resource b)" src="gmp.c" />
      <scope doc="Divide a by b using exact division algorithm" ilk="function" name="gmp_divexact" returns="resource" signature="gmp_divexact(resource a, resource b)" src="gmp.c" />
      <scope doc="Negates a number" ilk="function" name="gmp_neg" returns="resource" signature="gmp_neg(resource a)" src="gmp.c" />
      <scope doc="Calculates absolute value" ilk="function" name="gmp_abs" returns="resource" signature="gmp_abs(resource a)" src="gmp.c" />
      <scope doc="Calculates factorial function" ilk="function" name="gmp_fact" returns="resource" signature="gmp_fact(int a)" src="gmp.c" />
      <scope doc="Raise base to power exp" ilk="function" name="gmp_pow" returns="resource" signature="gmp_pow(resource base, int exp)" src="gmp.c" />
      <scope doc="Raise base to power exp and take result modulo mod" ilk="function" name="gmp_powm" returns="resource" signature="gmp_powm(resource base, resource exp, resource mod)" src="gmp.c" />
      <scope doc="Takes integer part of square root of a" ilk="function" name="gmp_sqrt" returns="resource" signature="gmp_sqrt(resource a)" src="gmp.c" />
      <scope doc="Square root with remainder" ilk="function" name="gmp_sqrtrem" returns="array" signature="gmp_sqrtrem(resource a)" src="gmp.c" />
      <scope doc="Checks if a is an exact square" ilk="function" name="gmp_perfect_square" returns="bool" signature="gmp_perfect_square(resource a)" src="gmp.c" />
      <scope doc="Checks if a is probably prime" ilk="function" name="gmp_prob_prime" returns="int" signature="gmp_prob_prime(resource a[, int reps])" src="gmp.c" />
      <scope doc="Computes greatest common denominator gcd of a and b" ilk="function" name="gmp_gcd" returns="resource" signature="gmp_gcd(resource a, resource b)" src="gmp.c" />
      <scope doc="Computes G S and T such that AS BT G gcd&apos; A B" ilk="function" name="gmp_gcdext" returns="array" signature="gmp_gcdext(resource a, resource b)" src="gmp.c" />
      <scope doc="Computes the inverse of a modulo b" ilk="function" name="gmp_invert" returns="resource" signature="gmp_invert(resource a, resource b)" src="gmp.c" />
      <scope doc="Computes Jacobi symbol" ilk="function" name="gmp_jacobi" returns="int" signature="gmp_jacobi(resource a, resource b)" src="gmp.c" />
      <scope doc="Computes Legendre symbol" ilk="function" name="gmp_legendre" returns="int" signature="gmp_legendre(resource a, resource b)" src="gmp.c" />
      <scope doc="Compares two numbers" ilk="function" name="gmp_cmp" returns="int" signature="gmp_cmp(resource a, resource b)" src="gmp.c" />
      <scope doc="Gets the sign of the number" ilk="function" name="gmp_sign" returns="int" signature="gmp_sign(resource a)" src="gmp.c" />
      <scope doc="Gets random number" ilk="function" name="gmp_random" returns="resource" signature="gmp_random([int limiter])" src="gmp.c" />
      <scope doc="Calculates logical AND of a and b" ilk="function" name="gmp_and" returns="resource" signature="gmp_and(resource a, resource b)" src="gmp.c" />
      <scope doc="Calculates logical OR of a and b" ilk="function" name="gmp_or" returns="resource" signature="gmp_or(resource a, resource b)" src="gmp.c" />
      <scope doc="Calculates one&apos;s complement of a" ilk="function" name="gmp_com" returns="resource" signature="gmp_com(resource a)" src="gmp.c" />
      <scope doc="Finds next prime of a" ilk="function" name="gmp_nextprime" returns="resource" signature="gmp_nextprime(resource a)" src="gmp.c" />
      <scope doc="Calculates logical exclusive OR of a and b" ilk="function" name="gmp_xor" returns="resource" signature="gmp_xor(resource a, resource b)" src="gmp.c" />
      <scope doc="Sets or clear bit in a" ilk="function" name="gmp_setbit" returns="void" signature="gmp_setbit(resource &amp;a, int index[, bool set_clear])" src="gmp.c" />
      <scope doc="Clears bit in a" ilk="function" name="gmp_clrbit" returns="void" signature="gmp_clrbit(resource &amp;a, int index)" src="gmp.c" />
      <scope doc="Calculates the population count of a" ilk="function" name="gmp_popcount" returns="int" signature="gmp_popcount(resource a)" src="gmp.c" />
      <scope doc="Calculates hamming distance between a and b" ilk="function" name="gmp_hamdist" returns="int" signature="gmp_hamdist(resource a, resource b)" src="gmp.c" />
      <scope doc="Finds first zero bit" ilk="function" name="gmp_scan0" returns="int" signature="gmp_scan0(resource a, int start)" src="gmp.c" />
      <scope doc="Finds first non-zero bit" ilk="function" name="gmp_scan1" returns="int" signature="gmp_scan1(resource a, int start)" src="gmp.c" />
      <scope doc="Generate a hash of a given input string Returns&#xA;lowercase hexits by default" ilk="function" name="hash" returns="string" signature="hash(string algo, string data[, bool raw_output = false])" src="hash.c" />
      <scope doc="Generate a hash of a given file Returns lowercase&#xA;hexits by default" ilk="function" name="hash_file" returns="string" signature="hash_file(string algo, string filename[, bool raw_output = false])" src="hash.c" />
      <scope doc="Generate a hash of a given input string with a key&#xA;using HMAC Returns lowercase hexits by default" ilk="function" name="hash_hmac" returns="string" signature="hash_hmac(string algo, string data, string key[, bool raw_output = false])" src="hash.c" />
      <scope doc="Generate a hash of a given file with a key using HMAC&#xA;Returns lowercase hexits by default" ilk="function" name="hash_hmac_file" returns="string" signature="hash_hmac_file(string algo, string filename, string key[, bool raw_output = false])" src="hash.c" />
      <scope doc="Initialize a hashing context" ilk="function" name="hash_init" returns="resource" signature="hash_init(string algo[, int options, string key])" src="hash.c" />
      <scope doc="Pump data into the hashing algorithm" ilk="function" name="hash_update" returns="bool" signature="hash_update(resource context, string data)" src="hash.c" />
      <scope doc="Pump data into the hashing algorithm from an open&#xA;stream" ilk="function" name="hash_update_stream" returns="int" signature="hash_update_stream(resource context, resource handle[, integer length])" src="hash.c" />
      <scope doc="Pump data into the hashing algorithm from a file" ilk="function" name="hash_update_file" returns="bool" signature="hash_update_file(resource context, string filename[, resource context])" src="hash.c" />
      <scope doc="Output resulting digest" ilk="function" name="hash_final" returns="string" signature="hash_final(resource context[, bool raw_output=false])" src="hash.c" />
      <scope doc="Return a list of registered hashing algorithms" ilk="function" name="hash_algos" returns="array" signature="hash_algos(void)" src="hash.c" />
      <scope doc="Calculate the md hash of a string" ilk="function" name="md5" returns="string" signature="md5(string str, [ bool raw_output])" src="md5.c" />
      <scope doc="Calculate the md hash of given filename" ilk="function" name="md5_file" returns="string" signature="md5_file(string filename [, bool raw_output])" src="md5.c" />
      <scope doc="Calculate the sha hash of a string" ilk="function" name="sha1" returns="string" signature="sha1(string str [, bool raw_output])" src="sha1.c" />
      <scope doc="Calculate the sha hash of given filename" ilk="function" name="sha1_file" returns="string" signature="sha1_file(string filename [, bool raw_output])" src="sha1.c" />
      <scope doc="Returns the character count of str" ilk="function" name="iconv_strlen" returns="int" signature="iconv_strlen(string str [, string charset])" src="iconv.c" />
      <scope doc="Returns specified part of a string" ilk="function" name="iconv_substr" returns="string" signature="iconv_substr(string str, int offset, [int length, string charset])" src="iconv.c" />
      <scope doc="Finds position of first occurrence of needle within&#xA;part of haystack beginning with offset" ilk="function" name="iconv_strpos" returns="int" signature="iconv_strpos(string haystack, string needle [, int offset [, string charset]])" src="iconv.c" />
      <scope doc="Finds position of last occurrence of needle within part&#xA;of haystack beginning with offset" ilk="function" name="iconv_strrpos" returns="int" signature="iconv_strrpos(string haystack, string needle [, string charset])" src="iconv.c" />
      <scope doc="Composes a mime header field with field name and field&#xA;value in a specified scheme" ilk="function" name="iconv_mime_encode" returns="string" signature="iconv_mime_encode(string field_name, string field_value [, array preference])" src="iconv.c" />
      <scope doc="Decodes a mime header field" ilk="function" name="iconv_mime_decode" returns="string" signature="iconv_mime_decode(string encoded_string [, int mode, string charset])" src="iconv.c" />
      <scope doc="Decodes multiple mime header fields" ilk="function" name="iconv_mime_decode_headers" returns="array" signature="iconv_mime_decode_headers(string headers [, int mode, string charset])" src="iconv.c" />
      <scope doc="Returns str converted to the out charset character set" ilk="function" name="iconv" returns="string" signature="iconv(string in_charset, string out_charset, string str)" src="iconv.c" />
      <scope doc="Returns str in output buffer converted to the iconv&#xA;output encoding character set" ilk="function" name="ob_iconv_handler" returns="string" signature="ob_iconv_handler(string contents, int status)" src="iconv.c" />
      <scope doc="Sets internal encoding and output encoding for ob iconv&#xA;handler" ilk="function" name="iconv_set_encoding" returns="bool" signature="iconv_set_encoding(string type, string charset)" src="iconv.c" />
      <scope doc="Get internal encoding and output encoding for ob iconv&#xA;handler" ilk="function" name="iconv_get_encoding" returns="mixed" signature="iconv_get_encoding([string type])" src="iconv.c" />
      <scope doc="Open an IMAP stream to a mailbox" ilk="function" name="imap_open" returns="resource" signature="imap_open(string mailbox, string user, string password [, int options [, int n_retries]])" src="php_imap.c" />
      <scope doc="Reopen an IMAP stream to a new mailbox" ilk="function" name="imap_reopen" returns="bool" signature="imap_reopen(resource stream_id, string mailbox [, int options [, int n_retries]])" src="php_imap.c" />
      <scope doc="Append a new message to a specified mailbox" ilk="function" name="imap_append" returns="bool" signature="imap_append(resource stream_id, string folder, string message [, string options])" src="php_imap.c" />
      <scope doc="Gives the number of messages in the current mailbox" ilk="function" name="imap_num_msg" returns="int" signature="imap_num_msg(resource stream_id)" src="php_imap.c" />
      <scope doc="Check if the IMAP stream is still active" ilk="function" name="imap_ping" returns="bool" signature="imap_ping(resource stream_id)" src="php_imap.c" />
      <scope doc="Gives the number of recent messages in current mailbox" ilk="function" name="imap_num_recent" returns="int" signature="imap_num_recent(resource stream_id)" src="php_imap.c" />
      <scope doc="Returns the quota set to the mailbox account qroot" ilk="function" name="imap_get_quota" returns="array" signature="imap_get_quota(resource stream_id, string qroot)" src="php_imap.c" />
      <scope doc="Returns the quota set to the mailbox account mbox" ilk="function" name="imap_get_quotaroot" returns="array" signature="imap_get_quotaroot(resource stream_id, string mbox)" src="php_imap.c" />
      <scope doc="Will set the quota for qroot mailbox" ilk="function" name="imap_set_quota" returns="bool" signature="imap_set_quota(resource stream_id, string qroot, int mailbox_size)" src="php_imap.c" />
      <scope doc="Sets the ACL for a given mailbox" ilk="function" name="imap_setacl" returns="bool" signature="imap_setacl(resource stream_id, string mailbox, string id, string rights)" src="php_imap.c" />
      <scope doc="Gets the ACL for a given mailbox" ilk="function" name="imap_getacl" returns="array" signature="imap_getacl(resource stream_id, string mailbox)" src="php_imap.c" />
      <scope doc="Permanently delete all messages marked for deletion" ilk="function" name="imap_expunge" returns="bool" signature="imap_expunge(resource stream_id)" src="php_imap.c" />
      <scope doc="Close an IMAP stream" ilk="function" name="imap_close" returns="bool" signature="imap_close(resource stream_id [, int options])" src="php_imap.c" />
      <scope doc="Returns headers for all messages in a mailbox" ilk="function" name="imap_headers" returns="array" signature="imap_headers(resource stream_id)" src="php_imap.c" />
      <scope doc="Read the message body" ilk="function" name="imap_body" returns="string" signature="imap_body(resource stream_id, int msg_no [, int options])" src="php_imap.c" />
      <scope doc="Copy specified message to a mailbox" ilk="function" name="imap_mail_copy" returns="bool" signature="imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])" src="php_imap.c" />
      <scope doc="Move specified message to a mailbox" ilk="function" name="imap_mail_move" returns="bool" signature="imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])" src="php_imap.c" />
      <scope doc="Create a new mailbox" ilk="function" name="imap_createmailbox" returns="bool" signature="imap_createmailbox(resource stream_id, string mailbox)" src="php_imap.c" />
      <scope doc="Rename a mailbox" ilk="function" name="imap_renamemailbox" returns="bool" signature="imap_renamemailbox(resource stream_id, string old_name, string new_name)" src="php_imap.c" />
      <scope doc="Delete a mailbox" ilk="function" name="imap_deletemailbox" returns="bool" signature="imap_deletemailbox(resource stream_id, string mailbox)" src="php_imap.c" />
      <scope doc="Read the list of mailboxes" ilk="function" name="imap_list" returns="array" signature="imap_list(resource stream_id, string ref, string pattern)" src="php_imap.c" />
      <scope doc="Reads the list of mailboxes and returns a full array of&#xA;objects containing name attributes and delimiter" ilk="function" name="imap_getmailboxes" returns="array" signature="imap_getmailboxes(resource stream_id, string ref, string pattern)" src="php_imap.c" />
      <scope doc="Read list of mailboxes containing a certain string" ilk="function" name="imap_scan" returns="array" signature="imap_scan(resource stream_id, string ref, string pattern, string content)" src="php_imap.c" />
      <scope doc="Get mailbox properties" ilk="function" name="imap_check" returns="object" signature="imap_check(resource stream_id)" src="php_imap.c" />
      <scope doc="Mark a message for deletion" ilk="function" name="imap_delete" returns="bool" signature="imap_delete(resource stream_id, int msg_no [, int options])" src="php_imap.c" />
      <scope doc="Remove the delete flag from a message" ilk="function" name="imap_undelete" returns="bool" signature="imap_undelete(resource stream_id, int msg_no)" src="php_imap.c" />
      <scope doc="Read the headers of the message" ilk="function" name="imap_headerinfo" returns="object" signature="imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])" src="php_imap.c" />
      <scope doc="Parse a set of mail headers contained in a string and&#xA;return an object similar to imap headerinfo" ilk="function" name="imap_rfc822_parse_headers" returns="object" signature="imap_rfc822_parse_headers(string headers [, string default_host])" src="php_imap.c" />
      <scope doc="Return a list of subscribed mailboxes" ilk="function" name="imap_lsub" returns="array" signature="imap_lsub(resource stream_id, string ref, string pattern)" src="php_imap.c" />
      <scope doc="Return a list of subscribed mailboxes in the same&#xA;format as imap getmailboxes" ilk="function" name="imap_getsubscribed" returns="array" signature="imap_getsubscribed(resource stream_id, string ref, string pattern)" src="php_imap.c" />
      <scope doc="Subscribe to a mailbox" ilk="function" name="imap_subscribe" returns="bool" signature="imap_subscribe(resource stream_id, string mailbox)" src="php_imap.c" />
      <scope doc="Unsubscribe from a mailbox" ilk="function" name="imap_unsubscribe" returns="bool" signature="imap_unsubscribe(resource stream_id, string mailbox)" src="php_imap.c" />
      <scope doc="Read the full structure of a message" ilk="function" name="imap_fetchstructure" returns="object" signature="imap_fetchstructure(resource stream_id, int msg_no [, int options])" src="php_imap.c" />
      <scope doc="Get a specific body section" ilk="function" name="imap_fetchbody" returns="string" signature="imap_fetchbody(resource stream_id, int msg_no, string section [, int options])" src="php_imap.c" />
      <scope doc="Save a specific body section to a file" ilk="function" name="imap_savebody" returns="bool" signature="imap_savebody(resource stream_id, string" src="php_imap.c" />
      <scope doc="Decode BASE encoded text" ilk="function" name="imap_base64" returns="string" signature="imap_base64(string text)" src="php_imap.c" />
      <scope doc="Convert a quoted-printable string to an -bit string" ilk="function" name="imap_qprint" returns="string" signature="imap_qprint(string text)" src="php_imap.c" />
      <scope doc="Convert an -bit string to a quoted-printable string" ilk="function" name="imap_8bit" returns="string" signature="imap_8bit(string text)" src="php_imap.c" />
      <scope doc="Convert an bit string to a base string" ilk="function" name="imap_binary" returns="string" signature="imap_binary(string text)" src="php_imap.c" />
      <scope doc="Returns info about the current mailbox" ilk="function" name="imap_mailboxmsginfo" returns="object" signature="imap_mailboxmsginfo(resource stream_id)" src="php_imap.c" />
      <scope doc="Returns a properly formatted email address given the&#xA;mailbox host and personal info" ilk="function" name="imap_rfc822_write_address" returns="string" signature="imap_rfc822_write_address(string mailbox, string host, string personal)" src="php_imap.c" />
      <scope doc="Parses an address string" ilk="function" name="imap_rfc822_parse_adrlist" returns="array" signature="imap_rfc822_parse_adrlist(string address_string, string default_host)" src="php_imap.c" />
      <scope doc="Convert a mime-encoded text to UTF-" ilk="function" name="imap_utf8" returns="string" signature="imap_utf8(string mime_encoded_text)" src="php_imap.c" />
      <scope doc="Decode a modified UTF- string" ilk="function" name="imap_utf7_decode" returns="string" signature="imap_utf7_decode(string buf)" src="php_imap.c" />
      <scope doc="Encode a string in modified UTF-" ilk="function" name="imap_utf7_encode" returns="string" signature="imap_utf7_encode(string buf)" src="php_imap.c" />
      <scope doc="Sets flags on messages" ilk="function" name="imap_setflag_full" returns="bool" signature="imap_setflag_full(resource stream_id, string sequence, string flag [, int options])" src="php_imap.c" />
      <scope doc="Clears flags on messages" ilk="function" name="imap_clearflag_full" returns="bool" signature="imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])" src="php_imap.c" />
      <scope doc="Sort an array of message headers optionally including&#xA;only messages that meet specified criteria" ilk="function" name="imap_sort" returns="array" signature="imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])" src="php_imap.c" />
      <scope doc="Get the full unfiltered header for a message" ilk="function" name="imap_fetchheader" returns="string" signature="imap_fetchheader(resource stream_id, int msg_no [, int options])" src="php_imap.c" />
      <scope doc="Get the unique message id associated with a standard&#xA;sequential message number" ilk="function" name="imap_uid" returns="int" signature="imap_uid(resource stream_id, int msg_no)" src="php_imap.c" />
      <scope doc="Get the sequence number associated with a UID" ilk="function" name="imap_msgno" returns="int" signature="imap_msgno(resource stream_id, int unique_msg_id)" src="php_imap.c" />
      <scope doc="Get status info from a mailbox" ilk="function" name="imap_status" returns="object" signature="imap_status(resource stream_id, string mailbox, int options)" src="php_imap.c" />
      <scope doc="Read the structure of a specified body section of a&#xA;specific message" ilk="function" name="imap_bodystruct" returns="object" signature="imap_bodystruct(resource stream_id, int msg_no, string section)" src="php_imap.c" />
      <scope doc="Read an overview of the information in the headers of&#xA;the given message sequence" ilk="function" name="imap_fetch_overview" returns="array" signature="imap_fetch_overview(resource stream_id, int msg_no [, int options])" src="php_imap.c" />
      <scope doc="Create a MIME message based on given envelope and body&#xA;sections" ilk="function" name="imap_mail_compose" returns="string" signature="imap_mail_compose(array envelope, array body)" src="php_imap.c" />
      <scope doc="Send an email message" ilk="function" name="imap_mail" returns="bool" signature="imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])" src="php_imap.c" />
      <scope doc="Return a list of messages matching the given criteria" ilk="function" name="imap_search" returns="array" signature="imap_search(resource stream_id, string criteria [, int options [, string charset]])" src="php_imap.c" />
      <scope doc="Returns an array of all IMAP alerts that have been&#xA;generated since the last page load or since the last" ilk="function" name="imap_alerts" returns="array" signature="imap_alerts(void)" src="php_imap.c" />
      <scope doc="Returns an array of all IMAP errors generated since the&#xA;last page load or since the last imap errors call" ilk="function" name="imap_errors" returns="array" signature="imap_errors(void)" src="php_imap.c" />
      <scope doc="Returns the last error that was generated by an IMAP&#xA;function The error stack is NOT cleared after this call" ilk="function" name="imap_last_error" returns="string" signature="imap_last_error(void)" src="php_imap.c" />
      <scope doc="Decode mime header element in accordance with RFC and&#xA;return array of objects containing &apos;charset&apos; encoding&#xA;and decoded &apos;text&apos;" ilk="function" name="imap_mime_header_decode" returns="array" signature="imap_mime_header_decode(string str)" src="php_imap.c" />
      <scope doc="Return threaded by REFERENCES tree" ilk="function" name="imap_thread" returns="array" signature="imap_thread(resource stream_id [, int options])" src="php_imap.c" />
      <scope doc="Set or fetch imap timeout" ilk="function" name="imap_timeout" returns="mixed" signature="imap_timeout(int timeout_type [, int timeout])" src="php_imap.c" />
      <scope doc="Create blob for adding data" ilk="function" name="ibase_blob_create" returns="resource" signature="ibase_blob_create([resource link_identifier])" src="ibase_blobs.c" />
      <scope doc="Open blob for retrieving data parts" ilk="function" name="ibase_blob_open" returns="resource" signature="ibase_blob_open([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" />
      <scope doc="Add data into created blob" ilk="function" name="ibase_blob_add" returns="bool" signature="ibase_blob_add(resource blob_handle, string data)" src="ibase_blobs.c" />
      <scope doc="Get len bytes data from open blob" ilk="function" name="ibase_blob_get" returns="string" signature="ibase_blob_get(resource blob_handle, int len)" src="ibase_blobs.c" />
      <scope doc="Close blob" ilk="function" name="ibase_blob_close" returns="string" signature="ibase_blob_close(resource blob_handle)" src="ibase_blobs.c" />
      <scope doc="Cancel creating blob" ilk="function" name="ibase_blob_cancel" returns="bool" signature="ibase_blob_cancel(resource blob_handle)" src="ibase_blobs.c" />
      <scope doc="Return blob length and other useful info" ilk="function" name="ibase_blob_info" returns="array" signature="ibase_blob_info([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" />
      <scope doc="Output blob contents to browser" ilk="function" name="ibase_blob_echo" returns="bool" signature="ibase_blob_echo([ resource link_identifier, ] string blob_id)" src="ibase_blobs.c" />
      <scope doc="Create blob copy file in it and close it" ilk="function" name="ibase_blob_import" returns="string" signature="ibase_blob_import([ resource link_identifier, ] resource file)" src="ibase_blobs.c" />
      <scope doc="Waits for any one of the passed Interbase events to be&#xA;posted by the database and returns its name" ilk="function" name="ibase_wait_event" returns="string" signature="ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])" src="ibase_events.c" />
      <scope doc="Register the callback for handling each of the named&#xA;events" ilk="function" name="ibase_set_event_handler" returns="resource" signature="ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])" src="ibase_events.c" />
      <scope doc="Frees the event handler set by ibase set event handler" ilk="function" name="ibase_free_event_handler" returns="bool" signature="ibase_free_event_handler(resource event)" src="ibase_events.c" />
      <scope doc="Execute a query" ilk="function" name="ibase_query" returns="mixed" signature="ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])" src="ibase_query.c" />
      <scope doc="Returns the number of rows affected by the previous&#xA;INSERT UPDATE or DELETE statement" ilk="function" name="ibase_affected_rows" returns="int" signature="ibase_affected_rows( [ resource link_identifier ] )" src="ibase_query.c" />
      <scope doc="Return the number of rows that are available in a&#xA;result" ilk="function" name="ibase_num_rows" returns="int" signature="ibase_num_rows( resource result_identifier )" src="ibase_query.c" />
      <scope doc="Fetch a row from the results of a query" ilk="function" name="ibase_fetch_row" returns="array" signature="ibase_fetch_row(resource result [, int fetch_flags])" src="ibase_query.c" />
      <scope doc="Fetch a row from the results of a query" ilk="function" name="ibase_fetch_assoc" returns="array" signature="ibase_fetch_assoc(resource result [, int fetch_flags])" src="ibase_query.c" />
      <scope doc="Fetch a object from the results of a query" ilk="function" name="ibase_fetch_object" returns="object" signature="ibase_fetch_object(resource result [, int fetch_flags])" src="ibase_query.c" />
      <scope doc="Assign a name to a result for use with WHERE CURRENT OF&#xA;name statements" ilk="function" name="ibase_name_result" returns="bool" signature="ibase_name_result(resource result, string name)" src="ibase_query.c" />
      <scope doc="Free the memory used by a result" ilk="function" name="ibase_free_result" returns="bool" signature="ibase_free_result(resource result)" src="ibase_query.c" />
      <scope doc="Prepare a query for later execution" ilk="function" name="ibase_prepare" returns="resource" signature="ibase_prepare([resource link_identifier, ] string query)" src="ibase_query.c" />
      <scope doc="Execute a previously prepared query" ilk="function" name="ibase_execute" returns="mixed" signature="ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])" src="ibase_query.c" />
      <scope doc="Free memory used by a query" ilk="function" name="ibase_free_query" returns="bool" signature="ibase_free_query(resource query)" src="ibase_query.c" />
      <scope doc="Get the number of fields in result" ilk="function" name="ibase_num_fields" returns="int" signature="ibase_num_fields(resource query_result)" src="ibase_query.c" />
      <scope doc="Get information about a field" ilk="function" name="ibase_field_info" returns="array" signature="ibase_field_info(resource query_result, int field_number)" src="ibase_query.c" />
      <scope doc="Get the number of params in a prepared query" ilk="function" name="ibase_num_params" returns="int" signature="ibase_num_params(resource query)" src="ibase_query.c" />
      <scope doc="Get information about a parameter" ilk="function" name="ibase_param_info" returns="array" signature="ibase_param_info(resource query, int field_number)" src="ibase_query.c" />
      <scope doc="Add a user to security database" ilk="function" name="ibase_add_user" returns="bool" signature="ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" />
      <scope doc="Modify a user in security database" ilk="function" name="ibase_modify_user" returns="bool" signature="ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" />
      <scope doc="Delete a user from security database" ilk="function" name="ibase_delete_user" returns="bool" signature="ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" src="ibase_service.c" />
      <scope doc="Connect to the service manager" ilk="function" name="ibase_service_attach" returns="resource" signature="ibase_service_attach(string host, string dba_username, string dba_password)" src="ibase_service.c" />
      <scope doc="Disconnect from the service manager" ilk="function" name="ibase_service_detach" returns="bool" signature="ibase_service_detach(resource service_handle)" src="ibase_service.c" />
      <scope doc="Initiates a backup task in the service manager and&#xA;returns immediately" ilk="function" name="ibase_backup" returns="mixed" signature="ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])" src="ibase_service.c" />
      <scope doc="Initiates a restore task in the service manager and&#xA;returns immediately" ilk="function" name="ibase_restore" returns="mixed" signature="ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])" src="ibase_service.c" />
      <scope doc="Execute a maintenance command on the database server" ilk="function" name="ibase_maintain_db" returns="bool" signature="ibase_maintain_db(resource service_handle, string db, int action [, int argument])" src="ibase_service.c" />
      <scope doc="Request statistics about a database" ilk="function" name="ibase_db_info" returns="string" signature="ibase_db_info(resource service_handle, string db, int action [, int argument])" src="ibase_service.c" />
      <scope doc="Request information about a database server" ilk="function" name="ibase_server_info" returns="string" signature="ibase_server_info(resource service_handle, int action)" src="ibase_service.c" />
      <scope doc="Return error message" ilk="function" name="ibase_errmsg" returns="string" signature="ibase_errmsg(void)" src="interbase.c" />
      <scope doc="Return error code" ilk="function" name="ibase_errcode" returns="int" signature="ibase_errcode(void)" src="interbase.c" />
      <scope doc="Open a connection to an InterBase database" ilk="function" name="ibase_connect" returns="resource" signature="ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" src="interbase.c" />
      <scope doc="Open a persistent connection to an InterBase database" ilk="function" name="ibase_pconnect" returns="resource" signature="ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" src="interbase.c" />
      <scope doc="Close an InterBase connection" ilk="function" name="ibase_close" returns="bool" signature="ibase_close([resource link_identifier])" src="interbase.c" />
      <scope doc="Drop an InterBase database" ilk="function" name="ibase_drop_db" returns="bool" signature="ibase_drop_db([resource link_identifier])" src="interbase.c" />
      <scope doc="Start a transaction over one or several databases" ilk="function" name="ibase_trans" returns="resource" signature="ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])" src="interbase.c" />
      <scope doc="Commit transaction" ilk="function" name="ibase_commit" returns="bool" signature="ibase_commit( resource link_identifier )" src="interbase.c" />
      <scope doc="Rollback transaction" ilk="function" name="ibase_rollback" returns="bool" signature="ibase_rollback( resource link_identifier )" src="interbase.c" />
      <scope doc="Commit transaction and retain the transaction context" ilk="function" name="ibase_commit_ret" returns="bool" signature="ibase_commit_ret( resource link_identifier )" src="interbase.c" />
      <scope doc="Rollback transaction and retain the transaction context" ilk="function" name="ibase_rollback_ret" returns="bool" signature="ibase_rollback_ret( resource link_identifier )" src="interbase.c" />
      <scope doc="Increments the named generator and returns its new&#xA;value" ilk="function" name="ibase_gen_id" returns="int" signature="ibase_gen_id(string generator [, int increment [, resource link_identifier ]])" src="interbase.c" />
      <scope doc="Returns the JSON representation of a value" ilk="function" name="json_encode" returns="string" signature="json_encode(mixed data)" src="json.c" />
      <scope doc="Decodes the JSON representation into a PHP value" ilk="function" name="json_decode" returns="mixed" signature="json_decode(string json [, bool assoc])" src="json.c" />
      <scope doc="Connect to an LDAP server" ilk="function" name="ldap_connect" returns="resource" signature="ldap_connect([string host [, int port]])" src="ldap.c" />
      <scope doc="Bind to LDAP directory" ilk="function" name="ldap_bind" returns="bool" signature="ldap_bind(resource link [, string dn, string password])" src="ldap.c" />
      <scope doc="Bind to LDAP directory using SASL" ilk="function" name="ldap_sasl_bind" returns="bool" signature="ldap_sasl_bind(resource link [, string binddn, string password, string sasl_mech, string sasl_realm, string sasl_authc_id, string sasl_authz_id, string props])" src="ldap.c" />
      <scope doc="Unbind from LDAP directory" ilk="function" name="ldap_unbind" returns="bool" signature="ldap_unbind(resource link)" src="ldap.c" />
      <scope doc="Read an entry" ilk="function" name="ldap_read" returns="resource" signature="ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" src="ldap.c" />
      <scope doc="Single-level search" ilk="function" name="ldap_list" returns="resource" signature="ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" src="ldap.c" />
      <scope doc="Search LDAP tree under base dn" ilk="function" name="ldap_search" returns="resource" signature="ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" src="ldap.c" />
      <scope doc="Free result memory" ilk="function" name="ldap_free_result" returns="bool" signature="ldap_free_result(resource result)" src="ldap.c" />
      <scope doc="Count the number of entries in a search result" ilk="function" name="ldap_count_entries" returns="int" signature="ldap_count_entries(resource link, resource result)" src="ldap.c" />
      <scope doc="Return first result id" ilk="function" name="ldap_first_entry" returns="resource" signature="ldap_first_entry(resource link, resource result)" src="ldap.c" />
      <scope doc="Get next result entry" ilk="function" name="ldap_next_entry" returns="resource" signature="ldap_next_entry(resource link, resource result_entry)" src="ldap.c" />
      <scope doc="Get all result entries" ilk="function" name="ldap_get_entries" returns="array" signature="ldap_get_entries(resource link, resource result)" src="ldap.c" />
      <scope doc="Return first attribute" ilk="function" name="ldap_first_attribute" returns="string" signature="ldap_first_attribute(resource link, resource result_entry)" src="ldap.c" />
      <scope doc="Get the next attribute in result" ilk="function" name="ldap_next_attribute" returns="string" signature="ldap_next_attribute(resource link, resource result_entry)" src="ldap.c" />
      <scope doc="Get attributes from a search result entry" ilk="function" name="ldap_get_attributes" returns="array" signature="ldap_get_attributes(resource link, resource result_entry)" src="ldap.c" />
      <scope doc="Get all values with lengths from a result entry" ilk="function" name="ldap_get_values_len" returns="array" signature="ldap_get_values_len(resource link, resource result_entry, string attribute)" src="ldap.c" />
      <scope doc="Get the DN of a result entry" ilk="function" name="ldap_get_dn" returns="string" signature="ldap_get_dn(resource link, resource result_entry)" src="ldap.c" />
      <scope doc="Splits DN into its component parts" ilk="function" name="ldap_explode_dn" returns="array" signature="ldap_explode_dn(string dn, int with_attrib)" src="ldap.c" />
      <scope doc="Convert DN to User Friendly Naming format" ilk="function" name="ldap_dn2ufn" returns="string" signature="ldap_dn2ufn(string dn)" src="ldap.c" />
      <scope doc="Add entries to LDAP directory" ilk="function" name="ldap_add" returns="bool" signature="ldap_add(resource link, string dn, array entry)" src="ldap.c" />
      <scope doc="Replace attribute values with new ones" ilk="function" name="ldap_mod_replace" returns="bool" signature="ldap_mod_replace(resource link, string dn, array entry)" src="ldap.c" />
      <scope doc="Add attribute values to current" ilk="function" name="ldap_mod_add" returns="bool" signature="ldap_mod_add(resource link, string dn, array entry)" src="ldap.c" />
      <scope doc="Delete attribute values" ilk="function" name="ldap_mod_del" returns="bool" signature="ldap_mod_del(resource link, string dn, array entry)" src="ldap.c" />
      <scope doc="Delete an entry from a directory" ilk="function" name="ldap_delete" returns="bool" signature="ldap_delete(resource link, string dn)" src="ldap.c" />
      <scope doc="Get the current ldap error number" ilk="function" name="ldap_errno" returns="int" signature="ldap_errno(resource link)" src="ldap.c" />
      <scope doc="Convert error number to error string" ilk="function" name="ldap_err2str" returns="string" signature="ldap_err2str(int errno)" src="ldap.c" />
      <scope doc="Get the current ldap error string" ilk="function" name="ldap_error" returns="string" signature="ldap_error(resource link)" src="ldap.c" />
      <scope doc="Determine if an entry has a specific value for one of&#xA;its attributes" ilk="function" name="ldap_compare" returns="bool" signature="ldap_compare(resource link, string dn, string attr, string value)" src="ldap.c" />
      <scope doc="Sort LDAP result entries" ilk="function" name="ldap_sort" returns="bool" signature="ldap_sort(resource link, resource result, string sortfilter)" src="ldap.c" />
      <scope doc="Get the current value of various session-wide&#xA;parameters" ilk="function" name="ldap_get_option" returns="bool" signature="ldap_get_option(resource link, int option, mixed retval)" src="ldap.c" />
      <scope doc="Set the value of various session-wide parameters" ilk="function" name="ldap_set_option" returns="bool" signature="ldap_set_option(resource link, int option, mixed newval)" src="ldap.c" />
      <scope doc="Extract information from result" ilk="function" name="ldap_parse_result" returns="bool" signature="ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)" src="ldap.c" />
      <scope doc="Return first reference" ilk="function" name="ldap_first_reference" returns="resource" signature="ldap_first_reference(resource link, resource result)" src="ldap.c" />
      <scope doc="Get next reference" ilk="function" name="ldap_next_reference" returns="resource" signature="ldap_next_reference(resource link, resource reference_entry)" src="ldap.c" />
      <scope doc="Extract information from reference entry" ilk="function" name="ldap_parse_reference" returns="bool" signature="ldap_parse_reference(resource link, resource reference_entry, array referrals)" src="ldap.c" />
      <scope doc="Modify the name of an entry" ilk="function" name="ldap_rename" returns="bool" signature="ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn)" src="ldap.c" />
      <scope doc="Start TLS" ilk="function" name="ldap_start_tls" returns="bool" signature="ldap_start_tls(resource link)" src="ldap.c" />
      <scope doc="Set a callback function to do re-binds on referral&#xA;chasing" ilk="function" name="ldap_set_rebind_proc" returns="bool" signature="ldap_set_rebind_proc(resource link, string callback)" src="ldap.c" />
      <scope doc="Translate t characters to characters" ilk="function" name="ldap_t61_to_8859" returns="string" signature="ldap_t61_to_8859(string value)" src="ldap.c" />
      <scope doc="Translate characters to t characters" ilk="function" name="ldap_8859_to_t61" returns="string" signature="ldap_8859_to_t61(string value)" src="ldap.c" />
      <scope doc="Set the streams context for the next libxml document&#xA;load or write" ilk="function" name="libxml_set_streams_context" returns="void" signature="libxml_set_streams_context(resource streams_context)" src="libxml.c" />
      <scope doc="Disable libxml errors and allow user to fetch error&#xA;information as needed" ilk="function" name="libxml_use_internal_errors" returns="void" signature="libxml_use_internal_errors([boolean use_errors])" src="libxml.c" />
      <scope doc="Retrieve last error from libxml" ilk="function" name="libxml_get_last_error" returns="object" signature="libxml_get_last_error()" src="libxml.c" />
      <scope doc="Retrieve array of errors" ilk="function" name="libxml_get_errors" returns="object" signature="libxml_get_errors()" src="libxml.c" />
      <scope doc="Clear last error from libxml" ilk="function" name="libxml_clear_errors" returns="void" signature="libxml_clear_errors()" src="libxml.c" />
      <scope doc="Sets the current language or Returns the current&#xA;language as a string" ilk="function" name="mb_language" returns="string" signature="mb_language([string language])" src="mbstring.c" />
      <scope doc="Sets the current internal encoding or Returns the&#xA;current internal encoding as a string" ilk="function" name="mb_internal_encoding" returns="string" signature="mb_internal_encoding([string encoding])" src="mbstring.c" />
      <scope doc="Returns the input encoding" ilk="function" name="mb_http_input" returns="mixed" signature="mb_http_input([string type])" src="mbstring.c" />
      <scope doc="Sets the current output encoding or returns the current&#xA;output encoding as a string" ilk="function" name="mb_http_output" returns="string" signature="mb_http_output([string encoding])" src="mbstring.c" />
      <scope doc="Sets the current detect order or Return the current&#xA;detect order as a array" ilk="function" name="mb_detect_order" returns="array" signature="mb_detect_order([mixed encoding-list])" src="mbstring.c" />
      <scope doc="Sets the current substitute character or returns the&#xA;current substitute character" ilk="function" name="mb_substitute_character" returns="mixed" signature="mb_substitute_character([mixed substchar])" src="mbstring.c" />
      <scope doc="Return the preferred MIME name charset as a string" ilk="function" name="mb_preferred_mime_name" returns="string" signature="mb_preferred_mime_name(string encoding)" src="mbstring.c" />
      <scope doc="Parses GET POST COOKIE data and sets global variables" ilk="function" name="mb_parse_str" returns="bool" signature="mb_parse_str(string encoded_string [, array result])" src="mbstring.c" />
      <scope doc="Returns string in output buffer converted to the http&#xA;output encoding" ilk="function" name="mb_output_handler" returns="string" signature="mb_output_handler(string contents, int status)" src="mbstring.c" />
      <scope doc="Get character numbers of a string" ilk="function" name="mb_strlen" returns="int" signature="mb_strlen(string str [, string encoding])" src="mbstring.c" />
      <scope doc="Find position of first occurrence of a string within&#xA;another" ilk="function" name="mb_strpos" returns="int" signature="mb_strpos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" />
      <scope doc="Find position of last occurrence of a string within&#xA;another" ilk="function" name="mb_strrpos" returns="int" signature="mb_strrpos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" />
      <scope doc="Finds position of first occurrence of a string within&#xA;another case insensitive" ilk="function" name="mb_stripos" returns="int" signature="mb_stripos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" />
      <scope doc="Finds position of last occurrence of a string within&#xA;another case insensitive" ilk="function" name="mb_strripos" returns="int" signature="mb_strripos(string haystack, string needle [, int offset [, string encoding]])" src="mbstring.c" />
      <scope doc="Finds first occurrence of a string within another" ilk="function" name="mb_strstr" returns="string" signature="mb_strstr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" />
      <scope doc="Finds the last occurrence of a character in a string&#xA;within another" ilk="function" name="mb_strrchr" returns="string" signature="mb_strrchr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" />
      <scope doc="Finds first occurrence of a string within another case&#xA;insensitive" ilk="function" name="mb_stristr" returns="string" signature="mb_stristr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" />
      <scope doc="Finds the last occurrence of a character in a string&#xA;within another case insensitive" ilk="function" name="mb_strrichr" returns="string" signature="mb_strrichr(string haystack, string needle[, bool part[, string encoding]])" src="mbstring.c" />
      <scope doc="Count the number of substring occurrences" ilk="function" name="mb_substr_count" returns="int" signature="mb_substr_count(string haystack, string needle [, string encoding])" src="mbstring.c" />
      <scope doc="Returns part of a string" ilk="function" name="mb_substr" returns="string" signature="mb_substr(string str, int start [, int length [, string encoding]])" src="mbstring.c" />
      <scope doc="Returns part of a string" ilk="function" name="mb_strcut" returns="string" signature="mb_strcut(string str, int start [, int length [, string encoding]])" src="mbstring.c" />
      <scope doc="Gets terminal width of a string" ilk="function" name="mb_strwidth" returns="int" signature="mb_strwidth(string str [, string encoding])" src="mbstring.c" />
      <scope doc="Trim the string in terminal width" ilk="function" name="mb_strimwidth" returns="string" signature="mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])" src="mbstring.c" />
      <scope doc="Returns converted string in desired encoding" ilk="function" name="mb_convert_encoding" returns="string" signature="mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])" src="mbstring.c" />
      <scope doc="Returns a case-folded version of sourcestring" ilk="function" name="mb_convert_case" returns="string" signature="mb_convert_case(string sourcestring, int mode [, string encoding])" src="mbstring.c" />
      <scope doc="Returns a uppercased version of sourcestring" ilk="function" name="mb_strtoupper" returns="string" signature="mb_strtoupper(string sourcestring [, string encoding])" src="mbstring.c" />
      <scope doc="Returns a lowercased version of sourcestring" ilk="function" name="mb_strtolower" returns="string" signature="mb_strtolower(string sourcestring [, string encoding])" src="mbstring.c" />
      <scope doc="Encodings of the given string is returned as a string" ilk="function" name="mb_detect_encoding" returns="string" signature="mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])" src="mbstring.c" />
      <scope doc="Returns an array of all supported entity encodings" ilk="function" name="mb_list_encodings" returns="mixed" signature="mb_list_encodings()" src="mbstring.c" />
      <scope doc="Returns an array of all supported alias encodings" ilk="function" name="mb_list_encodings_alias_names" returns="array" signature="mb_list_encodings_alias_names([string encoding])" src="mbstring.c" />
      <scope doc="Returns an array or string of all supported mime names" ilk="function" name="mb_list_mime_names" returns="mixed" signature="mb_list_mime_names([string encoding])" src="mbstring.c" />
      <scope doc="Converts the string to MIME encoded-word in the format&#xA;of charset B" ilk="function" name="mb_encode_mimeheader" returns="string" signature="mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed [, int indent]]]])" src="mbstring.c" />
      <scope doc="Decodes the MIME encoded-word in the string" ilk="function" name="mb_decode_mimeheader" returns="string" signature="mb_decode_mimeheader(string string)" src="mbstring.c" />
      <scope doc="Conversion between full-width character and half-width&#xA;character Japanese" ilk="function" name="mb_convert_kana" returns="string" signature="mb_convert_kana(string str [, string option] [, string encoding])" src="mbstring.c" />
      <scope doc="Converts the string resource in variables to desired&#xA;encoding" ilk="function" name="mb_convert_variables" returns="string" signature="mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])" src="mbstring.c" />
      <scope doc="Converts specified characters to HTML numeric entities" ilk="function" name="mb_encode_numericentity" returns="string" signature="mb_encode_numericentity(string string, array convmap [, string encoding])" src="mbstring.c" />
      <scope doc="Converts HTML numeric entities to character code" ilk="function" name="mb_decode_numericentity" returns="string" signature="mb_decode_numericentity(string string, array convmap [, string encoding])" src="mbstring.c" />
      <scope doc="Sends an email message with MIME scheme" ilk="function" name="mb_send_mail" returns="int" signature="mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" src="mbstring.c" />
      <scope doc="Returns the current settings of mbstring" ilk="function" name="mb_get_info" returns="mixed" signature="mb_get_info([string type])" src="mbstring.c" />
      <scope doc="Check if the string is valid for the specified encoding" ilk="function" name="mb_check_encoding" returns="bool" signature="mb_check_encoding([string var[, string encoding]])" src="mbstring.c" />
      <scope doc="Returns the current encoding for regex as a string" ilk="function" name="mb_regex_encoding" returns="string" signature="mb_regex_encoding([string encoding])" src="php_mbregex.c" />
      <scope doc="Regular expression match for multibyte string" ilk="function" name="mb_ereg" returns="int" signature="mb_ereg(string pattern, string string [, array registers])" src="php_mbregex.c" />
      <scope doc="Case-insensitive regular expression match for multibyte&#xA;string" ilk="function" name="mb_eregi" returns="int" signature="mb_eregi(string pattern, string string [, array registers])" src="php_mbregex.c" />
      <scope doc="Replace regular expression for multibyte string" ilk="function" name="mb_ereg_replace" returns="string" signature="mb_ereg_replace(string pattern, string replacement, string string [, string option])" src="php_mbregex.c" />
      <scope doc="Case insensitive replace regular expression for&#xA;multibyte string" ilk="function" name="mb_eregi_replace" returns="string" signature="mb_eregi_replace(string pattern, string replacement, string string)" src="php_mbregex.c" />
      <scope doc="split multibyte string into array by regular expression" ilk="function" name="mb_split" returns="array" signature="mb_split(string pattern, string string [, int limit])" src="php_mbregex.c" />
      <scope doc="Regular expression match for multibyte string" ilk="function" name="mb_ereg_match" returns="bool" signature="mb_ereg_match(string pattern, string string [,string option])" src="php_mbregex.c" />
      <scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search" returns="bool" signature="mb_ereg_search([string pattern[, string option]])" src="php_mbregex.c" />
      <scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search_pos" returns="array" signature="mb_ereg_search_pos([string pattern[, string option]])" src="php_mbregex.c" />
      <scope doc="Regular expression search for multibyte string" ilk="function" name="mb_ereg_search_regs" returns="array" signature="mb_ereg_search_regs([string pattern[, string option]])" src="php_mbregex.c" />
      <scope doc="Initialize string and regular expression for search" ilk="function" name="mb_ereg_search_init" returns="bool" signature="mb_ereg_search_init(string string [, string pattern[, string option]])" src="php_mbregex.c" />
      <scope doc="Get matched substring of the last time" ilk="function" name="mb_ereg_search_getregs" returns="array" signature="mb_ereg_search_getregs(void)" src="php_mbregex.c" />
      <scope doc="Get search start position" ilk="function" name="mb_ereg_search_getpos" returns="int" signature="mb_ereg_search_getpos(void)" src="php_mbregex.c" />
      <scope doc="Set search start position" ilk="function" name="mb_ereg_search_setpos" returns="bool" signature="mb_ereg_search_setpos(int position)" src="php_mbregex.c" />
      <scope doc="Set or get the default options for mbregex functions" ilk="function" name="mb_regex_set_options" returns="string" signature="mb_regex_set_options([string options])" src="php_mbregex.c" />
      <scope doc="Opens the module of the algorithm and the mode to be&#xA;used" ilk="function" name="mcrypt_module_open" returns="resource" signature="mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)" src="mcrypt.c" />
      <scope doc="This function initializes all buffers for the specific&#xA;module" ilk="function" name="mcrypt_generic_init" returns="int" signature="mcrypt_generic_init(resource td, string key, string iv)" src="mcrypt.c" />
      <scope doc="This function encrypts the plaintext" ilk="function" name="mcrypt_generic" returns="string" signature="mcrypt_generic(resource td, string data)" src="mcrypt.c" />
      <scope doc="This function decrypts the plaintext" ilk="function" name="mdecrypt_generic" returns="string" signature="mdecrypt_generic(resource td, string data)" src="mcrypt.c" />
      <scope doc="This function decrypts the crypttext" ilk="function" name="mcrypt_enc_get_supported_key_sizes" returns="array" signature="mcrypt_enc_get_supported_key_sizes(resource td)" src="mcrypt.c" />
      <scope doc="This function runs the self test on the algorithm&#xA;specified by the descriptor td" ilk="function" name="mcrypt_enc_self_test" returns="int" signature="mcrypt_enc_self_test(resource td)" src="mcrypt.c" />
      <scope doc="Free the descriptor td" ilk="function" name="mcrypt_module_close" returns="bool" signature="mcrypt_module_close(resource td)" src="mcrypt.c" />
      <scope doc="This function terminates encrypt specified by the&#xA;descriptor td" ilk="function" name="mcrypt_generic_deinit" returns="bool" signature="mcrypt_generic_deinit(resource td)" src="mcrypt.c" />
      <scope doc="Returns TRUE if the mode is for use with block&#xA;algorithms" ilk="function" name="mcrypt_enc_is_block_algorithm_mode" returns="bool" signature="mcrypt_enc_is_block_algorithm_mode(resource td)" src="mcrypt.c" />
      <scope doc="Returns TRUE if the alrogithm is a block algorithms" ilk="function" name="mcrypt_enc_is_block_algorithm" returns="bool" signature="mcrypt_enc_is_block_algorithm(resource td)" src="mcrypt.c" />
      <scope doc="Returns TRUE if the mode outputs blocks" ilk="function" name="mcrypt_enc_is_block_mode" returns="bool" signature="mcrypt_enc_is_block_mode(resource td)" src="mcrypt.c" />
      <scope doc="Returns the block size of the cipher specified by the&#xA;descriptor td" ilk="function" name="mcrypt_enc_get_block_size" returns="int" signature="mcrypt_enc_get_block_size(resource td)" src="mcrypt.c" />
      <scope doc="Returns the maximum supported key size in bytes of the&#xA;algorithm specified by the descriptor td" ilk="function" name="mcrypt_enc_get_key_size" returns="int" signature="mcrypt_enc_get_key_size(resource td)" src="mcrypt.c" />
      <scope doc="Returns the size of the IV in bytes of the algorithm&#xA;specified by the descriptor td" ilk="function" name="mcrypt_enc_get_iv_size" returns="int" signature="mcrypt_enc_get_iv_size(resource td)" src="mcrypt.c" />
      <scope doc="Returns the name of the algorithm specified by the&#xA;descriptor td" ilk="function" name="mcrypt_enc_get_algorithms_name" returns="string" signature="mcrypt_enc_get_algorithms_name(resource td)" src="mcrypt.c" />
      <scope doc="Returns the name of the mode specified by the&#xA;descriptor td" ilk="function" name="mcrypt_enc_get_modes_name" returns="string" signature="mcrypt_enc_get_modes_name(resource td)" src="mcrypt.c" />
      <scope doc="Does a self test of the module module" ilk="function" name="mcrypt_module_self_test" returns="bool" signature="mcrypt_module_self_test(string algorithm [, string lib_dir])" src="mcrypt.c" />
      <scope doc="Returns TRUE if the mode is for use with block&#xA;algorithms" ilk="function" name="mcrypt_module_is_block_algorithm_mode" returns="bool" signature="mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])" src="mcrypt.c" />
      <scope doc="Returns TRUE if the algorithm is a block algorithm" ilk="function" name="mcrypt_module_is_block_algorithm" returns="bool" signature="mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])" src="mcrypt.c" />
      <scope doc="Returns TRUE if the mode outputs blocks of bytes" ilk="function" name="mcrypt_module_is_block_mode" returns="bool" signature="mcrypt_module_is_block_mode(string mode [, string lib_dir])" src="mcrypt.c" />
      <scope doc="Returns the block size of the algorithm" ilk="function" name="mcrypt_module_get_algo_block_size" returns="int" signature="mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])" src="mcrypt.c" />
      <scope doc="Returns the maximum supported key size of the algorithm" ilk="function" name="mcrypt_module_get_algo_key_size" returns="int" signature="mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])" src="mcrypt.c" />
      <scope doc="This function decrypts the crypttext" ilk="function" name="mcrypt_module_get_supported_key_sizes" returns="array" signature="mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])" src="mcrypt.c" />
      <scope doc="List all algorithms in module dir" ilk="function" name="mcrypt_list_algorithms" returns="array" signature="mcrypt_list_algorithms([string lib_dir])" src="mcrypt.c" />
      <scope doc="List all modes module dir" ilk="function" name="mcrypt_list_modes" returns="array" signature="mcrypt_list_modes([string lib_dir])" src="mcrypt.c" />
      <scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_key_size" returns="int" signature="mcrypt_get_key_size(string cipher, string module)" src="mcrypt.c" />
      <scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_block_size" returns="int" signature="mcrypt_get_block_size(string cipher, string module)" src="mcrypt.c" />
      <scope doc="Get the IV size of cipher Usually the same as the&#xA;blocksize" ilk="function" name="mcrypt_get_iv_size" returns="int" signature="mcrypt_get_iv_size(string cipher, string module)" src="mcrypt.c" />
      <scope doc="Get the key size of cipher" ilk="function" name="mcrypt_get_cipher_name" returns="string" signature="mcrypt_get_cipher_name(string cipher)" src="mcrypt.c" />
      <scope doc="OFB crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_encrypt" returns="string" signature="mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)" src="mcrypt.c" />
      <scope doc="OFB crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_decrypt" returns="string" signature="mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)" src="mcrypt.c" />
      <scope doc="ECB crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_ecb" returns="string" signature="mcrypt_ecb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" />
      <scope doc="CBC crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_cbc" returns="string" signature="mcrypt_cbc(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" />
      <scope doc="CFB crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_cfb" returns="string" signature="mcrypt_cfb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" />
      <scope doc="OFB crypt decrypt data using key key with cipher cipher&#xA;starting with iv" ilk="function" name="mcrypt_ofb" returns="string" signature="mcrypt_ofb(int cipher, string key, string data, int mode, string iv)" src="mcrypt.c" />
      <scope doc="Create an initialization vector IV" ilk="function" name="mcrypt_create_iv" returns="string" signature="mcrypt_create_iv(int size, int source)" src="mcrypt.c" />
      <scope doc="Gets the number of available hashes" ilk="function" name="mhash_count" returns="int" signature="mhash_count(void)" src="mhash.c" />
      <scope doc="Gets the block size of hash" ilk="function" name="mhash_get_block_size" returns="int" signature="mhash_get_block_size(int hash)" src="mhash.c" />
      <scope doc="Gets the name of hash" ilk="function" name="mhash_get_hash_name" returns="string" signature="mhash_get_hash_name(int hash)" src="mhash.c" />
      <scope doc="Hash data with hash" ilk="function" name="mhash" returns="string" signature="mhash(int hash, string data [, string key])" src="mhash.c" />
      <scope doc="Generates a key using hash functions" ilk="function" name="mhash_keygen_s2k" returns="string" signature="mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)" src="mhash.c" />
      <scope doc="Return content-type for file" ilk="function" name="mime_content_type" returns="string" signature="mime_content_type(string filename" src="mime_magic.c" />
      <scope doc="Set scale" ilk="function" name="ming_setscale" returns="void" signature="ming_setscale(int scale)" src="ming.c" />
      <scope doc="Use SWF version" ilk="function" name="ming_useswfversion" returns="void" signature="ming_useswfversion(int version)" src="ming.c" />
      <scope doc="Use constant pool" ilk="function" name="ming_useconstants" returns="void" signature="ming_useconstants(int use)" src="ming.c" />
      <scope doc="Returns the action flag for keyPress char" ilk="function" name="ming_keypress" returns="int" signature="ming_keypress(string str)" src="ming.c" />
      <scope doc="Returns a SWVideoStream object" ilk="function" name="swfvideostream_init" returns="class" signature="swfvideostream_init([file])" src="ming.c" />
      <scope doc="Returns a SWFPrebuiltClip object" ilk="function" name="swfprebuiltclip_init" returns="class" signature="swfprebuiltclip_init([file])" src="ming.c" />
      <scope doc="Open a connection to an mSQL Server" ilk="function" name="msql_connect" returns="int" signature="msql_connect([string hostname[:port]] [, string username] [, string password])" src="php_msql.c" />
      <scope doc="Open a persistent connection to an mSQL Server" ilk="function" name="msql_pconnect" returns="int" signature="msql_pconnect([string hostname[:port]] [, string username] [, string password])" src="php_msql.c" />
      <scope doc="Close an mSQL connection" ilk="function" name="msql_close" returns="bool" signature="msql_close([resource link_identifier])" src="php_msql.c" />
      <scope doc="Select an mSQL database" ilk="function" name="msql_select_db" returns="bool" signature="msql_select_db(string database_name [, resource link_identifier])" src="php_msql.c" />
      <scope doc="Create an mSQL database" ilk="function" name="msql_create_db" returns="bool" signature="msql_create_db(string database_name [, resource link_identifier])" src="php_msql.c" />
      <scope doc="Drop delete an mSQL database" ilk="function" name="msql_drop_db" returns="bool" signature="msql_drop_db(string database_name [, resource link_identifier])" src="php_msql.c" />
      <scope doc="Send an SQL query to mSQL" ilk="function" name="msql_query" returns="resource" signature="msql_query(string query [, resource link_identifier])" src="php_msql.c" />
      <scope doc="Send an SQL query to mSQL" ilk="function" name="msql_db_query" returns="resource" signature="msql_db_query(string database_name, string query [, resource link_identifier])" src="php_msql.c" />
      <scope doc="List databases available on an mSQL server" ilk="function" name="msql_list_dbs" returns="resource" signature="msql_list_dbs([resource link_identifier])" src="php_msql.c" />
      <scope doc="List tables in an mSQL database" ilk="function" name="msql_list_tables" returns="resource" signature="msql_list_tables(string database_name [, resource link_identifier])" src="php_msql.c" />
      <scope doc="List mSQL result fields" ilk="function" name="msql_list_fields" returns="resource" signature="msql_list_fields(string database_name, string table_name [, resource link_identifier])" src="php_msql.c" />
      <scope doc="Returns the text of the error message from previous&#xA;mSQL operation" ilk="function" name="msql_error" returns="string" signature="msql_error(void)" src="php_msql.c" />
      <scope doc="Get result data" ilk="function" name="msql_result" returns="string" signature="msql_result(int query, int row [, mixed field])" src="php_msql.c" />
      <scope doc="Get number of rows in a result" ilk="function" name="msql_num_rows" returns="int" signature="msql_num_rows(resource query)" src="php_msql.c" />
      <scope doc="Get number of fields in a result" ilk="function" name="msql_num_fields" returns="int" signature="msql_num_fields(resource query)" src="php_msql.c" />
      <scope doc="Get a result row as an enumerated array" ilk="function" name="msql_fetch_row" returns="array" signature="msql_fetch_row(resource query)" src="php_msql.c" />
      <scope doc="Fetch a result row as an object" ilk="function" name="msql_fetch_object" returns="object" signature="msql_fetch_object(resource query [, resource result_type])" src="php_msql.c" />
      <scope doc="Fetch a result row as an associative array" ilk="function" name="msql_fetch_array" returns="array" signature="msql_fetch_array(resource query [, int result_type])" src="php_msql.c" />
      <scope doc="Move internal result pointer" ilk="function" name="msql_data_seek" returns="bool" signature="msql_data_seek(resource query, int row_number)" src="php_msql.c" />
      <scope doc="Get column information from a result and return as an&#xA;object" ilk="function" name="msql_fetch_field" returns="object" signature="msql_fetch_field(resource query [, int field_offset])" src="php_msql.c" />
      <scope doc="Set result pointer to a specific field offset" ilk="function" name="msql_field_seek" returns="bool" signature="msql_field_seek(resource query, int field_offset)" src="php_msql.c" />
      <scope doc="Get the name of the specified field in a result" ilk="function" name="msql_field_name" returns="string" signature="msql_field_name(resource query, int field_index)" src="php_msql.c" />
      <scope doc="Get name of the table the specified field is in" ilk="function" name="msql_field_table" returns="string" signature="msql_field_table(resource query, int field_offset)" src="php_msql.c" />
      <scope doc="Returns the length of the specified field" ilk="function" name="msql_field_len" returns="int" signature="msql_field_len(int query, int field_offet)" src="php_msql.c" />
      <scope doc="Get the type of the specified field in a result" ilk="function" name="msql_field_type" returns="string" signature="msql_field_type(resource query, int field_offset)" src="php_msql.c" />
      <scope doc="Get the flags associated with the specified field in a&#xA;result" ilk="function" name="msql_field_flags" returns="string" signature="msql_field_flags(resource query, int field_offset)" src="php_msql.c" />
      <scope doc="Free result memory" ilk="function" name="msql_free_result" returns="bool" signature="msql_free_result(resource query)" src="php_msql.c" />
      <scope doc="Return number of affected rows" ilk="function" name="msql_affected_rows" returns="int" signature="msql_affected_rows(resource query)" src="php_msql.c" />
      <scope doc="Establishes a connection to a MS-SQL server" ilk="function" name="mssql_connect" returns="int" signature="mssql_connect([string servername [, string username [, string password [, bool new_link]]])" src="php_mssql.c" />
      <scope doc="Establishes a persistent connection to a MS-SQL server" ilk="function" name="mssql_pconnect" returns="int" signature="mssql_pconnect([string servername [, string username [, string password [, bool new_link]]]])" src="php_mssql.c" />
      <scope doc="Closes a connection to a MS-SQL server" ilk="function" name="mssql_close" returns="bool" signature="mssql_close([resource conn_id])" src="php_mssql.c" />
      <scope doc="Select a MS-SQL database" ilk="function" name="mssql_select_db" returns="bool" signature="mssql_select_db(string database_name [, resource conn_id])" src="php_mssql.c" />
      <scope doc="Returns the next batch of records" ilk="function" name="mssql_fetch_batch" returns="int" signature="mssql_fetch_batch(resource result_index)" src="php_mssql.c" />
      <scope doc="Perform an SQL query on a MS-SQL server database" ilk="function" name="mssql_query" returns="resource" signature="mssql_query(string query [, resource conn_id [, int batch_size]])" src="php_mssql.c" />
      <scope doc="Returns the number of records affected by the query" ilk="function" name="mssql_rows_affected" returns="int" signature="mssql_rows_affected(resource conn_id)" src="php_mssql.c" />
      <scope doc="Free a MS-SQL result index" ilk="function" name="mssql_free_result" returns="bool" signature="mssql_free_result(resource result_index)" src="php_mssql.c" />
      <scope doc="Gets the last message from the MS-SQL server" ilk="function" name="mssql_get_last_message" returns="string" signature="mssql_get_last_message(void)" src="php_mssql.c" />
      <scope doc="Returns the number of rows fetched in from the result&#xA;id specified" ilk="function" name="mssql_num_rows" returns="int" signature="mssql_num_rows(resource mssql_result_index)" src="php_mssql.c" />
      <scope doc="Returns the number of fields fetched in from the result&#xA;id specified" ilk="function" name="mssql_num_fields" returns="int" signature="mssql_num_fields(resource mssql_result_index)" src="php_mssql.c" />
      <scope doc="Returns an array of the current row in the result set&#xA;specified by result id" ilk="function" name="mssql_fetch_row" returns="array" signature="mssql_fetch_row(resource result_id)" src="php_mssql.c" />
      <scope doc="Returns a psuedo-object of the current row in the&#xA;result set specified by result id" ilk="function" name="mssql_fetch_object" returns="object" signature="mssql_fetch_object(resource result_id [, int result_type])" src="php_mssql.c" />
      <scope doc="Returns an associative array of the current row in the&#xA;result set specified by result id" ilk="function" name="mssql_fetch_array" returns="array" signature="mssql_fetch_array(resource result_id [, int result_type])" src="php_mssql.c" />
      <scope doc="Returns an associative array of the current row in the&#xA;result set specified by result id" ilk="function" name="mssql_fetch_assoc" returns="array" signature="mssql_fetch_assoc(resource result_id)" src="php_mssql.c" />
      <scope doc="Moves the internal row pointer of the MS-SQL result&#xA;associated with the specified result identifier to&#xA;pointer to the specified" ilk="function" name="mssql_data_seek" returns="bool" signature="mssql_data_seek(resource result_id, int offset)" src="php_mssql.c" />
      <scope doc="Gets information about certain fields in a query result" ilk="function" name="mssql_fetch_field" returns="object" signature="mssql_fetch_field(resource result_id [, int offset])" src="php_mssql.c" />
      <scope doc="Get the length of a MS-SQL field" ilk="function" name="mssql_field_length" returns="int" signature="mssql_field_length(resource result_id [, int offset])" src="php_mssql.c" />
      <scope doc="Returns the name of the field given by offset in the&#xA;result set given by result id" ilk="function" name="mssql_field_name" returns="string" signature="mssql_field_name(resource result_id [, int offset])" src="php_mssql.c" />
      <scope doc="Returns the type of a field" ilk="function" name="mssql_field_type" returns="string" signature="mssql_field_type(resource result_id [, int offset])" src="php_mssql.c" />
      <scope doc="Seeks to the specified field offset" ilk="function" name="mssql_field_seek" returns="bool" signature="mssql_field_seek(int result_id, int offset)" src="php_mssql.c" />
      <scope doc="Returns the contents of one cell from a MS-SQL result&#xA;set" ilk="function" name="mssql_result" returns="string" signature="mssql_result(resource result_id, int row, mixed field)" src="php_mssql.c" />
      <scope doc="Move the internal result pointer to the next result" ilk="function" name="mssql_next_result" returns="bool" signature="mssql_next_result(resource result_id)" src="php_mssql.c" />
      <scope doc="Sets the lower error severity" ilk="function" name="mssql_min_error_severity" returns="void" signature="mssql_min_error_severity(int severity)" src="php_mssql.c" />
      <scope doc="Sets the lower message severity" ilk="function" name="mssql_min_message_severity" returns="void" signature="mssql_min_message_severity(int severity)" src="php_mssql.c" />
      <scope doc="Initializes a stored procedure or a remote stored&#xA;procedure" ilk="function" name="mssql_init" returns="int" signature="mssql_init(string sp_name [, resource conn_id])" src="php_mssql.c" />
      <scope doc="Adds a parameter to a stored procedure or a remote&#xA;stored procedure" ilk="function" name="mssql_bind" returns="bool" signature="mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])" src="php_mssql.c" />
      <scope doc="Executes a stored procedure on a MS-SQL server database" ilk="function" name="mssql_execute" returns="mixed" signature="mssql_execute(resource stmt [, bool skip_results = false])" src="php_mssql.c" />
      <scope doc="Free a MS-SQL statement index" ilk="function" name="mssql_free_statement" returns="bool" signature="mssql_free_statement(resource result_index)" src="php_mssql.c" />
      <scope doc="Converts a byte binary GUID to a string" ilk="function" name="mssql_guid_string" returns="string" signature="mssql_guid_string(string binary [,int short_format])" src="php_mssql.c" />
      <scope doc="Opens a connection to a MySQL Server" ilk="function" name="mysql_connect" returns="resource" signature="mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])" src="php_mysql.c" />
      <scope doc="Opens a persistent connection to a MySQL Server" ilk="function" name="mysql_pconnect" returns="resource" signature="mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])" src="php_mysql.c" />
      <scope doc="Close a MySQL connection" ilk="function" name="mysql_close" returns="bool" signature="mysql_close([int link_identifier])" src="php_mysql.c" />
      <scope doc="Selects a MySQL database" ilk="function" name="mysql_select_db" returns="bool" signature="mysql_select_db(string database_name [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns a string that represents the client library&#xA;version" ilk="function" name="mysql_get_client_info" returns="string" signature="mysql_get_client_info(void)" src="php_mysql.c" />
      <scope doc="Returns a string describing the type of connection in&#xA;use including the server host name" ilk="function" name="mysql_get_host_info" returns="string" signature="mysql_get_host_info([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns the protocol version used by current connection" ilk="function" name="mysql_get_proto_info" returns="int" signature="mysql_get_proto_info([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns a string that represents the server version&#xA;number" ilk="function" name="mysql_get_server_info" returns="string" signature="mysql_get_server_info([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns a string containing information about the most&#xA;recent query" ilk="function" name="mysql_info" returns="string" signature="mysql_info([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns the thread id of current connection" ilk="function" name="mysql_thread_id" returns="int" signature="mysql_thread_id([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns a string containing status information" ilk="function" name="mysql_stat" returns="string" signature="mysql_stat([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns the default character set for the current&#xA;connection" ilk="function" name="mysql_client_encoding" returns="string" signature="mysql_client_encoding([int link_identifier])" src="php_mysql.c" />
      <scope doc="sets client character set" ilk="function" name="mysql_set_charset" returns="bool" signature="mysql_set_charset(string csname [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Create a MySQL database" ilk="function" name="mysql_create_db" returns="bool" signature="mysql_create_db(string database_name [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Drops delete a MySQL database" ilk="function" name="mysql_drop_db" returns="bool" signature="mysql_drop_db(string database_name [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Sends an SQL query to MySQL" ilk="function" name="mysql_query" returns="resource" signature="mysql_query(string query [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Sends an SQL query to MySQL without fetching and&#xA;buffering the result rows" ilk="function" name="mysql_unbuffered_query" returns="resource" signature="mysql_unbuffered_query(string query [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Sends an SQL query to MySQL" ilk="function" name="mysql_db_query" returns="resource" signature="mysql_db_query(string database_name, string query [, int link_identifier])" src="php_mysql.c" />
      <scope doc="List databases available on a MySQL server" ilk="function" name="mysql_list_dbs" returns="resource" signature="mysql_list_dbs([int link_identifier])" src="php_mysql.c" />
      <scope doc="List tables in a MySQL database" ilk="function" name="mysql_list_tables" returns="resource" signature="mysql_list_tables(string database_name [, int link_identifier])" src="php_mysql.c" />
      <scope doc="List MySQL result fields" ilk="function" name="mysql_list_fields" returns="resource" signature="mysql_list_fields(string database_name, string table_name [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns a result set describing the current server&#xA;threads" ilk="function" name="mysql_list_processes" returns="resource" signature="mysql_list_processes([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns the text of the error message from previous&#xA;MySQL operation" ilk="function" name="mysql_error" returns="string" signature="mysql_error([int link_identifier])" src="php_mysql.c" />
      <scope doc="Returns the number of the error message from previous&#xA;MySQL operation" ilk="function" name="mysql_errno" returns="int" signature="mysql_errno([int link_identifier])" src="php_mysql.c" />
      <scope doc="Gets number of affected rows in previous MySQL&#xA;operation" ilk="function" name="mysql_affected_rows" returns="int" signature="mysql_affected_rows([int link_identifier])" src="php_mysql.c" />
      <scope doc="Escape string for mysql query" ilk="function" name="mysql_escape_string" returns="string" signature="mysql_escape_string(string to_be_escaped)" src="php_mysql.c" />
      <scope doc="Escape special characters in a string for use in a SQL&#xA;statement taking into account the current charset of&#xA;the" ilk="function" name="mysql_real_escape_string" returns="string" signature="mysql_real_escape_string(string to_be_escaped [, int link_identifier])" src="php_mysql.c" />
      <scope doc="Gets the ID generated from the previous INSERT&#xA;operation" ilk="function" name="mysql_insert_id" returns="int" signature="mysql_insert_id([int link_identifier])" src="php_mysql.c" />
      <scope doc="Gets result data" ilk="function" name="mysql_result" returns="mixed" signature="mysql_result(resource result, int row [, mixed field])" src="php_mysql.c" />
      <scope doc="Gets number of rows in a result" ilk="function" name="mysql_num_rows" returns="int" signature="mysql_num_rows(resource result)" src="php_mysql.c" />
      <scope doc="Gets number of fields in a result" ilk="function" name="mysql_num_fields" returns="int" signature="mysql_num_fields(resource result)" src="php_mysql.c" />
      <scope doc="Gets a result row as an enumerated array" ilk="function" name="mysql_fetch_row" returns="array" signature="mysql_fetch_row(resource result)" src="php_mysql.c" />
      <scope doc="Fetch a result row as an object" ilk="function" name="mysql_fetch_object" returns="object" signature="mysql_fetch_object(resource result [, string class_name [, NULL" src="php_mysql.c" />
      <scope doc="Fetch a result row as an array associative numeric or&#xA;both" ilk="function" name="mysql_fetch_array" returns="array" signature="mysql_fetch_array(resource result [, int result_type])" src="php_mysql.c" />
      <scope doc="Fetch a result row as an associative array" ilk="function" name="mysql_fetch_assoc" returns="array" signature="mysql_fetch_assoc(resource result)" src="php_mysql.c" />
      <scope doc="Move internal result pointer" ilk="function" name="mysql_data_seek" returns="bool" signature="mysql_data_seek(resource result, int row_number)" src="php_mysql.c" />
      <scope doc="Gets max data size of each column in a result" ilk="function" name="mysql_fetch_lengths" returns="array" signature="mysql_fetch_lengths(resource result)" src="php_mysql.c" />
      <scope doc="Gets column information from a result and return as an&#xA;object" ilk="function" name="mysql_fetch_field" returns="object" signature="mysql_fetch_field(resource result [, int field_offset])" src="php_mysql.c" />
      <scope doc="Sets result pointer to a specific field offset" ilk="function" name="mysql_field_seek" returns="bool" signature="mysql_field_seek(resource result, int field_offset)" src="php_mysql.c" />
      <scope doc="Gets the name of the specified field in a result" ilk="function" name="mysql_field_name" returns="string" signature="mysql_field_name(resource result, int field_index)" src="php_mysql.c" />
      <scope doc="Gets name of the table the specified field is in" ilk="function" name="mysql_field_table" returns="string" signature="mysql_field_table(resource result, int field_offset)" src="php_mysql.c" />
      <scope doc="Returns the length of the specified field" ilk="function" name="mysql_field_len" returns="int" signature="mysql_field_len(resource result, int field_offset)" src="php_mysql.c" />
      <scope doc="Gets the type of the specified field in a result" ilk="function" name="mysql_field_type" returns="string" signature="mysql_field_type(resource result, int field_offset)" src="php_mysql.c" />
      <scope doc="Gets the flags associated with the specified field in a&#xA;result" ilk="function" name="mysql_field_flags" returns="string" signature="mysql_field_flags(resource result, int field_offset)" src="php_mysql.c" />
      <scope doc="Free result memory" ilk="function" name="mysql_free_result" returns="bool" signature="mysql_free_result(resource result)" src="php_mysql.c" />
      <scope doc="Ping a server connection If no connection then&#xA;reconnect" ilk="function" name="mysql_ping" returns="bool" signature="mysql_ping([int link_identifier])" src="php_mysql.c" />
      <scope doc="Get number of affected rows in previous MySQL operation" ilk="function" name="mysqli_affected_rows" returns="mixed" signature="mysqli_affected_rows(object link)" src="mysqli_api.c" />
      <scope doc="Turn auto commit on or of" ilk="function" name="mysqli_autocommit" returns="bool" signature="mysqli_autocommit(object link, bool mode)" src="mysqli_api.c" />
      <scope doc="Bind variables to a prepared statement as parameters" ilk="function" name="mysqli_stmt_bind_param" returns="bool" signature="mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])" src="mysqli_api.c" />
      <scope doc="Bind variables to a prepared statement for result&#xA;storage" ilk="function" name="mysqli_stmt_bind_result" returns="bool" signature="mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])" src="mysqli_api.c" />
      <scope doc="Change logged-in user of the active connection" ilk="function" name="mysqli_change_user" returns="bool" signature="mysqli_change_user(object link, string user, string password, string database)" src="mysqli_api.c" />
      <scope doc="Returns the name of the character set used for this&#xA;connection" ilk="function" name="mysqli_character_set_name" returns="string" signature="mysqli_character_set_name(object link)" src="mysqli_api.c" />
      <scope doc="Close connection" ilk="function" name="mysqli_close" returns="bool" signature="mysqli_close(object link)" src="mysqli_api.c" />
      <scope doc="Commit outstanding actions and close transaction" ilk="function" name="mysqli_commit" returns="bool" signature="mysqli_commit(object link)" src="mysqli_api.c" />
      <scope doc="Move internal result pointer" ilk="function" name="mysqli_data_seek" returns="bool" signature="mysqli_data_seek(object result, int offset)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_debug" returns="void" signature="mysqli_debug(string debug)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_dump_debug_info" returns="bool" signature="mysqli_dump_debug_info(object link)" src="mysqli_api.c" />
      <scope doc="Returns the numerical value of the error message from&#xA;previous MySQL operation" ilk="function" name="mysqli_errno" returns="int" signature="mysqli_errno(object link)" src="mysqli_api.c" />
      <scope doc="Returns the text of the error message from previous&#xA;MySQL operation" ilk="function" name="mysqli_error" returns="string" signature="mysqli_error(object link)" src="mysqli_api.c" />
      <scope doc="Execute a prepared statement" ilk="function" name="mysqli_stmt_execute" returns="bool" signature="mysqli_stmt_execute(object stmt)" src="mysqli_api.c" />
      <scope doc="Fetch results from a prepared statement into the bound&#xA;variables" ilk="function" name="mysqli_stmt_fetch" returns="mixed" signature="mysqli_stmt_fetch(object stmt)" src="mysqli_api.c" />
      <scope doc="Fetch the number of fields returned by the last query&#xA;for the given link" ilk="function" name="mysqli_field_count" returns="int" signature="mysqli_field_count(object link)" src="mysqli_api.c" />
      <scope doc="Set result pointer to a specified field offset" ilk="function" name="mysqli_field_seek" returns="int" signature="mysqli_field_seek(object result, int fieldnr)" src="mysqli_api.c" />
      <scope doc="Get current field offset of result pointer" ilk="function" name="mysqli_field_tell" returns="int" signature="mysqli_field_tell(object result)" src="mysqli_api.c" />
      <scope doc="Free query result memory for the given result handle" ilk="function" name="mysqli_free_result" returns="void" signature="mysqli_free_result(object result)" src="mysqli_api.c" />
      <scope doc="Get MySQL client info" ilk="function" name="mysqli_get_client_info" returns="string" signature="mysqli_get_client_info(void)" src="mysqli_api.c" />
      <scope doc="Get MySQL client info" ilk="function" name="mysqli_get_client_version" returns="int" signature="mysqli_get_client_version(void)" src="mysqli_api.c" />
      <scope doc="Get MySQL protocol information" ilk="function" name="mysqli_get_proto_info" returns="int" signature="mysqli_get_proto_info(object link)" src="mysqli_api.c" />
      <scope doc="Get MySQL server info" ilk="function" name="mysqli_get_server_info" returns="string" signature="mysqli_get_server_info(object link)" src="mysqli_api.c" />
      <scope doc="Return the MySQL version for the server referenced by&#xA;the given link" ilk="function" name="mysqli_get_server_version" returns="int" signature="mysqli_get_server_version(object link)" src="mysqli_api.c" />
      <scope doc="Get information about the most recent query" ilk="function" name="mysqli_info" returns="string" signature="mysqli_info(object link)" src="mysqli_api.c" />
      <scope doc="Initialize mysqli and return a resource for use with&#xA;mysql real connect" ilk="function" name="mysqli_init" returns="resource" signature="mysqli_init(void)" src="mysqli_api.c" />
      <scope doc="Get the ID generated from the previous INSERT operation" ilk="function" name="mysqli_insert_id" returns="mixed" signature="mysqli_insert_id(object link)" src="mysqli_api.c" />
      <scope doc="Kill a mysql process on the server" ilk="function" name="mysqli_kill" returns="bool" signature="mysqli_kill(object link, int processid)" src="mysqli_api.c" />
      <scope doc="unsets user defined handler for load local infile&#xA;command" ilk="function" name="mysqli_set_local_infile_default" returns="void" signature="mysqli_set_local_infile_default(object link)" src="mysqli_api.c" />
      <scope doc="Set callback functions for LOAD DATA LOCAL INFILE" ilk="function" name="mysqli_set_local_infile_handler" returns="bool" signature="mysqli_set_local_infile_handler(object link, callback read_func)" src="mysqli_api.c" />
      <scope doc="check if there any more query results from a multi&#xA;query" ilk="function" name="mysqli_more_results" returns="bool" signature="mysqli_more_results(object link)" src="mysqli_api.c" />
      <scope doc="read next result from multi query" ilk="function" name="mysqli_next_result" returns="bool" signature="mysqli_next_result(object link)" src="mysqli_api.c" />
      <scope doc="Get number of fields in result" ilk="function" name="mysqli_num_fields" returns="int" signature="mysqli_num_fields(object result)" src="mysqli_api.c" />
      <scope doc="Get number of rows in result" ilk="function" name="mysqli_num_rows" returns="mixed" signature="mysqli_num_rows(object result)" src="mysqli_api.c" />
      <scope doc="Set options" ilk="function" name="mysqli_options" returns="bool" signature="mysqli_options(object link, int flags, mixed values)" src="mysqli_api.c" />
      <scope doc="Ping a server connection or reconnect if there is no&#xA;connection" ilk="function" name="mysqli_ping" returns="bool" signature="mysqli_ping(object link)" src="mysqli_api.c" />
      <scope doc="Prepare a SQL statement for execution" ilk="function" name="mysqli_prepare" returns="mixed" signature="mysqli_prepare(object link, string query)" src="mysqli_api.c" />
      <scope doc="Open a connection to a mysql server" ilk="function" name="mysqli_real_connect" returns="bool" signature="mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])" src="mysqli_api.c" />
      <scope doc="Binary-safe version of mysql query" ilk="function" name="mysqli_real_query" returns="bool" signature="mysqli_real_query(object link, string query)" src="mysqli_api.c" />
      <scope doc="Escapes special characters in a string for use in a SQL&#xA;statement taking into account the current charset of&#xA;the" ilk="function" name="mysqli_real_escape_string" returns="string" signature="mysqli_real_escape_string(object link, string escapestr)" src="mysqli_api.c" />
      <scope doc="Undo actions from current transaction" ilk="function" name="mysqli_rollback" returns="bool" signature="mysqli_rollback(object link)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_send_long_data" returns="bool" signature="mysqli_stmt_send_long_data(object stmt, int param_nr, string data)" src="mysqli_api.c" />
      <scope doc="Return the number of rows affected in the last query&#xA;for the given link" ilk="function" name="mysqli_stmt_affected_rows" returns="mixed" signature="mysqli_stmt_affected_rows(object stmt)" src="mysqli_api.c" />
      <scope doc="Close statement" ilk="function" name="mysqli_stmt_close" returns="bool" signature="mysqli_stmt_close(object stmt)" src="mysqli_api.c" />
      <scope doc="Move internal result pointer" ilk="function" name="mysqli_stmt_data_seek" returns="void" signature="mysqli_stmt_data_seek(object stmt, int offset)" src="mysqli_api.c" />
      <scope doc="Return the number of result columns for the given&#xA;statement" ilk="function" name="mysqli_stmt_field_count" returns="int" signature="mysqli_stmt_field_count(object stmt)" src="mysqli_api.c" />
      <scope doc="Free stored result memory for the given statement&#xA;handle" ilk="function" name="mysqli_stmt_free_result" returns="void" signature="mysqli_stmt_free_result(object stmt)" src="mysqli_api.c" />
      <scope doc="Get the ID generated from the previous INSERT operation" ilk="function" name="mysqli_stmt_insert_id" returns="mixed" signature="mysqli_stmt_insert_id(object stmt)" src="mysqli_api.c" />
      <scope doc="Return the number of parameter for the given statement" ilk="function" name="mysqli_stmt_param_count" returns="int" signature="mysqli_stmt_param_count(object stmt)" src="mysqli_api.c" />
      <scope doc="reset a prepared statement" ilk="function" name="mysqli_stmt_reset" returns="bool" signature="mysqli_stmt_reset(object stmt)" src="mysqli_api.c" />
      <scope doc="Return the number of rows in statements result set" ilk="function" name="mysqli_stmt_num_rows" returns="mixed" signature="mysqli_stmt_num_rows(object stmt)" src="mysqli_api.c" />
      <scope doc="Select a MySQL database" ilk="function" name="mysqli_select_db" returns="string" signature="mysqli_select_db(object link, string dbname)" src="mysqli_api.c" />
      <scope doc="Returns the SQLSTATE error from previous MySQL&#xA;operation" ilk="function" name="mysqli_sqlstate" returns="string" signature="mysqli_sqlstate(object link)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_ssl_set" returns="bool" signature="mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])" src="mysqli_api.c" />
      <scope doc="Get current system status" ilk="function" name="mysqli_stat" returns="mixed" signature="mysqli_stat(object link)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_attr_set" returns="int" signature="mysqli_stmt_attr_set(object stmt, long attr, long mode)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_attr_get" returns="int" signature="mysqli_stmt_attr_get(object stmt, long attr)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_errno" returns="int" signature="mysqli_stmt_errno(object stmt)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_error" returns="string" signature="mysqli_stmt_error(object stmt)" src="mysqli_api.c" />
      <scope doc="Initialize statement object" ilk="function" name="mysqli_stmt_init" returns="mixed" signature="mysqli_stmt_init(object link)" src="mysqli_api.c" />
      <scope doc="prepare server side statement with query" ilk="function" name="mysqli_stmt_prepare" returns="bool" signature="mysqli_stmt_prepare(object stmt, string query)" src="mysqli_api.c" />
      <scope doc="return result set from statement" ilk="function" name="mysqli_stmt_result_metadata" returns="mixed" signature="mysqli_stmt_result_metadata(object stmt)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_store_result" returns="bool" signature="mysqli_stmt_store_result(stmt)" src="mysqli_api.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_sqlstate" returns="string" signature="mysqli_stmt_sqlstate(object stmt)" src="mysqli_api.c" />
      <scope doc="Buffer result set on client" ilk="function" name="mysqli_store_result" returns="object" signature="mysqli_store_result(object link)" src="mysqli_api.c" />
      <scope doc="Return the current thread ID" ilk="function" name="mysqli_thread_id" returns="int" signature="mysqli_thread_id(object link)" src="mysqli_api.c" />
      <scope doc="Return whether thread safety is given or not" ilk="function" name="mysqli_thread_safe" returns="bool" signature="mysqli_thread_safe(void)" src="mysqli_api.c" />
      <scope doc="Directly retrieve query results - do not buffer results&#xA;on client side" ilk="function" name="mysqli_use_result" returns="mixed" signature="mysqli_use_result(object link)" src="mysqli_api.c" />
      <scope doc="initialize and start embedded server" ilk="function" name="mysqli_embedded_server_start" returns="bool" signature="mysqli_embedded_server_start(bool start, array arguments, array groups)" src="mysqli_embedded.c" />
      <scope doc="" ilk="function" name="mysqli_embedded_server_end" returns="void" signature="mysqli_embedded_server_end(void)" src="mysqli_embedded.c" />
      <scope doc="Open a connection to a mysql server" ilk="function" name="mysqli_connect" returns="object" signature="mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])" src="mysqli_nonapi.c" />
      <scope doc="Returns the numerical value of the error message from&#xA;last connect command" ilk="function" name="mysqli_connect_errno" returns="int" signature="mysqli_connect_errno(void)" src="mysqli_nonapi.c" />
      <scope doc="Returns the text of the error message from previous&#xA;MySQL operation" ilk="function" name="mysqli_connect_error" returns="string" signature="mysqli_connect_error(void)" src="mysqli_nonapi.c" />
      <scope doc="Binary-safe version of mysql query" ilk="function" name="mysqli_multi_query" returns="bool" signature="mysqli_multi_query(object link, string query)" src="mysqli_nonapi.c" />
      <scope doc="" ilk="function" name="mysqli_query" returns="mixed" signature="mysqli_query(object link, string query [,int resultmode])" src="mysqli_nonapi.c" />
      <scope doc="" ilk="function" name="mysqli_get_warnings" returns="object" signature="mysqli_get_warnings(object link)" src="mysqli_nonapi.c" />
      <scope doc="" ilk="function" name="mysqli_stmt_get_warnings" returns="object" signature="mysqli_stmt_get_warnings(object link)" src="mysqli_nonapi.c" />
      <scope doc="sets client character set" ilk="function" name="mysqli_set_charset" returns="bool" signature="mysqli_set_charset(object link, string csname)" src="mysqli_nonapi.c" />
      <scope doc="returns a character set object" ilk="function" name="mysqli_get_charset" returns="object" signature="mysqli_get_charset(object link)" src="mysqli_nonapi.c" />
      <scope doc="" ilk="function" name="mysqli_disable_reads_from_master" returns="void" signature="mysqli_disable_reads_from_master(object link)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_disable_rpl_parse" returns="void" signature="mysqli_disable_rpl_parse(object link)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_enable_reads_from_master" returns="void" signature="mysqli_enable_reads_from_master(object link)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_enable_rpl_parse" returns="void" signature="mysqli_enable_rpl_parse(object link)" src="mysqli_repl.c" />
      <scope doc="Enforce execution of a query on the master in a master&#xA;slave setup" ilk="function" name="mysqli_master_query" returns="bool" signature="mysqli_master_query(object link, string query)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_rpl_parse_enabled" returns="int" signature="mysqli_rpl_parse_enabled(object link)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_rpl_probe" returns="bool" signature="mysqli_rpl_probe(object link)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_rpl_query_type" returns="int" signature="mysqli_rpl_query_type(string query)" src="mysqli_repl.c" />
      <scope doc="" ilk="function" name="mysqli_send_query" returns="bool" signature="mysqli_send_query(object link, string query)" src="mysqli_repl.c" />
      <scope doc="Enforce execution of a query on a slave in a master&#xA;slave setup" ilk="function" name="mysqli_slave_query" returns="bool" signature="mysqli_slave_query(object link, string query)" src="mysqli_repl.c" />
      <scope doc="sets report level" ilk="function" name="mysqli_report" returns="bool" signature="mysqli_report(int flags)" src="mysqli_report.c" />
      <scope doc="Adds character at current position and advance cursor" ilk="function" name="ncurses_addch" returns="int" signature="ncurses_addch(int ch)" src="ncurses_functions.c" />
      <scope doc="Adds character at current position in a window and&#xA;advance cursor" ilk="function" name="ncurses_waddch" returns="int" signature="ncurses_waddch(resource window, int ch)" src="ncurses_functions.c" />
      <scope doc="Sets fore- and background color" ilk="function" name="ncurses_color_set" returns="int" signature="ncurses_color_set(int pair)" src="ncurses_functions.c" />
      <scope doc="Deletes a ncurses window" ilk="function" name="ncurses_delwin" returns="bool" signature="ncurses_delwin(resource window)" src="ncurses_functions.c" />
      <scope doc="Stops using ncurses clean up the screen" ilk="function" name="ncurses_end" returns="int" signature="ncurses_end(void)" src="ncurses_functions.c" />
      <scope doc="Reads a character from keyboard" ilk="function" name="ncurses_getch" returns="int" signature="ncurses_getch(void)" src="ncurses_functions.c" />
      <scope doc="Checks if terminal has colors" ilk="function" name="ncurses_has_colors" returns="bool" signature="ncurses_has_colors(void)" src="ncurses_functions.c" />
      <scope doc="Initializes ncurses" ilk="function" name="ncurses_init" returns="int" signature="ncurses_init(void)" src="ncurses_functions.c" />
      <scope doc="Allocates a color pair" ilk="function" name="ncurses_init_pair" returns="int" signature="ncurses_init_pair(int pair, int fg, int bg)" src="ncurses_functions.c" />
      <scope doc="Moves output position" ilk="function" name="ncurses_move" returns="int" signature="ncurses_move(int y, int x)" src="ncurses_functions.c" />
      <scope doc="Creates a new pad window" ilk="function" name="ncurses_newpad" returns="resource" signature="ncurses_newpad(int rows, int cols)" src="ncurses_functions.c" />
      <scope doc="Copys a region from a pad into the virtual screen" ilk="function" name="ncurses_prefresh" returns="int" signature="ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)" src="ncurses_functions.c" />
      <scope doc="Copys a region from a pad into the virtual screen" ilk="function" name="ncurses_pnoutrefresh" returns="int" signature="ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)" src="ncurses_functions.c" />
      <scope doc="Creates a new window" ilk="function" name="ncurses_newwin" returns="int" signature="ncurses_newwin(int rows, int cols, int y, int x)" src="ncurses_functions.c" />
      <scope doc="Refresh screen" ilk="function" name="ncurses_refresh" returns="int" signature="ncurses_refresh(int ch)" src="ncurses_functions.c" />
      <scope doc="Starts using colors" ilk="function" name="ncurses_start_color" returns="int" signature="ncurses_start_color(void)" src="ncurses_functions.c" />
      <scope doc="Starts using &apos;standout&apos; attribute" ilk="function" name="ncurses_standout" returns="int" signature="ncurses_standout(void)" src="ncurses_functions.c" />
      <scope doc="Stops using &apos;standout&apos; attribute" ilk="function" name="ncurses_standend" returns="int" signature="ncurses_standend(void)" src="ncurses_functions.c" />
      <scope doc="Returns baudrate of terminal" ilk="function" name="ncurses_baudrate" returns="int" signature="ncurses_baudrate(void)" src="ncurses_functions.c" />
      <scope doc="Let the terminal beep" ilk="function" name="ncurses_beep" returns="int" signature="ncurses_beep(void)" src="ncurses_functions.c" />
      <scope doc="Checks if we can change terminals colors" ilk="function" name="ncurses_can_change_color" returns="bool" signature="ncurses_can_change_color(void)" src="ncurses_functions.c" />
      <scope doc="Switches of input buffering" ilk="function" name="ncurses_cbreak" returns="bool" signature="ncurses_cbreak(void)" src="ncurses_functions.c" />
      <scope doc="Clears screen" ilk="function" name="ncurses_clear" returns="bool" signature="ncurses_clear(void)" src="ncurses_functions.c" />
      <scope doc="Clears screen from current position to bottom" ilk="function" name="ncurses_clrtobot" returns="bool" signature="ncurses_clrtobot(void)" src="ncurses_functions.c" />
      <scope doc="Clears screen from current position to end of line" ilk="function" name="ncurses_clrtoeol" returns="bool" signature="ncurses_clrtoeol(void)" src="ncurses_functions.c" />
      <scope doc="Resets the prog mode saved by def prog mode" ilk="function" name="ncurses_reset_prog_mode" returns="int" signature="ncurses_reset_prog_mode(void)" src="ncurses_functions.c" />
      <scope doc="Resets the shell mode saved by def shell mode" ilk="function" name="ncurses_reset_shell_mode" returns="int" signature="ncurses_reset_shell_mode(void)" src="ncurses_functions.c" />
      <scope doc="Saves terminals program mode" ilk="function" name="ncurses_def_prog_mode" returns="int" signature="ncurses_def_prog_mode(void)" src="ncurses_functions.c" />
      <scope doc="Saves terminal shell mode" ilk="function" name="ncurses_def_shell_mode" returns="int" signature="ncurses_def_shell_mode(void)" src="ncurses_functions.c" />
      <scope doc="Deletes character at current position move rest of line&#xA;left" ilk="function" name="ncurses_delch" returns="int" signature="ncurses_delch(void)" src="ncurses_functions.c" />
      <scope doc="Deletes line at current position move rest of screen up" ilk="function" name="ncurses_deleteln" returns="int" signature="ncurses_deleteln(void)" src="ncurses_functions.c" />
      <scope doc="Writes all prepared refreshes to terminal" ilk="function" name="ncurses_doupdate" returns="int" signature="ncurses_doupdate(void)" src="ncurses_functions.c" />
      <scope doc="Activates keyboard input echo" ilk="function" name="ncurses_echo" returns="int" signature="ncurses_echo(void)" src="ncurses_functions.c" />
      <scope doc="Erases terminal screen" ilk="function" name="ncurses_erase" returns="int" signature="ncurses_erase(void)" src="ncurses_functions.c" />
      <scope doc="Returns current erase character" ilk="function" name="ncurses_erasechar" returns="string" signature="ncurses_erasechar(void)" src="ncurses_functions.c" />
      <scope doc="Flashes terminal screen visual bell" ilk="function" name="ncurses_flash" returns="int" signature="ncurses_flash(void)" src="ncurses_functions.c" />
      <scope doc="Flushes keyboard input buffer" ilk="function" name="ncurses_flushinp" returns="int" signature="ncurses_flushinp(void)" src="ncurses_functions.c" />
      <scope doc="Checks for insert- and delete-capabilities" ilk="function" name="ncurses_has_ic" returns="int" signature="ncurses_has_ic(void)" src="ncurses_functions.c" />
      <scope doc="Checks for line insert- and delete-capabilities" ilk="function" name="ncurses_has_il" returns="int" signature="ncurses_has_il(void)" src="ncurses_functions.c" />
      <scope doc="Gets character and attribute at current position" ilk="function" name="ncurses_inch" returns="string" signature="ncurses_inch(void)" src="ncurses_functions.c" />
      <scope doc="Inserts a line move rest of screen down" ilk="function" name="ncurses_insertln" returns="int" signature="ncurses_insertln(void)" src="ncurses_functions.c" />
      <scope doc="Ncurses is in endwin mode normal screen output may be&#xA;performed" ilk="function" name="ncurses_isendwin" returns="int" signature="ncurses_isendwin(void)" src="ncurses_functions.c" />
      <scope doc="Returns current line kill character" ilk="function" name="ncurses_killchar" returns="string" signature="ncurses_killchar(void)" src="ncurses_functions.c" />
      <scope doc="Translates newline and carriage return line feed" ilk="function" name="ncurses_nl" returns="int" signature="ncurses_nl(void)" src="ncurses_functions.c" />
      <scope doc="Switches terminal to cooked mode" ilk="function" name="ncurses_nocbreak" returns="int" signature="ncurses_nocbreak(void)" src="ncurses_functions.c" />
      <scope doc="Switches off keyboard input echo" ilk="function" name="ncurses_noecho" returns="int" signature="ncurses_noecho(void)" src="ncurses_functions.c" />
      <scope doc="Do not ranslate newline and carriage return line feed" ilk="function" name="ncurses_nonl" returns="int" signature="ncurses_nonl(void)" src="ncurses_functions.c" />
      <scope doc="Switches terminal out of raw mode" ilk="function" name="ncurses_noraw" returns="bool" signature="ncurses_noraw(void)" src="ncurses_functions.c" />
      <scope doc="Switches terminal into raw mode" ilk="function" name="ncurses_raw" returns="int" signature="ncurses_raw(void)" src="ncurses_functions.c" />
      <scope doc="Enables Disable -bit meta key information" ilk="function" name="ncurses_meta" returns="int" signature="ncurses_meta(resource window, bool 8bit)" src="ncurses_functions.c" />
      <scope doc="Erase window contents" ilk="function" name="ncurses_werase" returns="int" signature="ncurses_werase(resource window)" src="ncurses_functions.c" />
      <scope doc="Restores saved terminal state" ilk="function" name="ncurses_resetty" returns="int" signature="ncurses_resetty(void)" src="ncurses_functions.c" />
      <scope doc="Saves terminal state" ilk="function" name="ncurses_savetty" returns="int" signature="ncurses_savetty(void)" src="ncurses_functions.c" />
      <scope doc="Returns a logical OR of all attribute flags supported&#xA;by terminal" ilk="function" name="ncurses_termattrs" returns="int" signature="ncurses_termattrs(void)" src="ncurses_functions.c" />
      <scope doc="Assigns terminal default colors to color id -" ilk="function" name="ncurses_use_default_colors" returns="int" signature="ncurses_use_default_colors(void)" src="ncurses_functions.c" />
      <scope doc="Returns current soft label keys attribute" ilk="function" name="ncurses_slk_attr" returns="int" signature="ncurses_slk_attr(void)" src="ncurses_functions.c" />
      <scope doc="Clears soft label keys from screen" ilk="function" name="ncurses_slk_clear" returns="int" signature="ncurses_slk_clear(void)" src="ncurses_functions.c" />
      <scope doc="Copies soft label keys to virtual screen" ilk="function" name="ncurses_slk_noutrefresh" returns="int" signature="ncurses_slk_noutrefresh(void)" src="ncurses_functions.c" />
      <scope doc="Copies soft label keys to screen" ilk="function" name="ncurses_slk_refresh" returns="int" signature="ncurses_slk_refresh(void)" src="ncurses_functions.c" />
      <scope doc="Restores soft label keys" ilk="function" name="ncurses_slk_restore" returns="int" signature="ncurses_slk_restore(void)" src="ncurses_functions.c" />
      <scope doc="Forces output when ncurses slk noutrefresh is performed" ilk="function" name="ncurses_slk_touch" returns="int" signature="ncurses_slk_touch(void)" src="ncurses_functions.c" />
      <scope doc="Sets function key labels" ilk="function" name="ncurses_slk_set" returns="bool" signature="ncurses_slk_set(int labelnr, string label, int format)" src="ncurses_functions.c" />
      <scope doc="Turns off the given attributes" ilk="function" name="ncurses_attroff" returns="int" signature="ncurses_attroff(int attributes)" src="ncurses_functions.c" />
      <scope doc="Turns on the given attributes" ilk="function" name="ncurses_attron" returns="int" signature="ncurses_attron(int attributes)" src="ncurses_functions.c" />
      <scope doc="Sets given attributes" ilk="function" name="ncurses_attrset" returns="int" signature="ncurses_attrset(int attributes)" src="ncurses_functions.c" />
      <scope doc="Sets background property for terminal screen" ilk="function" name="ncurses_bkgd" returns="int" signature="ncurses_bkgd(int attrchar)" src="ncurses_functions.c" />
      <scope doc="Sets cursor state" ilk="function" name="ncurses_curs_set" returns="int" signature="ncurses_curs_set(int visibility)" src="ncurses_functions.c" />
      <scope doc="Delays output on terminal using padding characters" ilk="function" name="ncurses_delay_output" returns="int" signature="ncurses_delay_output(int milliseconds)" src="ncurses_functions.c" />
      <scope doc="Single character output including refresh" ilk="function" name="ncurses_echochar" returns="int" signature="ncurses_echochar(int character)" src="ncurses_functions.c" />
      <scope doc="Puts terminal into halfdelay mode" ilk="function" name="ncurses_halfdelay" returns="int" signature="ncurses_halfdelay(int tenth)" src="ncurses_functions.c" />
      <scope doc="Checks for presence of a function key on terminal&#xA;keyboard" ilk="function" name="ncurses_has_key" returns="int" signature="ncurses_has_key(int keycode)" src="ncurses_functions.c" />
      <scope doc="Inserts character moving rest of line including&#xA;character at current position" ilk="function" name="ncurses_insch" returns="int" signature="ncurses_insch(int character)" src="ncurses_functions.c" />
      <scope doc="Inserts lines before current line scrolling down&#xA;negative numbers delete and scroll up" ilk="function" name="ncurses_insdelln" returns="int" signature="ncurses_insdelln(int count)" src="ncurses_functions.c" />
      <scope doc="Sets timeout for mouse button clicks" ilk="function" name="ncurses_mouseinterval" returns="int" signature="ncurses_mouseinterval(int milliseconds)" src="ncurses_functions.c" />
      <scope doc="Sleep" ilk="function" name="ncurses_napms" returns="int" signature="ncurses_napms(int milliseconds)" src="ncurses_functions.c" />
      <scope doc="Scrolls window content up or down without changing&#xA;current position" ilk="function" name="ncurses_scrl" returns="int" signature="ncurses_scrl(int count)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_slk_attroff" returns="int" signature="ncurses_slk_attroff(int intarg)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_slk_attron" returns="int" signature="ncurses_slk_attron(int intarg)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_slk_attrset" returns="int" signature="ncurses_slk_attrset(int intarg)" src="ncurses_functions.c" />
      <scope doc="Sets color for soft label keys" ilk="function" name="ncurses_slk_color" returns="int" signature="ncurses_slk_color(int intarg)" src="ncurses_functions.c" />
      <scope doc="Inits soft label keys" ilk="function" name="ncurses_slk_init" returns="int" signature="ncurses_slk_init(int intarg)" src="ncurses_functions.c" />
      <scope doc="Specifys different filedescriptor for typeahead&#xA;checking" ilk="function" name="ncurses_typeahead" returns="int" signature="ncurses_typeahead(int fd)" src="ncurses_functions.c" />
      <scope doc="Puts a character back into the input stream" ilk="function" name="ncurses_ungetch" returns="int" signature="ncurses_ungetch(int keycode)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_vidattr" returns="int" signature="ncurses_vidattr(int intarg)" src="ncurses_functions.c" />
      <scope doc="Controls use of extended names in terminfo descriptions" ilk="function" name="ncurses_use_extended_names" returns="int" signature="ncurses_use_extended_names(bool flag)" src="ncurses_functions.c" />
      <scope doc="Controls screen background" ilk="function" name="ncurses_bkgdset" returns="void" signature="ncurses_bkgdset(int attrchar)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_filter" returns="void" signature="ncurses_filter(void)" src="ncurses_functions.c" />
      <scope doc="Do not flush on signal characters" ilk="function" name="ncurses_noqiflush" returns="int" signature="ncurses_noqiflush(void)" src="ncurses_functions.c" />
      <scope doc="Flushes on signal characters" ilk="function" name="ncurses_qiflush" returns="void" signature="ncurses_qiflush(void)" src="ncurses_functions.c" />
      <scope doc="Sets timeout for special key sequences" ilk="function" name="ncurses_timeout" returns="void" signature="ncurses_timeout(int millisec)" src="ncurses_functions.c" />
      <scope doc="Controls use of environment information about terminal&#xA;size" ilk="function" name="ncurses_use_env" returns="void" signature="ncurses_use_env(int flag)" src="ncurses_functions.c" />
      <scope doc="Outputs text at current position" ilk="function" name="ncurses_addstr" returns="int" signature="ncurses_addstr(string text)" src="ncurses_functions.c" />
      <scope doc="" ilk="function" name="ncurses_putp" returns="int" signature="ncurses_putp(string text)" src="ncurses_functions.c" />
      <scope doc="Dumps screen content to file" ilk="function" name="ncurses_scr_dump" returns="int" signature="ncurses_scr_dump(string filename)" src="ncurses_functions.c" />
      <scope doc="Initializes screen from file dump" ilk="function" name="ncurses_scr_init" returns="int" signature="ncurses_scr_init(string filename)" src="ncurses_functions.c" />
      <scope doc="Restores screen from file dump" ilk="function" name="ncurses_scr_restore" returns="int" signature="ncurses_scr_restore(string filename)" src="ncurses_functions.c" />
      <scope doc="Inherits screen from file dump" ilk="function" name="ncurses_scr_set" returns="int" signature="ncurses_scr_set(string filename)" src="ncurses_functions.c" />
      <scope doc="Moves current position and add character" ilk="function" name="ncurses_mvaddch" returns="int" signature="ncurses_mvaddch(int y, int x, int c)" src="ncurses_functions.c" />
      <scope doc="Moves position and add attrributed string with&#xA;specified length" ilk="function" name="ncurses_mvaddchnstr" returns="int" signature="ncurses_mvaddchnstr(int y, int x, string s, int n)" src="ncurses_functions.c" />
      <scope doc="Adds attributed string with specified length at current&#xA;position" ilk="function" name="ncurses_addchnstr" returns="int" signature="ncurses_addchnstr(string s, int n)" src="ncurses_functions.c" />
      <scope doc="Moves position and add attributed string" ilk="function" name="ncurses_mvaddchstr" returns="int" signature="ncurses_mvaddchstr(int y, int x, string s)" src="ncurses_functions.c" />
      <scope doc="Adds attributed string at current position" ilk="function" name="ncurses_addchstr" returns="int" signature="ncurses_addchstr(string s)" src="ncurses_functions.c" />
      <scope doc="Moves position and add string with specified length" ilk="function" name="ncurses_mvaddnstr" returns="int" signature="ncurses_mvaddnstr(int y, int x, string s, int n)" src="ncurses_functions.c" />
      <scope doc="Adds string with specified length at current position" ilk="function" name="ncurses_addnstr" returns="int" signature="ncurses_addnstr(string s, int n)" src="ncurses_functions.c" />
      <scope doc="Moves position and add string" ilk="function" name="ncurses_mvaddstr" returns="int" signature="ncurses_mvaddstr(int y, int x, string s)" src="ncurses_functions.c" />
      <scope doc="Moves position and delete character shift rest of line&#xA;left" ilk="function" name="ncurses_mvdelch" returns="int" signature="ncurses_mvdelch(int y, int x)" src="ncurses_functions.c" />
      <scope doc="Moves position and get character at new position" ilk="function" name="ncurses_mvgetch" returns="int" signature="ncurses_mvgetch(int y, int x)" src="ncurses_functions.c" />
      <scope doc="Moves position and get attributed character at new&#xA;position" ilk="function" name="ncurses_mvinch" returns="int" signature="ncurses_mvinch(int y, int x)" src="ncurses_functions.c" />
      <scope doc="Inserts string at current position moving rest of line&#xA;right" ilk="function" name="ncurses_insstr" returns="int" signature="ncurses_insstr(string text)" src="ncurses_functions.c" />
      <scope doc="Reads string from terminal screen" ilk="function" name="ncurses_instr" returns="int" signature="ncurses_instr(string &amp;buffer)" src="ncurses_functions.c" />
      <scope doc="Sets new position and draw a horizontal line using an&#xA;attributed character and max n characters long" ilk="function" name="ncurses_mvhline" returns="int" signature="ncurses_mvhline(int y, int x, int attrchar, int n)" src="ncurses_functions.c" />
      <scope doc="Sets new position and draw a vertical line using an&#xA;attributed character and max n characters long" ilk="function" name="ncurses_mvvline" returns="int" signature="ncurses_mvvline(int y, int x, int attrchar, int n)" src="ncurses_functions.c" />
      <scope doc="Moves cursor immediately" ilk="function" name="ncurses_mvcur" returns="int" signature="ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)" src="ncurses_functions.c" />
      <scope doc="Sets new RGB value for color" ilk="function" name="ncurses_init_color" returns="int" signature="ncurses_init_color(int color, int r, int g, int b)" src="ncurses_functions.c" />
      <scope doc="Gets the RGB value for color" ilk="function" name="ncurses_color_content" returns="int" signature="ncurses_color_content(int color, int &amp;r, int &amp;g, int &amp;b)" src="ncurses_functions.c" />
      <scope doc="Gets the RGB value for color" ilk="function" name="ncurses_pair_content" returns="int" signature="ncurses_pair_content(int pair, int &amp;f, int &amp;b)" src="ncurses_functions.c" />
      <scope doc="Draws a border around the screen using attributed&#xA;characters" ilk="function" name="ncurses_border" returns="int" signature="ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)" src="ncurses_functions.c" />
      <scope doc="Draws a border around the window using attributed&#xA;characters" ilk="function" name="ncurses_wborder" returns="int" signature="ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)" src="ncurses_functions.c" />
      <scope doc="Defines default colors for color" ilk="function" name="ncurses_assume_default_colors" returns="int" signature="ncurses_assume_default_colors(int fg, int bg)" src="ncurses_functions.c" />
      <scope doc="Defines a keycode" ilk="function" name="ncurses_define_key" returns="int" signature="ncurses_define_key(string definition, int keycode)" src="ncurses_functions.c" />
      <scope doc="Draws a horizontal line at current position using an&#xA;attributed character and max n characters long" ilk="function" name="ncurses_hline" returns="int" signature="ncurses_hline(int charattr, int n)" src="ncurses_functions.c" />
      <scope doc="Draws a vertical line at current position using an&#xA;attributed character and max n characters long" ilk="function" name="ncurses_vline" returns="int" signature="ncurses_vline(int charattr, int n)" src="ncurses_functions.c" />
      <scope doc="Draws a horizontal line in a window at current position&#xA;using an attributed character and max n characters long" ilk="function" name="ncurses_whline" returns="int" signature="ncurses_whline(resource window, int charattr, int n)" src="ncurses_functions.c" />
      <scope doc="Draws a vertical line in a window at current position&#xA;using an attributed character and max n characters long" ilk="function" name="ncurses_wvline" returns="int" signature="ncurses_wvline(resource window, int charattr, int n)" src="ncurses_functions.c" />
      <scope doc="Enables or disable a keycode" ilk="function" name="ncurses_keyok" returns="int" signature="ncurses_keyok(int keycode, int enable)" src="ncurses_functions.c" />
      <scope doc="Adds string at new position in window" ilk="function" name="ncurses_mvwaddstr" returns="int" signature="ncurses_mvwaddstr(resource window, int y, int x, string text)" src="ncurses_functions.c" />
      <scope doc="Refreshes window on terminal screen" ilk="function" name="ncurses_wrefresh" returns="int" signature="ncurses_wrefresh(resource window)" src="ncurses_functions.c" />
      <scope doc="Returns terminal name" ilk="function" name="ncurses_termname" returns="string" signature="ncurses_termname(void)" src="ncurses_functions.c" />
      <scope doc="Returns terminal description" ilk="function" name="ncurses_longname" returns="string" signature="ncurses_longname(void)" src="ncurses_functions.c" />
      <scope doc="Returns and sets mouse options" ilk="function" name="ncurses_mousemask" returns="int" signature="ncurses_mousemask(int newmask, int &amp;oldmask)" src="ncurses_functions.c" />
      <scope doc="Reads mouse event from queue The content of mevent is&#xA;cleared before new data is added" ilk="function" name="ncurses_getmouse" returns="bool" signature="ncurses_getmouse(array &amp;mevent)" src="ncurses_functions.c" />
      <scope doc="Pushes mouse event to queue" ilk="function" name="ncurses_ungetmouse" returns="int" signature="ncurses_ungetmouse(array mevent)" src="ncurses_functions.c" />
      <scope doc="Transforms coordinates" ilk="function" name="ncurses_mouse_trafo" returns="bool" signature="ncurses_mouse_trafo(int &amp;y, int &amp;x, bool toscreen)" src="ncurses_functions.c" />
      <scope doc="Transforms window stdscr coordinates" ilk="function" name="ncurses_wmouse_trafo" returns="bool" signature="ncurses_wmouse_trafo(resource window, int &amp;y, int &amp;x, bool toscreen)" src="ncurses_functions.c" />
      <scope doc="Returns the current cursor position for a window" ilk="function" name="ncurses_getyx" returns="void" signature="ncurses_getyx(resource window, int &amp;y, int &amp;x)" src="ncurses_functions.c" />
      <scope doc="Returns the size of a window" ilk="function" name="ncurses_getmaxyx" returns="void" signature="ncurses_getmaxyx(resource window, int &amp;y, int &amp;x)" src="ncurses_functions.c" />
      <scope doc="Moves windows output position" ilk="function" name="ncurses_wmove" returns="int" signature="ncurses_wmove(resource window, int y, int x)" src="ncurses_functions.c" />
      <scope doc="Turns keypad on or off" ilk="function" name="ncurses_keypad" returns="int" signature="ncurses_keypad(resource window, bool bf)" src="ncurses_functions.c" />
      <scope doc="Sets windows color pairings" ilk="function" name="ncurses_wcolor_set" returns="int" signature="ncurses_wcolor_set(resource window, int color_pair)" src="ncurses_functions.c" />
      <scope doc="Clears window" ilk="function" name="ncurses_wclear" returns="int" signature="ncurses_wclear(resource window)" src="ncurses_functions.c" />
      <scope doc="Copies window to virtual screen" ilk="function" name="ncurses_wnoutrefresh" returns="int" signature="ncurses_wnoutrefresh(resource window)" src="ncurses_functions.c" />
      <scope doc="Outputs text at current postion in window" ilk="function" name="ncurses_waddstr" returns="int" signature="ncurses_waddstr(resource window, string str [, int n])" src="ncurses_functions.c" />
      <scope doc="Reads a character from keyboard window" ilk="function" name="ncurses_wgetch" returns="int" signature="ncurses_wgetch(resource window)" src="ncurses_functions.c" />
      <scope doc="Turns off attributes for a window" ilk="function" name="ncurses_wattroff" returns="int" signature="ncurses_wattroff(resource window, int attrs)" src="ncurses_functions.c" />
      <scope doc="Turns on attributes for a window" ilk="function" name="ncurses_wattron" returns="int" signature="ncurses_wattron(resource window, int attrs)" src="ncurses_functions.c" />
      <scope doc="Set the attributes for a window" ilk="function" name="ncurses_wattrset" returns="int" signature="ncurses_wattrset(resource window, int attrs)" src="ncurses_functions.c" />
      <scope doc="End standout mode for a window" ilk="function" name="ncurses_wstandend" returns="int" signature="ncurses_wstandend(resource window)" src="ncurses_functions.c" />
      <scope doc="Enter standout mode for a window" ilk="function" name="ncurses_wstandout" returns="int" signature="ncurses_wstandout(resource window)" src="ncurses_functions.c" />
      <scope doc="Create a new panel and associate it with window" ilk="function" name="ncurses_new_panel" returns="resource" signature="ncurses_new_panel(resource window)" src="ncurses_functions.c" />
      <scope doc="Remove panel from the stack and delete it but not the&#xA;associated window" ilk="function" name="ncurses_del_panel" returns="bool" signature="ncurses_del_panel(resource panel)" src="ncurses_functions.c" />
      <scope doc="Remove panel from the stack making it invisible" ilk="function" name="ncurses_hide_panel" returns="int" signature="ncurses_hide_panel(resource panel)" src="ncurses_functions.c" />
      <scope doc="Places an invisible panel on top of the stack making it&#xA;visible" ilk="function" name="ncurses_show_panel" returns="int" signature="ncurses_show_panel(resource panel)" src="ncurses_functions.c" />
      <scope doc="Moves a visible panel to the top of the stack" ilk="function" name="ncurses_top_panel" returns="int" signature="ncurses_top_panel(resource panel)" src="ncurses_functions.c" />
      <scope doc="Moves a visible panel to the bottom of the stack" ilk="function" name="ncurses_bottom_panel" returns="int" signature="ncurses_bottom_panel(resource panel)" src="ncurses_functions.c" />
      <scope doc="Moves a panel so that it&apos;s upper-left corner is at&#xA;startx starty" ilk="function" name="ncurses_move_panel" returns="int" signature="ncurses_move_panel(resource panel, int startx, int starty)" src="ncurses_functions.c" />
      <scope doc="Replaces the window associated with panel" ilk="function" name="ncurses_replace_panel" returns="int" signature="ncurses_replace_panel(resource panel, resource window)" src="ncurses_functions.c" />
      <scope doc="Returns the panel above panel If panel is null returns&#xA;the bottom panel in the stack" ilk="function" name="ncurses_panel_above" returns="resource" signature="ncurses_panel_above(resource panel)" src="ncurses_functions.c" />
      <scope doc="Returns the panel below panel If panel is null returns&#xA;the top panel in the stack" ilk="function" name="ncurses_panel_below" returns="resource" signature="ncurses_panel_below(resource panel)" src="ncurses_functions.c" />
      <scope doc="Returns the window associated with panel" ilk="function" name="ncurses_panel_window" returns="resource" signature="ncurses_panel_window(resource panel)" src="ncurses_functions.c" />
      <scope doc="Refreshes the virtual screen to reflect the relations&#xA;between panels in the stack" ilk="function" name="ncurses_update_panels" returns="void" signature="ncurses_update_panels(void)" src="ncurses_functions.c" />
      <scope doc="Define a PHP variable to an Oracle column by name" ilk="function" name="oci_define_by_name" returns="bool" signature="oci_define_by_name(resource stmt, string name, mixed &amp;var [, int type])" src="oci8_interface.c" />
      <scope doc="Bind a PHP variable to an Oracle placeholder by name" ilk="function" name="oci_bind_by_name" returns="bool" signature="oci_bind_by_name(resource stmt, string name, mixed &amp;var, [, int maxlength [, int type]])" src="oci8_interface.c" />
      <scope doc="Bind a PHP array to an Oracle PL SQL type by name" ilk="function" name="oci_bind_array_by_name" returns="bool" signature="oci_bind_array_by_name(resource stmt, string name, array &amp;var, int max_table_length [, int max_item_length [, int type ]])" src="oci8_interface.c" />
      <scope doc="Deletes large object description" ilk="function" name="oci_free_descriptor" returns="bool" signature="oci_free_descriptor()" src="oci8_interface.c" />
      <scope doc="Saves a large object" ilk="function" name="oci_lob_save" returns="bool" signature="oci_lob_save( string data [, int offset ])" src="oci8_interface.c" />
      <scope doc="Loads file into a LOB" ilk="function" name="oci_lob_import" returns="bool" signature="oci_lob_import( string filename )" src="oci8_interface.c" />
      <scope doc="Loads a large object" ilk="function" name="oci_lob_load" returns="string" signature="oci_lob_load()" src="oci8_interface.c" />
      <scope doc="Reads particular part of a large object" ilk="function" name="oci_lob_read" returns="string" signature="oci_lob_read( int length )" src="oci8_interface.c" />
      <scope doc="Checks if EOF is reached" ilk="function" name="oci_lob_eof" returns="bool" signature="oci_lob_eof()" src="oci8_interface.c" />
      <scope doc="Tells LOB pointer position" ilk="function" name="oci_lob_tell" returns="int" signature="oci_lob_tell()" src="oci8_interface.c" />
      <scope doc="Rewind pointer of a LOB" ilk="function" name="oci_lob_rewind" returns="bool" signature="oci_lob_rewind()" src="oci8_interface.c" />
      <scope doc="Moves the pointer of a LOB" ilk="function" name="oci_lob_seek" returns="bool" signature="oci_lob_seek( int offset [, int whence ])" src="oci8_interface.c" />
      <scope doc="Returns size of a large object" ilk="function" name="oci_lob_size" returns="int" signature="oci_lob_size()" src="oci8_interface.c" />
      <scope doc="Writes data to current position of a LOB" ilk="function" name="oci_lob_write" returns="int" signature="oci_lob_write( string string [, int length ])" src="oci8_interface.c" />
      <scope doc="Appends data from a LOB to another LOB" ilk="function" name="oci_lob_append" returns="bool" signature="oci_lob_append( object lob )" src="oci8_interface.c" />
      <scope doc="Truncates a LOB" ilk="function" name="oci_lob_truncate" returns="bool" signature="oci_lob_truncate( [ int length ])" src="oci8_interface.c" />
      <scope doc="Erases a specified portion of the internal LOB starting&#xA;at a specified offset" ilk="function" name="oci_lob_erase" returns="int" signature="oci_lob_erase( [ int offset [, int length ] ] )" src="oci8_interface.c" />
      <scope doc="Flushes the LOB buffer" ilk="function" name="oci_lob_flush" returns="bool" signature="oci_lob_flush( [ int flag ] )" src="oci8_interface.c" />
      <scope doc="Enables disables buffering for a LOB" ilk="function" name="ocisetbufferinglob" returns="bool" signature="ocisetbufferinglob( boolean flag )" src="oci8_interface.c" />
      <scope doc="Returns current state of buffering for a LOB" ilk="function" name="ocigetbufferinglob" returns="bool" signature="ocigetbufferinglob()" src="oci8_interface.c" />
      <scope doc="Copies data from a LOB to another LOB" ilk="function" name="oci_lob_copy" returns="bool" signature="oci_lob_copy( object lob_to, object lob_from [, int length ] )" src="oci8_interface.c" />
      <scope doc="Tests to see if two LOB FILE locators are equal" ilk="function" name="oci_lob_is_equal" returns="bool" signature="oci_lob_is_equal( object lob1, object lob2 )" src="oci8_interface.c" />
      <scope doc="Writes a large object into a file" ilk="function" name="oci_lob_export" returns="bool" signature="oci_lob_export([string filename [, int start [, int length]]])" src="oci8_interface.c" />
      <scope doc="Writes temporary blob" ilk="function" name="oci_lob_write_temporary" returns="bool" signature="oci_lob_write_temporary(string var [, int lob_type])" src="oci8_interface.c" />
      <scope doc="Closes lob descriptor" ilk="function" name="oci_lob_close" returns="bool" signature="oci_lob_close()" src="oci8_interface.c" />
      <scope doc="Initialize a new empty descriptor LOB FILE LOB is&#xA;default" ilk="function" name="oci_new_descriptor" returns="object" signature="oci_new_descriptor(resource connection [, int type])" src="oci8_interface.c" />
      <scope doc="Rollback the current context" ilk="function" name="oci_rollback" returns="bool" signature="oci_rollback(resource connection)" src="oci8_interface.c" />
      <scope doc="Commit the current context" ilk="function" name="oci_commit" returns="bool" signature="oci_commit(resource connection)" src="oci8_interface.c" />
      <scope doc="Tell the name of a column" ilk="function" name="oci_field_name" returns="string" signature="oci_field_name(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell the maximum data size of a column" ilk="function" name="oci_field_size" returns="int" signature="oci_field_size(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell the scale of a column" ilk="function" name="oci_field_scale" returns="int" signature="oci_field_scale(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell the precision of a column" ilk="function" name="oci_field_precision" returns="int" signature="oci_field_precision(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell the data type of a column" ilk="function" name="oci_field_type" returns="mixed" signature="oci_field_type(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell the raw oracle data type of a column" ilk="function" name="oci_field_type_raw" returns="int" signature="oci_field_type_raw(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Tell whether a column is NULL" ilk="function" name="oci_field_is_null" returns="bool" signature="oci_field_is_null(resource stmt, int col)" src="oci8_interface.c" />
      <scope doc="Toggle internal debugging output for the OCI extension" ilk="function" name="oci_internal_debug" returns="void" signature="oci_internal_debug(int onoff)" src="oci8_interface.c" />
      <scope doc="Execute a parsed statement" ilk="function" name="oci_execute" returns="bool" signature="oci_execute(resource stmt [, int mode])" src="oci8_interface.c" />
      <scope doc="Cancel reading from a cursor" ilk="function" name="oci_cancel" returns="bool" signature="oci_cancel(resource stmt)" src="oci8_interface.c" />
      <scope doc="Prepare a new row of data for reading" ilk="function" name="oci_fetch" returns="bool" signature="oci_fetch(resource stmt)" src="oci8_interface.c" />
      <scope doc="Fetch a row of result data into an array" ilk="function" name="ocifetchinto" returns="int" signature="ocifetchinto(resource stmt, array &amp;output [, int mode])" src="oci8_interface.c" />
      <scope doc="Fetch all rows of result data into an array" ilk="function" name="oci_fetch_all" returns="int" signature="oci_fetch_all(resource stmt, array &amp;output[, int skip[, int maxrows[, int flags]]])" src="oci8_interface.c" />
      <scope doc="Fetch a result row as an object" ilk="function" name="oci_fetch_object" returns="object" signature="oci_fetch_object( resource stmt )" src="oci8_interface.c" />
      <scope doc="Fetch a result row as an enumerated array" ilk="function" name="oci_fetch_row" returns="array" signature="oci_fetch_row( resource stmt )" src="oci8_interface.c" />
      <scope doc="Fetch a result row as an associative array" ilk="function" name="oci_fetch_assoc" returns="array" signature="oci_fetch_assoc( resource stmt )" src="oci8_interface.c" />
      <scope doc="Fetch a result row as an array" ilk="function" name="oci_fetch_array" returns="array" signature="oci_fetch_array( resource stmt [, int mode ])" src="oci8_interface.c" />
      <scope doc="Free all resources associated with a statement" ilk="function" name="oci_free_statement" returns="bool" signature="oci_free_statement(resource stmt)" src="oci8_interface.c" />
      <scope doc="Disconnect from database" ilk="function" name="oci_close" returns="bool" signature="oci_close(resource connection)" src="oci8_interface.c" />
      <scope doc="Connect to an Oracle database and log on Returns a new&#xA;session" ilk="function" name="oci_new_connect" returns="resource" signature="oci_new_connect(string user, string pass [, string db])" src="oci8_interface.c" />
      <scope doc="Connect to an Oracle database and log on Returns a new&#xA;session" ilk="function" name="oci_connect" returns="resource" signature="oci_connect(string user, string pass [, string db [, string charset [, int session_mode ]])" src="oci8_interface.c" />
      <scope doc="Connect to an Oracle database using a persistent&#xA;connection and log on Returns a new session" ilk="function" name="oci_pconnect" returns="resource" signature="oci_pconnect(string user, string pass [, string db [, string charset ]])" src="oci8_interface.c" />
      <scope doc="Return the last error of stmt" ilk="function" name="oci_error" returns="array" signature="oci_error([resource stmt" src="oci8_interface.c" />
      <scope doc="Return the number of result columns in a statement" ilk="function" name="oci_num_fields" returns="int" signature="oci_num_fields(resource stmt)" src="oci8_interface.c" />
      <scope doc="Parse a query and return a statement" ilk="function" name="oci_parse" returns="resource" signature="oci_parse(resource connection, string query)" src="oci8_interface.c" />
      <scope doc="Sets the number of rows to be prefetched on execute to&#xA;prefetch rows for stmt" ilk="function" name="oci_set_prefetch" returns="bool" signature="oci_set_prefetch(resource stmt, int prefetch_rows)" src="oci8_interface.c" />
      <scope doc="Changes the password of an account" ilk="function" name="oci_password_change" returns="bool" signature="oci_password_change(resource connection, string username, string old_password, string new_password)" src="oci8_interface.c" />
      <scope doc="Return a new cursor Statement-Handle - use this to bind&#xA;ref-cursors" ilk="function" name="oci_new_cursor" returns="resource" signature="oci_new_cursor(resource connection)" src="oci8_interface.c" />
      <scope doc="Return a single column of result data" ilk="function" name="oci_result" returns="string" signature="oci_result(resource stmt, mixed column)" src="oci8_interface.c" />
      <scope doc="Return a string containing server version information" ilk="function" name="oci_server_version" returns="string" signature="oci_server_version(resource connection)" src="oci8_interface.c" />
      <scope doc="Return the query type of an OCI statement" ilk="function" name="oci_statement_type" returns="string" signature="oci_statement_type(resource stmt)" src="oci8_interface.c" />
      <scope doc="Return the row count of an OCI statement" ilk="function" name="oci_num_rows" returns="int" signature="oci_num_rows(resource stmt)" src="oci8_interface.c" />
      <scope doc="Deletes collection object" ilk="function" name="oci_free_collection" returns="bool" signature="oci_free_collection()" src="oci8_interface.c" />
      <scope doc="Append an object to the collection" ilk="function" name="oci_collection_append" returns="bool" signature="oci_collection_append(string value)" src="oci8_interface.c" />
      <scope doc="Retrieve the value at collection index ndx" ilk="function" name="oci_collection_element_get" returns="string" signature="oci_collection_element_get(int ndx)" src="oci8_interface.c" />
      <scope doc="Assign a collection from another existing collection" ilk="function" name="oci_collection_assign" returns="bool" signature="oci_collection_assign(object from)" src="oci8_interface.c" />
      <scope doc="Assign element val to collection at index ndx" ilk="function" name="oci_collection_element_assign" returns="bool" signature="oci_collection_element_assign(int index, string val)" src="oci8_interface.c" />
      <scope doc="Return the size of a collection" ilk="function" name="oci_collection_size" returns="int" signature="oci_collection_size()" src="oci8_interface.c" />
      <scope doc="Return the max value of a collection For a varray this&#xA;is the maximum length of the array" ilk="function" name="oci_collection_max" returns="int" signature="oci_collection_max()" src="oci8_interface.c" />
      <scope doc="Trim num elements from the end of a collection" ilk="function" name="oci_collection_trim" returns="bool" signature="oci_collection_trim(int num)" src="oci8_interface.c" />
      <scope doc="Initialize a new collection" ilk="function" name="oci_new_collection" returns="object" signature="oci_new_collection(resource connection, string tdo [, string schema])" src="oci8_interface.c" />
      <scope doc="" ilk="function" name="birdstep_connect" returns="int" signature="birdstep_connect(string server, string user, string pass)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_close" returns="bool" signature="birdstep_close(int id)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_exec" returns="int" signature="birdstep_exec(int index, string exec_str)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_fetch" returns="bool" signature="birdstep_fetch(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_result" returns="mixed" signature="birdstep_result(int index, int col)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_freeresult" returns="bool" signature="birdstep_freeresult(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_autocommit" returns="bool" signature="birdstep_autocommit(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_off_autocommit" returns="bool" signature="birdstep_off_autocommit(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_commit" returns="bool" signature="birdstep_commit(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_rollback" returns="bool" signature="birdstep_rollback(int index)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_fieldname" returns="string" signature="birdstep_fieldname(int index, int col)" src="birdstep.c" />
      <scope doc="" ilk="function" name="birdstep_fieldnum" returns="int" signature="birdstep_fieldnum(int index)" src="birdstep.c" />
      <scope doc="Close all ODBC connections" ilk="function" name="odbc_close_all" returns="void" signature="odbc_close_all(void)" src="php_odbc.c" />
      <scope doc="Handle binary column data" ilk="function" name="odbc_binmode" returns="bool" signature="odbc_binmode(int result_id, int mode)" src="php_odbc.c" />
      <scope doc="Handle LONG columns" ilk="function" name="odbc_longreadlen" returns="bool" signature="odbc_longreadlen(int result_id, int length)" src="php_odbc.c" />
      <scope doc="Prepares a statement for execution" ilk="function" name="odbc_prepare" returns="resource" signature="odbc_prepare(resource connection_id, string query)" src="php_odbc.c" />
      <scope doc="Execute a prepared statement" ilk="function" name="odbc_execute" returns="bool" signature="odbc_execute(resource result_id [, array parameters_array])" src="php_odbc.c" />
      <scope doc="Get cursor name" ilk="function" name="odbc_cursor" returns="string" signature="odbc_cursor(resource result_id)" src="php_odbc.c" />
      <scope doc="Return information about the currently connected data&#xA;source" ilk="function" name="odbc_data_source" returns="array" signature="odbc_data_source(resource connection_id, int fetch_type)" src="php_odbc.c" />
      <scope doc="Prepare and execute an SQL statement" ilk="function" name="odbc_exec" returns="resource" signature="odbc_exec(resource connection_id, string query [, int flags])" src="php_odbc.c" />
      <scope doc="Fetch a result row as an object" ilk="function" name="odbc_fetch_object" returns="object" signature="odbc_fetch_object(int result [, int rownumber])" src="php_odbc.c" />
      <scope doc="Fetch a result row as an associative array" ilk="function" name="odbc_fetch_array" returns="array" signature="odbc_fetch_array(int result [, int rownumber])" src="php_odbc.c" />
      <scope doc="Fetch one result row into an array" ilk="function" name="odbc_fetch_into" returns="int" signature="odbc_fetch_into(resource result_id, array result_array, [, int rownumber])" src="php_odbc.c" />
      <scope doc="" ilk="function" name="solid_fetch_prev" returns="bool" signature="solid_fetch_prev(resource result_id)" src="php_odbc.c" />
      <scope doc="Fetch a row" ilk="function" name="odbc_fetch_row" returns="bool" signature="odbc_fetch_row(resource result_id [, int row_number])" src="php_odbc.c" />
      <scope doc="Get result data" ilk="function" name="odbc_result" returns="mixed" signature="odbc_result(resource result_id, mixed field)" src="php_odbc.c" />
      <scope doc="Print result as HTML table" ilk="function" name="odbc_result_all" returns="int" signature="odbc_result_all(resource result_id [, string format])" src="php_odbc.c" />
      <scope doc="Free resources associated with a result" ilk="function" name="odbc_free_result" returns="bool" signature="odbc_free_result(resource result_id)" src="php_odbc.c" />
      <scope doc="Connect to a datasource" ilk="function" name="odbc_connect" returns="resource" signature="odbc_connect(string DSN, string user, string password [, int cursor_option])" src="php_odbc.c" />
      <scope doc="Establish a persistent connection to a datasource" ilk="function" name="odbc_pconnect" returns="resource" signature="odbc_pconnect(string DSN, string user, string password [, int cursor_option])" src="php_odbc.c" />
      <scope doc="Close an ODBC connection" ilk="function" name="odbc_close" returns="void" signature="odbc_close(resource connection_id)" src="php_odbc.c" />
      <scope doc="Get number of rows in a result" ilk="function" name="odbc_num_rows" returns="int" signature="odbc_num_rows(resource result_id)" src="php_odbc.c" />
      <scope doc="Checks if multiple results are avaiable" ilk="function" name="odbc_next_result" returns="bool" signature="odbc_next_result(resource result_id)" src="php_odbc.c" />
      <scope doc="Get number of columns in a result" ilk="function" name="odbc_num_fields" returns="int" signature="odbc_num_fields(resource result_id)" src="php_odbc.c" />
      <scope doc="Get a column name" ilk="function" name="odbc_field_name" returns="string" signature="odbc_field_name(resource result_id, int field_number)" src="php_odbc.c" />
      <scope doc="Get the datatype of a column" ilk="function" name="odbc_field_type" returns="string" signature="odbc_field_type(resource result_id, int field_number)" src="php_odbc.c" />
      <scope doc="Get the length precision of a column" ilk="function" name="odbc_field_len" returns="int" signature="odbc_field_len(resource result_id, int field_number)" src="php_odbc.c" />
      <scope doc="Get the scale of a column" ilk="function" name="odbc_field_scale" returns="int" signature="odbc_field_scale(resource result_id, int field_number)" src="php_odbc.c" />
      <scope doc="Return column number" ilk="function" name="odbc_field_num" returns="int" signature="odbc_field_num(resource result_id, string field_name)" src="php_odbc.c" />
      <scope doc="Toggle autocommit mode or get status" ilk="function" name="odbc_autocommit" returns="mixed" signature="odbc_autocommit(resource connection_id [, int OnOff])" src="php_odbc.c" />
      <scope doc="Commit an ODBC transaction" ilk="function" name="odbc_commit" returns="bool" signature="odbc_commit(resource connection_id)" src="php_odbc.c" />
      <scope doc="Rollback a transaction" ilk="function" name="odbc_rollback" returns="bool" signature="odbc_rollback(resource connection_id)" src="php_odbc.c" />
      <scope doc="Get the last error code" ilk="function" name="odbc_error" returns="string" signature="odbc_error([resource connection_id])" src="php_odbc.c" />
      <scope doc="Get the last error message" ilk="function" name="odbc_errormsg" returns="string" signature="odbc_errormsg([resource connection_id])" src="php_odbc.c" />
      <scope doc="Sets connection or statement options" ilk="function" name="odbc_setoption" returns="bool" signature="odbc_setoption(resource conn_id" src="php_odbc.c" />
      <scope doc="Call the SQLTables function" ilk="function" name="odbc_tables" returns="resource" signature="odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string table_types]]]])" src="php_odbc.c" />
      <scope doc="Returns a result identifier that can be used to fetch a&#xA;list of column names in specified tables" ilk="function" name="odbc_columns" returns="resource" signature="odbc_columns(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])" src="php_odbc.c" />
      <scope doc="Returns a result identifier that can be used to fetch a&#xA;list of columns and associated privileges for the&#xA;specified" ilk="function" name="odbc_columnprivileges" returns="resource" signature="odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)" src="php_odbc.c" />
      <scope doc="Returns a result identifier to either a list of foreign&#xA;keys in the specified table or a list of foreign" ilk="function" name="odbc_foreignkeys" returns="resource" signature="odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)" src="php_odbc.c" />
      <scope doc="Returns a result identifier containing information&#xA;about data types supported by the data source" ilk="function" name="odbc_gettypeinfo" returns="resource" signature="odbc_gettypeinfo(resource connection_id [, int data_type])" src="php_odbc.c" />
      <scope doc="Returns a result identifier listing the column names&#xA;that comprise the primary key for a table" ilk="function" name="odbc_primarykeys" returns="resource" signature="odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)" src="php_odbc.c" />
      <scope doc="Returns a result identifier containing the list of&#xA;input and output parameters as well as the columns that&#xA;make up" ilk="function" name="odbc_procedurecolumns" returns="resource" signature="odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])" src="php_odbc.c" />
      <scope doc="Returns a result identifier containg the list of&#xA;procedure names in a datasource" ilk="function" name="odbc_procedures" returns="resource" signature="odbc_procedures(resource connection_id [, string qualifier, string owner, string name])" src="php_odbc.c" />
      <scope doc="Returns a result identifier containing either the&#xA;optimal set of columns that uniquely identifies a row&#xA;in the table or" ilk="function" name="odbc_specialcolumns" returns="resource" signature="odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)" src="php_odbc.c" />
      <scope doc="Returns a result identifier that contains statistics&#xA;about a single table and the indexes associated with&#xA;the table" ilk="function" name="odbc_statistics" returns="resource" signature="odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)" src="php_odbc.c" />
      <scope doc="Returns a result identifier containing a list of tables&#xA;and the privileges associated with each table" ilk="function" name="odbc_tableprivileges" returns="resource" signature="odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)" src="php_odbc.c" />
      <scope doc="Exports a CERT to file or a var" ilk="function" name="openssl_x509_export_to_file" returns="bool" signature="openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])" src="openssl.c" />
      <scope doc="Exports a CERT to file or a var" ilk="function" name="openssl_x509_export" returns="bool" signature="openssl_x509_export(mixed x509, string &amp;out [, bool notext = true])" src="openssl.c" />
      <scope doc="Checks if a private key corresponds to a CERT" ilk="function" name="openssl_x509_check_private_key" returns="bool" signature="openssl_x509_check_private_key(mixed cert, mixed key)" src="openssl.c" />
      <scope doc="Returns an array of the fields values of the CERT" ilk="function" name="openssl_x509_parse" returns="array" signature="openssl_x509_parse(mixed x509 [, bool shortnames=true])" src="openssl.c" />
      <scope doc="Checks the CERT to see if it can be used for the&#xA;purpose in purpose cainfo holds information about&#xA;trusted" ilk="function" name="openssl_x509_checkpurpose" returns="int" signature="openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])" src="openssl.c" />
      <scope doc="Reads X certificates" ilk="function" name="openssl_x509_read" returns="resource" signature="openssl_x509_read(mixed cert)" src="openssl.c" />
      <scope doc="Frees X certificates" ilk="function" name="openssl_x509_free" returns="void" signature="openssl_x509_free(resource x509)" src="openssl.c" />
      <scope doc="Creates and exports a PKCS to file" ilk="function" name="openssl_pkcs12_export_to_file" returns="bool" signature="openssl_pkcs12_export_to_file(mixed x509, string filename, mixed priv_key, string pass[, array args])" src="openssl.c" />
      <scope doc="Creates and exports a PKCS to a var" ilk="function" name="openssl_pkcs12_export" returns="bool" signature="openssl_pkcs12_export(mixed x509, string &amp;out, mixed priv_key, string pass[, array args])" src="openssl.c" />
      <scope doc="Parses a PKCS to an array" ilk="function" name="openssl_pkcs12_read" returns="bool" signature="openssl_pkcs12_read(string PKCS12, array &amp;certs, string pass)" src="openssl.c" />
      <scope doc="Exports a CSR to file" ilk="function" name="openssl_csr_export_to_file" returns="bool" signature="openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])" src="openssl.c" />
      <scope doc="Exports a CSR to file or a var" ilk="function" name="openssl_csr_export" returns="bool" signature="openssl_csr_export(resource csr, string &amp;out [, bool notext=true])" src="openssl.c" />
      <scope doc="Signs a cert with another CERT" ilk="function" name="openssl_csr_sign" returns="resource" signature="openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])" src="openssl.c" />
      <scope doc="Generates a privkey and CSR" ilk="function" name="openssl_csr_new" returns="bool" signature="openssl_csr_new(array dn, resource &amp;privkey [, array configargs, array extraattribs])" src="openssl.c" />
      <scope doc="Returns the subject of a CERT or FALSE on error" ilk="function" name="openssl_csr_get_subject" returns="mixed" signature="openssl_csr_get_subject(mixed csr)" src="openssl.c" />
      <scope doc="Returns the subject of a CERT or FALSE on error" ilk="function" name="openssl_csr_get_public_key" returns="mixed" signature="openssl_csr_get_public_key(mixed csr)" src="openssl.c" />
      <scope doc="Generates a new private key" ilk="function" name="openssl_pkey_new" returns="resource" signature="openssl_pkey_new([array configargs])" src="openssl.c" />
      <scope doc="Gets an exportable representation of a key into a file" ilk="function" name="openssl_pkey_export_to_file" returns="bool" signature="openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)" src="openssl.c" />
      <scope doc="Gets an exportable representation of a key into a&#xA;string or file" ilk="function" name="openssl_pkey_export" returns="bool" signature="openssl_pkey_export(mixed key, &amp;mixed out [, string passphrase [, array config_args]])" src="openssl.c" />
      <scope doc="Gets public key from X certificate" ilk="function" name="openssl_pkey_get_public" returns="int" signature="openssl_pkey_get_public(mixed cert)" src="openssl.c" />
      <scope doc="Frees a key" ilk="function" name="openssl_pkey_free" returns="void" signature="openssl_pkey_free(int key)" src="openssl.c" />
      <scope doc="Gets private keys" ilk="function" name="openssl_pkey_get_private" returns="int" signature="openssl_pkey_get_private(string key [, string passphrase])" src="openssl.c" />
      <scope doc="returns an array with the key details bits pkey type" ilk="function" name="openssl_pkey_get_details" returns="resource" signature="openssl_pkey_get_details(resource key)" src="openssl.c" />
      <scope doc="Verifys that the data block is intact the signer is who&#xA;they say they are and returns the CERTs of" ilk="function" name="openssl_pkcs7_verify" returns="bool" signature="openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts [, string content]]]])" src="openssl.c" />
      <scope doc="Encrypts the message in the file named infile with the&#xA;certificates in recipcerts and output the result to the&#xA;file" ilk="function" name="openssl_pkcs7_encrypt" returns="bool" signature="openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])" src="openssl.c" />
      <scope doc="Signs the MIME message in the file named infile with&#xA;signcert signkey and output the result to file name&#xA;outfile" ilk="function" name="openssl_pkcs7_sign" returns="bool" signature="openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])" src="openssl.c" />
      <scope doc="Decrypts the S MIME message in the file name infilename&#xA;and output the results to the file name outfilename&#xA;recipcert" ilk="function" name="openssl_pkcs7_decrypt" returns="bool" signature="openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])" src="openssl.c" />
      <scope doc="Encrypts data with private key" ilk="function" name="openssl_private_encrypt" returns="bool" signature="openssl_private_encrypt(string data, string crypted, mixed key [, int padding])" src="openssl.c" />
      <scope doc="Decrypts data with private key" ilk="function" name="openssl_private_decrypt" returns="bool" signature="openssl_private_decrypt(string data, string decrypted, mixed key [, int padding])" src="openssl.c" />
      <scope doc="Encrypts data with public key" ilk="function" name="openssl_public_encrypt" returns="bool" signature="openssl_public_encrypt(string data, string crypted, mixed key [, int padding])" src="openssl.c" />
      <scope doc="Decrypts data with public key" ilk="function" name="openssl_public_decrypt" returns="bool" signature="openssl_public_decrypt(string data, string crypted, resource key [, int padding])" src="openssl.c" />
      <scope doc="Returns a description of the last error and alters the&#xA;index of the error messages Returns false when the are" ilk="function" name="openssl_error_string" returns="mixed" signature="openssl_error_string(void)" src="openssl.c" />
      <scope doc="Signs data" ilk="function" name="openssl_sign" returns="bool" signature="openssl_sign(string data, &amp;string signature, mixed key[, int signature_alg])" src="openssl.c" />
      <scope doc="Verifys data" ilk="function" name="openssl_verify" returns="int" signature="openssl_verify(string data, string signature, mixed key)" src="openssl.c" />
      <scope doc="Seals data" ilk="function" name="openssl_seal" returns="int" signature="openssl_seal(string data, &amp;string sealdata, &amp;array ekeys, array pubkeys)" src="openssl.c" />
      <scope doc="Opens data" ilk="function" name="openssl_open" returns="bool" signature="openssl_open(string data, &amp;string opendata, string ekey, mixed privkey)" src="openssl.c" />
      <scope doc="Forks the currently running process following the same&#xA;behavior as the UNIX fork system call" ilk="function" name="pcntl_fork" returns="int" signature="pcntl_fork(void)" src="pcntl.c" />
      <scope doc="Set an alarm clock for delivery of a signal" ilk="function" name="pcntl_alarm" returns="int" signature="pcntl_alarm(int seconds)" src="pcntl.c" />
      <scope doc="Waits on or returns the status of a forked child as&#xA;defined by the waitpid system call" ilk="function" name="pcntl_waitpid" returns="int" signature="pcntl_waitpid(int pid, int &amp;status, int options)" src="pcntl.c" />
      <scope doc="Waits on or returns the status of a forked child as&#xA;defined by the waitpid system call" ilk="function" name="pcntl_wait" returns="int" signature="pcntl_wait(int &amp;status)" src="pcntl.c" />
      <scope doc="Returns true if the child status code represents a&#xA;successful exit" ilk="function" name="pcntl_wifexited" returns="bool" signature="pcntl_wifexited(int status)" src="pcntl.c" />
      <scope doc="Returns true if the child status code represents a&#xA;stopped process WUNTRACED must have been used with&#xA;waitpid" ilk="function" name="pcntl_wifstopped" returns="bool" signature="pcntl_wifstopped(int status)" src="pcntl.c" />
      <scope doc="Returns true if the child status code represents a&#xA;process that was terminated due to a signal" ilk="function" name="pcntl_wifsignaled" returns="bool" signature="pcntl_wifsignaled(int status)" src="pcntl.c" />
      <scope doc="Returns the status code of a child&apos;s exit" ilk="function" name="pcntl_wexitstatus" returns="int" signature="pcntl_wexitstatus(int status)" src="pcntl.c" />
      <scope doc="Returns the number of the signal that terminated the&#xA;process who&apos;s status code is passed" ilk="function" name="pcntl_wtermsig" returns="int" signature="pcntl_wtermsig(int status)" src="pcntl.c" />
      <scope doc="Returns the number of the signal that caused the&#xA;process to stop who&apos;s status code is passed" ilk="function" name="pcntl_wstopsig" returns="int" signature="pcntl_wstopsig(int status)" src="pcntl.c" />
      <scope doc="Executes specified program in current process space as&#xA;defined by exec" ilk="function" name="pcntl_exec" returns="bool" signature="pcntl_exec(string path [, array args [, array envs]])" src="pcntl.c" />
      <scope doc="Assigns a system signal handler to a PHP function" ilk="function" name="pcntl_signal" returns="bool" signature="pcntl_signal(int signo, callback handle [, bool restart_syscalls])" src="pcntl.c" />
      <scope doc="Get the priority of any process" ilk="function" name="pcntl_getpriority" returns="int" signature="pcntl_getpriority([int pid [, int process_identifier]])" src="pcntl.c" />
      <scope doc="Change the priority of any process" ilk="function" name="pcntl_setpriority" returns="bool" signature="pcntl_setpriority(int priority [, int pid [, int process_identifier]])" src="pcntl.c" />
      <scope doc="Perform a Perl-style regular expression match" ilk="function" name="preg_match" returns="int" signature="preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset]]])" src="php_pcre.c" />
      <scope doc="Perform a Perl-style global regular expression match" ilk="function" name="preg_match_all" returns="int" signature="preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])" src="php_pcre.c" />
      <scope doc="Perform Perl-style regular expression replacement" ilk="function" name="preg_replace" returns="string" signature="preg_replace(mixed regex, mixed replace, mixed subject [, int limit [, count]])" src="php_pcre.c" />
      <scope doc="Perform Perl-style regular expression replacement using&#xA;replacement callback" ilk="function" name="preg_replace_callback" returns="string" signature="preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit [, count]])" src="php_pcre.c" />
      <scope doc="Split string into an array using a perl-style regular&#xA;expression as a delimiter" ilk="function" name="preg_split" returns="array" signature="preg_split(string pattern, string subject [, int limit [, int flags]])" src="php_pcre.c" />
      <scope doc="Quote regular expression characters plus an optional&#xA;character" ilk="function" name="preg_quote" returns="string" signature="preg_quote(string str [, string delim_char])" src="php_pcre.c" />
      <scope doc="Searches array and returns entries which match regex" ilk="function" name="preg_grep" returns="array" signature="preg_grep(string regex, array input [, int flags])" src="php_pcre.c" />
      <scope doc="Returns the error code of the last regexp execution" ilk="function" name="preg_last_error" returns="int" signature="preg_last_error()" src="php_pcre.c" />
      <scope doc="Return array of available PDO drivers" ilk="function" name="pdo_drivers" returns="array" signature="pdo_drivers()" src="pdo_dbh.c" />
      <scope doc="Open a PostgreSQL connection" ilk="function" name="pg_connect" returns="resource" signature="pg_connect(string connection_string[, int connect_type]" src="pgsql.c" />
      <scope doc="Open a persistent PostgreSQL connection" ilk="function" name="pg_pconnect" returns="resource" signature="pg_pconnect(string connection_string" src="pgsql.c" />
      <scope doc="Close a PostgreSQL connection" ilk="function" name="pg_close" returns="bool" signature="pg_close([resource connection])" src="pgsql.c" />
      <scope doc="Get the database name" ilk="function" name="pg_dbname" returns="string" signature="pg_dbname([resource connection])" src="pgsql.c" />
      <scope doc="Get the error message string" ilk="function" name="pg_last_error" returns="string" signature="pg_last_error([resource connection])" src="pgsql.c" />
      <scope doc="Get the options associated with the connection" ilk="function" name="pg_options" returns="string" signature="pg_options([resource connection])" src="pgsql.c" />
      <scope doc="Return the port number associated with the connection" ilk="function" name="pg_port" returns="int" signature="pg_port([resource connection])" src="pgsql.c" />
      <scope doc="Return the tty name associated with the connection" ilk="function" name="pg_tty" returns="string" signature="pg_tty([resource connection])" src="pgsql.c" />
      <scope doc="Returns the host name associated with the connection" ilk="function" name="pg_host" returns="string" signature="pg_host([resource connection])" src="pgsql.c" />
      <scope doc="Returns an array with client protocol and server&#xA;version when available" ilk="function" name="pg_version" returns="array" signature="pg_version([resource connection])" src="pgsql.c" />
      <scope doc="Returns the value of a server parameter" ilk="function" name="pg_parameter_status" returns="false" signature="pg_parameter_status([resource connection,] string param_name)" src="pgsql.c" />
      <scope doc="Ping database If connection is bad try to reconnect" ilk="function" name="pg_ping" returns="bool" signature="pg_ping([resource connection])" src="pgsql.c" />
      <scope doc="Execute a query" ilk="function" name="pg_query" returns="resource" signature="pg_query([resource connection,] string query)" src="pgsql.c" />
      <scope doc="Execute a query" ilk="function" name="pg_query_params" returns="resource" signature="pg_query_params([resource connection,] string query, array params)" src="pgsql.c" />
      <scope doc="Prepare a query for future execution" ilk="function" name="pg_prepare" returns="resource" signature="pg_prepare([resource connection,] string stmtname, string query)" src="pgsql.c" />
      <scope doc="Execute a prepared query" ilk="function" name="pg_execute" returns="resource" signature="pg_execute([resource connection,] string stmtname, array params)" src="pgsql.c" />
      <scope doc="Return the number of rows in the result" ilk="function" name="pg_num_rows" returns="int" signature="pg_num_rows(resource result)" src="pgsql.c" />
      <scope doc="Return the number of fields in the result" ilk="function" name="pg_num_fields" returns="int" signature="pg_num_fields(resource result)" src="pgsql.c" />
      <scope doc="Returns the number of affected tuples" ilk="function" name="pg_affected_rows" returns="int" signature="pg_affected_rows(resource result)" src="pgsql.c" />
      <scope doc="Returns the last notice set by the backend" ilk="function" name="pg_last_notice" returns="string" signature="pg_last_notice(resource connection)" src="pgsql.c" />
      <scope doc="Returns the name of the table field belongs to or&#xA;table&apos;s oid if oid only is true" ilk="function" name="pg_field_table" returns="mixed" signature="pg_field_table(resource result, int field_number[, bool oid_only])" src="pgsql.c" />
      <scope doc="Returns the name of the field" ilk="function" name="pg_field_name" returns="string" signature="pg_field_name(resource result, int field_number)" src="pgsql.c" />
      <scope doc="Returns the internal size of the field" ilk="function" name="pg_field_size" returns="int" signature="pg_field_size(resource result, int field_number)" src="pgsql.c" />
      <scope doc="Returns the type name for the given field" ilk="function" name="pg_field_type" returns="string" signature="pg_field_type(resource result, int field_number)" src="pgsql.c" />
      <scope doc="Returns the type oid for the given field" ilk="function" name="pg_field_type_oid" returns="string" signature="pg_field_type_oid(resource result, int field_number)" src="pgsql.c" />
      <scope doc="Returns the field number of the named field" ilk="function" name="pg_field_num" returns="int" signature="pg_field_num(resource result, string field_name)" src="pgsql.c" />
      <scope doc="Returns values from a result identifier" ilk="function" name="pg_fetch_result" returns="mixed" signature="pg_fetch_result(resource result, [int row_number,] mixed field_name)" src="pgsql.c" />
      <scope doc="Get a row as an enumerated array" ilk="function" name="pg_fetch_row" returns="array" signature="pg_fetch_row(resource result [, int row [, int result_type]])" src="pgsql.c" />
      <scope doc="Fetch a row as an assoc array" ilk="function" name="pg_fetch_assoc" returns="array" signature="pg_fetch_assoc(resource result [, int row])" src="pgsql.c" />
      <scope doc="Fetch a row as an array" ilk="function" name="pg_fetch_array" returns="array" signature="pg_fetch_array(resource result [, int row [, int result_type]])" src="pgsql.c" />
      <scope doc="Fetch a row as an object" ilk="function" name="pg_fetch_object" returns="object" signature="pg_fetch_object(resource result [, int row [, string class_name [, NULL" src="pgsql.c" />
      <scope doc="Fetch all rows into array" ilk="function" name="pg_fetch_all" returns="array" signature="pg_fetch_all(resource result)" src="pgsql.c" />
      <scope doc="Fetch all rows into array" ilk="function" name="pg_fetch_all_columns" returns="array" signature="pg_fetch_all_columns(resource result [, int column_number])" src="pgsql.c" />
      <scope doc="Set internal row offset" ilk="function" name="pg_result_seek" returns="bool" signature="pg_result_seek(resource result, int offset)" src="pgsql.c" />
      <scope doc="Returns the printed length" ilk="function" name="pg_field_prtlen" returns="int" signature="pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)" src="pgsql.c" />
      <scope doc="Test if a field is NULL" ilk="function" name="pg_field_is_null" returns="int" signature="pg_field_is_null(resource result, [int row,] mixed field_name_or_number)" src="pgsql.c" />
      <scope doc="Free result memory" ilk="function" name="pg_free_result" returns="bool" signature="pg_free_result(resource result)" src="pgsql.c" />
      <scope doc="Returns the last object identifier" ilk="function" name="pg_last_oid" returns="string" signature="pg_last_oid(resource result)" src="pgsql.c" />
      <scope doc="Enable tracing a PostgreSQL connection" ilk="function" name="pg_trace" returns="bool" signature="pg_trace(string filename [, string mode [, resource connection]])" src="pgsql.c" />
      <scope doc="Disable tracing of a PostgreSQL connection" ilk="function" name="pg_untrace" returns="bool" signature="pg_untrace([resource connection])" src="pgsql.c" />
      <scope doc="Create a large object" ilk="function" name="pg_lo_create" returns="int" signature="pg_lo_create([resource connection])" src="pgsql.c" />
      <scope doc="Delete a large object" ilk="function" name="pg_lo_unlink" returns="bool" signature="pg_lo_unlink([resource connection,] string large_object_oid)" src="pgsql.c" />
      <scope doc="Open a large object and return fd" ilk="function" name="pg_lo_open" returns="resource" signature="pg_lo_open([resource connection,] int large_object_oid, string mode)" src="pgsql.c" />
      <scope doc="Close a large object" ilk="function" name="pg_lo_close" returns="bool" signature="pg_lo_close(resource large_object)" src="pgsql.c" />
      <scope doc="Read a large object" ilk="function" name="pg_lo_read" returns="string" signature="pg_lo_read(resource large_object [, int len])" src="pgsql.c" />
      <scope doc="Write a large object" ilk="function" name="pg_lo_write" returns="int" signature="pg_lo_write(resource large_object, string buf [, int len])" src="pgsql.c" />
      <scope doc="Read a large object and send straight to browser" ilk="function" name="pg_lo_read_all" returns="int" signature="pg_lo_read_all(resource large_object)" src="pgsql.c" />
      <scope doc="Import large object direct from filesystem" ilk="function" name="pg_lo_import" returns="int" signature="pg_lo_import([resource connection, ] string filename)" src="pgsql.c" />
      <scope doc="Export large object direct to filesystem" ilk="function" name="pg_lo_export" returns="bool" signature="pg_lo_export([resource connection, ] int objoid, string filename)" src="pgsql.c" />
      <scope doc="Seeks position of large object" ilk="function" name="pg_lo_seek" returns="bool" signature="pg_lo_seek(resource large_object, int offset [, int whence])" src="pgsql.c" />
      <scope doc="Returns current position of large object" ilk="function" name="pg_lo_tell" returns="int" signature="pg_lo_tell(resource large_object)" src="pgsql.c" />
      <scope doc="Set error verbosity" ilk="function" name="pg_set_error_verbosity" returns="int" signature="pg_set_error_verbosity([resource connection,] int verbosity)" src="pgsql.c" />
      <scope doc="Set client encoding" ilk="function" name="pg_set_client_encoding" returns="int" signature="pg_set_client_encoding([resource connection,] string encoding)" src="pgsql.c" />
      <scope doc="Get the current client encoding" ilk="function" name="pg_client_encoding" returns="string" signature="pg_client_encoding([resource connection])" src="pgsql.c" />
      <scope doc="Sync with backend Completes the Copy command" ilk="function" name="pg_end_copy" returns="bool" signature="pg_end_copy([resource connection])" src="pgsql.c" />
      <scope doc="Send null-terminated string to backend server" ilk="function" name="pg_put_line" returns="bool" signature="pg_put_line([resource connection,] string query)" src="pgsql.c" />
      <scope doc="Copy table to array" ilk="function" name="pg_copy_to" returns="array" signature="pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])" src="pgsql.c" />
      <scope doc="Copy table from array" ilk="function" name="pg_copy_from" returns="bool" signature="pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])" src="pgsql.c" />
      <scope doc="Escape string for text char type" ilk="function" name="pg_escape_string" returns="string" signature="pg_escape_string([resource connection,] string data)" src="pgsql.c" />
      <scope doc="Escape binary for bytea type" ilk="function" name="pg_escape_bytea" returns="string" signature="pg_escape_bytea([resource connection,] string data)" src="pgsql.c" />
      <scope doc="Unescape binary for bytea type" ilk="function" name="pg_unescape_bytea" returns="string" signature="pg_unescape_bytea(string data)" src="pgsql.c" />
      <scope doc="Get error message associated with result" ilk="function" name="pg_result_error" returns="string" signature="pg_result_error(resource result)" src="pgsql.c" />
      <scope doc="Get error message field associated with result" ilk="function" name="pg_result_error_field" returns="string" signature="pg_result_error_field(resource result, int fieldcode)" src="pgsql.c" />
      <scope doc="Get connection status" ilk="function" name="pg_connection_status" returns="int" signature="pg_connection_status(resource connnection)" src="pgsql.c" />
      <scope doc="Get transaction status" ilk="function" name="pg_transaction_status" returns="int" signature="pg_transaction_status(resource connnection)" src="pgsql.c" />
      <scope doc="Reset connection reconnect" ilk="function" name="pg_connection_reset" returns="bool" signature="pg_connection_reset(resource connection)" src="pgsql.c" />
      <scope doc="Cancel request" ilk="function" name="pg_cancel_query" returns="bool" signature="pg_cancel_query(resource connection)" src="pgsql.c" />
      <scope doc="Get connection is busy or not" ilk="function" name="pg_connection_busy" returns="bool" signature="pg_connection_busy(resource connection)" src="pgsql.c" />
      <scope doc="Send asynchronous query" ilk="function" name="pg_send_query" returns="bool" signature="pg_send_query(resource connection, string query)" src="pgsql.c" />
      <scope doc="Send asynchronous parameterized query" ilk="function" name="pg_send_query_params" returns="bool" signature="pg_send_query_params(resource connection, string query)" src="pgsql.c" />
      <scope doc="Asynchronously prepare a query for future execution" ilk="function" name="pg_send_prepare" returns="bool" signature="pg_send_prepare(resource connection, string stmtname, string query)" src="pgsql.c" />
      <scope doc="Executes prevriously prepared stmtname asynchronously" ilk="function" name="pg_send_execute" returns="bool" signature="pg_send_execute(resource connection, string stmtname, array params)" src="pgsql.c" />
      <scope doc="Get asynchronous query result" ilk="function" name="pg_get_result" returns="resource" signature="pg_get_result(resource connection)" src="pgsql.c" />
      <scope doc="Get status of query result" ilk="function" name="pg_result_status" returns="mixed" signature="pg_result_status(resource result[, long result_type])" src="pgsql.c" />
      <scope doc="Get asynchronous notification" ilk="function" name="pg_get_notify" returns="array" signature="pg_get_notify([resource connection[, result_type]])" src="pgsql.c" />
      <scope doc="Get backend server pid" ilk="function" name="pg_get_pid" returns="int" signature="pg_get_pid([resource connection)" src="pgsql.c" />
      <scope doc="Get meta data" ilk="function" name="pg_meta_data" returns="array" signature="pg_meta_data(resource db, string table)" src="pgsql.c" />
      <scope doc="Check and convert values for PostgreSQL SQL statement" ilk="function" name="pg_convert" returns="array" signature="pg_convert(resource db, string table, array values[, int options])" src="pgsql.c" />
      <scope doc="Insert values filed value to table" ilk="function" name="pg_insert" returns="mixed" signature="pg_insert(resource db, string table, array values[, int options])" src="pgsql.c" />
      <scope doc="Update table using values field value and ids id value" ilk="function" name="pg_update" returns="mixed" signature="pg_update(resource db, string table, array fields, array ids[, int options])" src="pgsql.c" />
      <scope doc="Delete records has ids id value" ilk="function" name="pg_delete" returns="mixed" signature="pg_delete(resource db, string table, array ids[, int options])" src="pgsql.c" />
      <scope doc="Select records that has ids id value" ilk="function" name="pg_select" returns="mixed" signature="pg_select(resource db, string table, array ids[, int options])" src="pgsql.c" />
      <scope doc="Send a signal to a process POSIX" ilk="function" name="posix_kill" returns="bool" signature="posix_kill(int pid, int sig)" src="posix.c" />
      <scope doc="Get the current process id POSIX" ilk="function" name="posix_getpid" returns="int" signature="posix_getpid(void)" src="posix.c" />
      <scope doc="Get the parent process id POSIX" ilk="function" name="posix_getppid" returns="int" signature="posix_getppid(void)" src="posix.c" />
      <scope doc="Get the current user id POSIX" ilk="function" name="posix_getuid" returns="int" signature="posix_getuid(void)" src="posix.c" />
      <scope doc="Get the current group id POSIX" ilk="function" name="posix_getgid" returns="int" signature="posix_getgid(void)" src="posix.c" />
      <scope doc="Get the current effective user id POSIX" ilk="function" name="posix_geteuid" returns="int" signature="posix_geteuid(void)" src="posix.c" />
      <scope doc="Get the current effective group id POSIX" ilk="function" name="posix_getegid" returns="int" signature="posix_getegid(void)" src="posix.c" />
      <scope doc="Set user id POSIX" ilk="function" name="posix_setuid" returns="bool" signature="posix_setuid(long uid)" src="posix.c" />
      <scope doc="Set group id POSIX" ilk="function" name="posix_setgid" returns="bool" signature="posix_setgid(int uid)" src="posix.c" />
      <scope doc="Set effective user id" ilk="function" name="posix_seteuid" returns="bool" signature="posix_seteuid(long uid)" src="posix.c" />
      <scope doc="Set effective group id" ilk="function" name="posix_setegid" returns="bool" signature="posix_setegid(long uid)" src="posix.c" />
      <scope doc="Get supplementary group id&apos;s POSIX" ilk="function" name="posix_getgroups" returns="array" signature="posix_getgroups(void)" src="posix.c" />
      <scope doc="Get user name POSIX" ilk="function" name="posix_getlogin" returns="string" signature="posix_getlogin(void)" src="posix.c" />
      <scope doc="Get current process group id POSIX" ilk="function" name="posix_getpgrp" returns="int" signature="posix_getpgrp(void)" src="posix.c" />
      <scope doc="Create session and set process group id POSIX" ilk="function" name="posix_setsid" returns="int" signature="posix_setsid(void)" src="posix.c" />
      <scope doc="Set process group id for job control POSIX" ilk="function" name="posix_setpgid" returns="bool" signature="posix_setpgid(int pid, int pgid)" src="posix.c" />
      <scope doc="Get the process group id of the specified process This&#xA;is not a POSIX function but a SVR ism so" ilk="function" name="posix_getpgid" returns="int" signature="posix_getpgid(void)" src="posix.c" />
      <scope doc="Get process group id of session leader This is not a&#xA;POSIX function but a SVR ism so be compile" ilk="function" name="posix_getsid" returns="int" signature="posix_getsid(void)" src="posix.c" />
      <scope doc="Get system name POSIX" ilk="function" name="posix_uname" returns="array" signature="posix_uname(void)" src="posix.c" />
      <scope doc="Get process times POSIX" ilk="function" name="posix_times" returns="array" signature="posix_times(void)" src="posix.c" />
      <scope doc="Generate terminal path name POSIX" ilk="function" name="posix_ctermid" returns="string" signature="posix_ctermid(void)" src="posix.c" />
      <scope doc="Determine terminal device name POSIX" ilk="function" name="posix_ttyname" returns="string" signature="posix_ttyname(int fd)" src="posix.c" />
      <scope doc="Determine if filedesc is a tty POSIX" ilk="function" name="posix_isatty" returns="bool" signature="posix_isatty(int fd)" src="posix.c" />
      <scope doc="Get working directory pathname POSIX" ilk="function" name="posix_getcwd" returns="string" signature="posix_getcwd(void)" src="posix.c" />
      <scope doc="Make a FIFO special file POSIX" ilk="function" name="posix_mkfifo" returns="bool" signature="posix_mkfifo(string pathname, int mode)" src="posix.c" />
      <scope doc="Make a special or ordinary file POSIX" ilk="function" name="posix_mknod" returns="bool" signature="posix_mknod(string pathname, int mode [, int major [, int minor]])" src="posix.c" />
      <scope doc="Determine accessibility of a file POSIX" ilk="function" name="posix_access" returns="bool" signature="posix_access(string file [, int mode])" src="posix.c" />
      <scope doc="Group database access POSIX" ilk="function" name="posix_getgrnam" returns="array" signature="posix_getgrnam(string groupname)" src="posix.c" />
      <scope doc="Group database access POSIX" ilk="function" name="posix_getgrgid" returns="array" signature="posix_getgrgid(long gid)" src="posix.c" />
      <scope doc="User database access POSIX" ilk="function" name="posix_getpwnam" returns="array" signature="posix_getpwnam(string groupname)" src="posix.c" />
      <scope doc="User database access POSIX" ilk="function" name="posix_getpwuid" returns="array" signature="posix_getpwuid(long uid)" src="posix.c" />
      <scope doc="Get system resource consumption limits This is not a&#xA;POSIX function but a BSDism and a SVR ism We compile" ilk="function" name="posix_getrlimit" returns="array" signature="posix_getrlimit(void)" src="posix.c" />
      <scope doc="Retrieve the error number set by the last posix&#xA;function which failed" ilk="function" name="posix_get_last_error" returns="int" signature="posix_get_last_error(void)" src="posix.c" />
      <scope doc="Retrieve the system error message associated with the&#xA;given errno" ilk="function" name="posix_strerror" returns="string" signature="posix_strerror(int errno)" src="posix.c" />
      <scope doc="Calculate the group access list for the user specified&#xA;in name" ilk="function" name="posix_initgroups" returns="bool" signature="posix_initgroups(string name, int base_group_id)" src="posix.c" />
      <scope doc="Load a dictionary" ilk="function" name="pspell_new" returns="int" signature="pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" src="pspell.c" />
      <scope doc="Load a dictionary with a personal wordlist" ilk="function" name="pspell_new_personal" returns="int" signature="pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" src="pspell.c" />
      <scope doc="Load a dictionary based on the given config" ilk="function" name="pspell_new_config" returns="int" signature="pspell_new_config(int config)" src="pspell.c" />
      <scope doc="Returns true if word is valid" ilk="function" name="pspell_check" returns="bool" signature="pspell_check(int pspell, string word)" src="pspell.c" />
      <scope doc="Returns array of suggestions" ilk="function" name="pspell_suggest" returns="array" signature="pspell_suggest(int pspell, string word)" src="pspell.c" />
      <scope doc="Notify the dictionary of a user-selected replacement" ilk="function" name="pspell_store_replacement" returns="bool" signature="pspell_store_replacement(int pspell, string misspell, string correct)" src="pspell.c" />
      <scope doc="Adds a word to a personal list" ilk="function" name="pspell_add_to_personal" returns="bool" signature="pspell_add_to_personal(int pspell, string word)" src="pspell.c" />
      <scope doc="Adds a word to the current session" ilk="function" name="pspell_add_to_session" returns="bool" signature="pspell_add_to_session(int pspell, string word)" src="pspell.c" />
      <scope doc="Clears the current session" ilk="function" name="pspell_clear_session" returns="bool" signature="pspell_clear_session(int pspell)" src="pspell.c" />
      <scope doc="Saves the current personal wordlist" ilk="function" name="pspell_save_wordlist" returns="bool" signature="pspell_save_wordlist(int pspell)" src="pspell.c" />
      <scope doc="Create a new config to be used later to create a&#xA;manager" ilk="function" name="pspell_config_create" returns="int" signature="pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])" src="pspell.c" />
      <scope doc="Consider run-together words as valid components" ilk="function" name="pspell_config_runtogether" returns="bool" signature="pspell_config_runtogether(int conf, bool runtogether)" src="pspell.c" />
      <scope doc="Select mode for config PSPELL FAST PSPELL NORMAL or&#xA;PSPELL BAD SPELLERS" ilk="function" name="pspell_config_mode" returns="bool" signature="pspell_config_mode(int conf, long mode)" src="pspell.c" />
      <scope doc="Ignore words n chars" ilk="function" name="pspell_config_ignore" returns="bool" signature="pspell_config_ignore(int conf, int ignore)" src="pspell.c" />
      <scope doc="Use a personal dictionary for this config" ilk="function" name="pspell_config_personal" returns="bool" signature="pspell_config_personal(int conf, string personal)" src="pspell.c" />
      <scope doc="location of the main word list" ilk="function" name="pspell_config_dict_dir" returns="bool" signature="pspell_config_dict_dir(int conf, string directory)" src="pspell.c" />
      <scope doc="location of language data files" ilk="function" name="pspell_config_data_dir" returns="bool" signature="pspell_config_data_dir(int conf, string directory)" src="pspell.c" />
      <scope doc="Use a personal dictionary with replacement pairs for&#xA;this config" ilk="function" name="pspell_config_repl" returns="bool" signature="pspell_config_repl(int conf, string repl)" src="pspell.c" />
      <scope doc="Save replacement pairs when personal list is saved for&#xA;this config" ilk="function" name="pspell_config_save_repl" returns="bool" signature="pspell_config_save_repl(int conf, bool save)" src="pspell.c" />
      <scope doc="Reads a line" ilk="function" name="readline" returns="string" signature="readline([string prompt])" src="readline.c" />
      <scope doc="Gets sets various internal readline variables" ilk="function" name="readline_info" returns="mixed" signature="readline_info([string varname] [, string newvalue])" src="readline.c" />
      <scope doc="Adds a line to the history" ilk="function" name="readline_add_history" returns="bool" signature="readline_add_history([string prompt])" src="readline.c" />
      <scope doc="Clears the history" ilk="function" name="readline_clear_history" returns="bool" signature="readline_clear_history(void)" src="readline.c" />
      <scope doc="Lists the history" ilk="function" name="readline_list_history" returns="array" signature="readline_list_history(void)" src="readline.c" />
      <scope doc="Reads the history" ilk="function" name="readline_read_history" returns="bool" signature="readline_read_history([string filename] [, int from] [,int to])" src="readline.c" />
      <scope doc="Writes the history" ilk="function" name="readline_write_history" returns="bool" signature="readline_write_history([string filename])" src="readline.c" />
      <scope doc="Readline completion function" ilk="function" name="readline_completion_function" returns="bool" signature="readline_completion_function(string funcname)" src="readline.c" />
      <scope doc="Initializes the readline callback interface and&#xA;terminal prints the prompt and returns immediately" ilk="function" name="readline_callback_handler_install" returns="void" signature="readline_callback_handler_install(string prompt, mixed callback)" src="readline.c" />
      <scope doc="Informs the readline callback interface that a&#xA;character is ready for input" ilk="function" name="readline_callback_read_char" returns="void" signature="readline_callback_read_char()" src="readline.c" />
      <scope doc="Removes a previously installed callback handler and&#xA;restores terminal settings" ilk="function" name="readline_callback_handler_remove" returns="bool" signature="readline_callback_handler_remove()" src="readline.c" />
      <scope doc="Ask readline to redraw the display" ilk="function" name="readline_redisplay" returns="void" signature="readline_redisplay(void)" src="readline.c" />
      <scope doc="Inform readline that the cursor has moved to a new line" ilk="function" name="readline_on_new_line" returns="void" signature="readline_on_new_line(void)" src="readline.c" />
      <scope doc="Recode string str according to request string" ilk="function" name="recode_string" returns="string" signature="recode_string(string request, string str)" src="recode.c" />
      <scope doc="Recode file input into file output according to request" ilk="function" name="recode_file" returns="bool" signature="recode_file(string request, resource input, resource output)" src="recode.c" />
      <scope doc="Set session cookie parameters" ilk="function" name="session_set_cookie_params" returns="void" signature="session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure[, bool httponly]]]])" src="session.c" />
      <scope doc="Return the session cookie parameters" ilk="function" name="session_get_cookie_params" returns="array" signature="session_get_cookie_params(void)" src="session.c" />
      <scope doc="Return the current session name If newname is given the&#xA;session name is replaced with newname" ilk="function" name="session_name" returns="string" signature="session_name([string newname])" src="session.c" />
      <scope doc="Return the current module name used for accessing&#xA;session data If newname is given the module name is&#xA;replaced with" ilk="function" name="session_module_name" returns="string" signature="session_module_name([string newname])" src="session.c" />
      <scope doc="Sets user-level functions" ilk="function" name="session_set_save_handler" returns="void" signature="session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)" src="session.c" />
      <scope doc="Return the current save path passed to module name If&#xA;newname is given the save path is replaced with newname" ilk="function" name="session_save_path" returns="string" signature="session_save_path([string newname])" src="session.c" />
      <scope doc="Return the current session id If newid is given the&#xA;session id is replaced with newid" ilk="function" name="session_id" returns="string" signature="session_id([string newid])" src="session.c" />
      <scope doc="Update the current session id with a newly generated&#xA;one If delete old session is set to true remove the" ilk="function" name="session_regenerate_id" returns="bool" signature="session_regenerate_id([bool delete_old_session])" src="session.c" />
      <scope doc="Return the current cache limiter If new cache limited&#xA;is given the current cache limiter is replaced with new&#xA;cache" ilk="function" name="session_cache_limiter" returns="string" signature="session_cache_limiter([string new_cache_limiter])" src="session.c" />
      <scope doc="Return the current cache expire If new cache expire is&#xA;given the current cache expire is replaced with new&#xA;cache" ilk="function" name="session_cache_expire" returns="int" signature="session_cache_expire([int new_cache_expire])" src="session.c" />
      <scope doc="Adds varname s to the list of variables which are&#xA;freezed at the session end" ilk="function" name="session_register" returns="bool" signature="session_register(mixed var_names [, mixed ...])" src="session.c" />
      <scope doc="Removes varname from the list of variables which are&#xA;freezed at the session end" ilk="function" name="session_unregister" returns="bool" signature="session_unregister(string varname)" src="session.c" />
      <scope doc="Checks if a variable is registered in session" ilk="function" name="session_is_registered" returns="bool" signature="session_is_registered(string varname)" src="session.c" />
      <scope doc="Serializes the current setup and returns the serialized&#xA;representation" ilk="function" name="session_encode" returns="string" signature="session_encode(void)" src="session.c" />
      <scope doc="Deserializes data and reinitializes the variables" ilk="function" name="session_decode" returns="bool" signature="session_decode(string data)" src="session.c" />
      <scope doc="Begin session - reinitializes freezed variables&#xA;registers browsers etc" ilk="function" name="session_start" returns="bool" signature="session_start(void)" src="session.c" />
      <scope doc="Destroy the current session and all data associated&#xA;with it" ilk="function" name="session_destroy" returns="bool" signature="session_destroy(void)" src="session.c" />
      <scope doc="Unset all registered variables" ilk="function" name="session_unset" returns="void" signature="session_unset(void)" src="session.c" />
      <scope doc="Write session data and end session" ilk="function" name="session_write_close" returns="void" signature="session_write_close(void)" src="session.c" />
      <scope doc="Load a filename and return a simplexml element object&#xA;to allow for processing" ilk="function" name="simplexml_load_file" returns="simplemxml_element" signature="simplexml_load_file(string filename [, string class_name [, int options [, string ns [, bool is_prefix]]]])" src="simplexml.c" />
      <scope doc="Load a string and return a simplexml element object to&#xA;allow for processing" ilk="function" name="simplexml_load_string" returns="simplemxml_element" signature="simplexml_load_string(string data [, string class_name [, int options [, string ns [, bool is_prefix]]]])" src="simplexml.c" />
      <scope doc="Get a simplexml element object from dom to allow for&#xA;processing" ilk="function" name="simplexml_import_dom" returns="simplemxml_element" signature="simplexml_import_dom(domNode node [, string class_name])" src="simplexml.c" />
      <scope doc="Return a string to confirm that the module is compiled&#xA;in" ilk="function" name="confirm_extname_compiled" returns="string" signature="confirm_extname_compiled(string arg)" src="skeleton.c" />
      <scope doc="Fetch a SNMP object" ilk="function" name="snmpget" returns="string" signature="snmpget(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch a SNMP object" ilk="function" name="snmpgetnext" returns="string" signature="snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Return all objects under the specified object id" ilk="function" name="snmpwalk" returns="array" signature="snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Return all objects including their respective object id&#xA;withing the specified one" ilk="function" name="snmprealwalk" returns="array" signature="snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Return the current status of quick print" ilk="function" name="snmp_get_quick_print" returns="bool" signature="snmp_get_quick_print(void)" src="snmp.c" />
      <scope doc="Return all objects including their respective object id&#xA;withing the specified one" ilk="function" name="snmp_set_quick_print" returns="void" signature="snmp_set_quick_print(int quick_print)" src="snmp.c" />
      <scope doc="Return all values that are enums with their enum value&#xA;instead of the raw integer" ilk="function" name="snmp_set_enum_print" returns="void" signature="snmp_set_enum_print(int enum_print)" src="snmp.c" />
      <scope doc="Set the OID output format" ilk="function" name="snmp_set_oid_output_format" returns="void" signature="snmp_set_oid_output_format(int oid_format)" src="snmp.c" />
      <scope doc="Set the value of a SNMP object" ilk="function" name="snmpset" returns="int" signature="snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch a SNMP object" ilk="function" name="snmp2_get" returns="string" signature="snmp2_get(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch a SNMP object" ilk="function" name="snmp2_getnext" returns="string" signature="snmp2_getnext(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Return all objects under the specified object id" ilk="function" name="snmp2_walk" returns="array" signature="snmp2_walk(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Return all objects including their respective object id&#xA;withing the specified one" ilk="function" name="snmp2_real_walk" returns="array" signature="snmp2_real_walk(string host, string community, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Set the value of a SNMP object" ilk="function" name="snmp2_set" returns="int" signature="snmp2_set(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Generic SNMPv object fetcher From here is passed on the&#xA;the common internal object fetcher st SNMP CMD GET snmp" ilk="function" name="php_snmpv3" returns="void" signature="php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)" src="snmp.c" />
      <scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_get" returns="int" signature="snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_getnext" returns="int" signature="snmp3_getnext(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_walk" returns="int" signature="snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_real_walk" returns="int" signature="snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Fetch the value of a SNMP object" ilk="function" name="snmp3_set" returns="int" signature="snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id, string type, mixed value [, int timeout [, int retries]])" src="snmp.c" />
      <scope doc="Specify the method how the SNMP values will be returned" ilk="function" name="snmp_set_valueretrieval" returns="int" signature="snmp_set_valueretrieval(int method)" src="snmp.c" />
      <scope doc="Return the method how the SNMP values will be returned" ilk="function" name="snmp_get_valueretrieval" returns="int" signature="snmp_get_valueretrieval()" src="snmp.c" />
      <scope doc="Reads and parses a MIB file into the active MIB tree" ilk="function" name="snmp_read_mib" returns="int" signature="snmp_read_mib(string filename)" src="snmp.c" />
      <scope doc="U Runs the select system call on the sets mentioned&#xA;with a timeout specified by tv sec and tv usec" ilk="function" name="socket_select" returns="int" signature="socket_select(array &amp;read_fds, array &amp;write_fds, &amp;array except_fds, int tv_sec[, int tv_usec])" src="sockets.c" />
      <scope doc="U Opens a socket on port to accept connections" ilk="function" name="socket_create_listen" returns="resource" signature="socket_create_listen(int port[, int backlog])" src="sockets.c" />
      <scope doc="U Accepts a connection on the listening socket fd" ilk="function" name="socket_accept" returns="resource" signature="socket_accept(resource socket)" src="sockets.c" />
      <scope doc="U Sets nonblocking mode on a socket resource" ilk="function" name="socket_set_nonblock" returns="bool" signature="socket_set_nonblock(resource socket)" src="sockets.c" />
      <scope doc="U Sets blocking mode on a socket resource" ilk="function" name="socket_set_block" returns="bool" signature="socket_set_block(resource socket)" src="sockets.c" />
      <scope doc="U Sets the maximum number of connections allowed to be&#xA;waited for on the socket specified by fd" ilk="function" name="socket_listen" returns="bool" signature="socket_listen(resource socket[, int backlog])" src="sockets.c" />
      <scope doc="U Closes a file descriptor" ilk="function" name="socket_close" returns="void" signature="socket_close(resource socket)" src="sockets.c" />
      <scope doc="Writes the buffer to the socket resource length is&#xA;optional" ilk="function" name="socket_write" returns="int" signature="socket_write(resource socket, string buf[, int length])" src="sockets.c" />
      <scope doc="U Reads a maximum of length bytes from socket" ilk="function" name="socket_read" returns="string" signature="socket_read(resource socket, int length [, int type])" src="sockets.c" />
      <scope doc="Queries the remote side of the given socket which may&#xA;either result in host port or in a UNIX filesystem" ilk="function" name="socket_getsockname" returns="bool" signature="socket_getsockname(resource socket, string &amp;addr[, int &amp;port])" src="sockets.c" />
      <scope doc="Queries the remote side of the given socket which may&#xA;either result in host port or in a UNIX filesystem" ilk="function" name="socket_getpeername" returns="bool" signature="socket_getpeername(resource socket, string &amp;addr[, int &amp;port])" src="sockets.c" />
      <scope doc="U Creates an endpoint for communication in the domain&#xA;specified by domain of type specified by type" ilk="function" name="socket_create" returns="resource" signature="socket_create(int domain, int type, int protocol)" src="sockets.c" />
      <scope doc="Opens a connection to addr port on the socket specified&#xA;by socket" ilk="function" name="socket_connect" returns="bool" signature="socket_connect(resource socket, string addr [, int port])" src="sockets.c" />
      <scope doc="Returns a string describing an error" ilk="function" name="socket_strerror" returns="string" signature="socket_strerror(int errno)" src="sockets.c" />
      <scope doc="Binds an open socket to a listening port port is only&#xA;specified in AF INET family" ilk="function" name="socket_bind" returns="bool" signature="socket_bind(resource socket, string addr [, int port])" src="sockets.c" />
      <scope doc="Receives data from a connected socket" ilk="function" name="socket_recv" returns="int" signature="socket_recv(resource socket, string &amp;buf, int len, int flags)" src="sockets.c" />
      <scope doc="Sends data to a connected socket" ilk="function" name="socket_send" returns="int" signature="socket_send(resource socket, string buf, int len, int flags)" src="sockets.c" />
      <scope doc="Receives data from a socket connected or not" ilk="function" name="socket_recvfrom" returns="int" signature="socket_recvfrom(resource socket, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])" src="sockets.c" />
      <scope doc="Sends a message to a socket whether it is connected or&#xA;not" ilk="function" name="socket_sendto" returns="int" signature="socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])" src="sockets.c" />
      <scope doc="U Gets socket options for the socket" ilk="function" name="socket_get_option" returns="mixed" signature="socket_get_option(resource socket, int level, int optname)" src="sockets.c" />
      <scope doc="Sets socket options for the socket" ilk="function" name="socket_set_option" returns="bool" signature="socket_set_option(resource socket, int level, int optname, int" src="sockets.c" />
      <scope doc="U Creates a pair of indistinguishable sockets and&#xA;stores them in fds" ilk="function" name="socket_create_pair" returns="bool" signature="socket_create_pair(int domain, int type, int protocol, array &amp;fd)" src="sockets.c" />
      <scope doc="U Shuts down a socket for receiving sending or both" ilk="function" name="socket_shutdown" returns="bool" signature="socket_shutdown(resource socket[, int how])" src="sockets.c" />
      <scope doc="U Returns the last socket error either the last used or&#xA;the provided socket resource" ilk="function" name="socket_last_error" returns="int" signature="socket_last_error([resource socket])" src="sockets.c" />
      <scope doc="U Clears the error on the socket or the last error code" ilk="function" name="socket_clear_error" returns="void" signature="socket_clear_error([resource socket])" src="sockets.c" />
      <scope doc="Return an array containing the names of all parent&#xA;classes" ilk="function" name="class_parents" returns="array" signature="class_parents(object instance)" src="php_spl.c" />
      <scope doc="Return all classes and interfaces implemented by SPL" ilk="function" name="class_implements" returns="array" signature="class_implements(mixed what [, bool autoload ])" src="php_spl.c" />
      <scope doc="Return an array containing the names of all clsses and&#xA;interfaces defined in SPL" ilk="function" name="spl_classes" returns="array" signature="spl_classes()" src="php_spl.c" />
      <scope doc="Default implementation for autoload" ilk="function" name="spl_autoload" returns="void" signature="spl_autoload(string class_name [, string file_extensions])" src="php_spl.c" />
      <scope doc="Register and return default file extensions for spl&#xA;autoload" ilk="function" name="spl_autoload_extensions" returns="string" signature="spl_autoload_extensions([string file_extensions])" src="php_spl.c" />
      <scope doc="Try all registerd autoload function to load the&#xA;requested class" ilk="function" name="spl_autoload_call" returns="void" signature="spl_autoload_call(string class_name)" src="php_spl.c" />
      <scope doc="Register given function as autoload implementation" ilk="function" name="spl_autoload_register" returns="bool" signature="spl_autoload_register([mixed autoload_function = &quot;spl_autoload&quot; [, throw = true]])" src="php_spl.c" />
      <scope doc="Unregister given function as autoload implementation" ilk="function" name="spl_autoload_unregister" returns="bool" signature="spl_autoload_unregister(mixed autoload_function)" src="php_spl.c" />
      <scope doc="Return hash id for given object" ilk="function" name="spl_object_hash" returns="string" signature="spl_object_hash(object obj)" src="php_spl.c" />
      <scope doc="Copy the iterator into an array" ilk="function" name="iterator_to_array" returns="array" signature="iterator_to_array(Traversable it [, bool use_keys = true])" src="spl_iterators.c" />
      <scope doc="Count the elements in an iterator" ilk="function" name="iterator_count" returns="int" signature="iterator_count(Traversable it)" src="spl_iterators.c" />
      <scope doc="Calls a function for every element in an iterator" ilk="function" name="iterator_apply" returns="int" signature="iterator_apply(Traversable it, mixed function [, mixed params])" src="spl_iterators.c" />
      <scope doc="Opens a persistent handle to a SQLite database Will&#xA;create the database if it does not exist" ilk="function" name="sqlite_popen" returns="resource" signature="sqlite_popen(string filename [, int mode [, string &amp;error_message]])" src="sqlite.c" />
      <scope doc="Opens a SQLite database Will create the database if it&#xA;does not exist" ilk="function" name="sqlite_open" returns="resource" signature="sqlite_open(string filename [, int mode [, string &amp;error_message]])" src="sqlite.c" />
      <scope doc="Opens a SQLite database and creates an object for it&#xA;Will create the database if it does not exist" ilk="function" name="sqlite_factory" returns="object" signature="sqlite_factory(string filename [, int mode [, string &amp;error_message]])" src="sqlite.c" />
      <scope doc="Set busy timeout duration If ms all busy handlers are&#xA;disabled" ilk="function" name="sqlite_busy_timeout" returns="void" signature="sqlite_busy_timeout(resource db, int ms)" src="sqlite.c" />
      <scope doc="Closes an open sqlite database" ilk="function" name="sqlite_close" returns="void" signature="sqlite_close(resource db)" src="sqlite.c" />
      <scope doc="Executes a query that does not prefetch and buffer all&#xA;data" ilk="function" name="sqlite_unbuffered_query" returns="resource" signature="sqlite_unbuffered_query(string query, resource db [ , int result_type [, string &amp;error_message]])" src="sqlite.c" />
      <scope doc="Return an array of column types from a particular table" ilk="function" name="sqlite_fetch_column_types" returns="resource" signature="sqlite_fetch_column_types(string table_name, resource db [, int result_type])" src="sqlite.c" />
      <scope doc="Executes an SQL statement given by the query against a given database handle." ilk="function" name="sqlite_query" signature="sqlite_query ( resource $dbhandle , string $query [, int $result_type [, string &amp;$error_msg ]] )&#xA;sqlite_query ( string $query , resource $dbhandle [, int $result_type [, string &amp;$error_msg ]] )" />
      <scope doc="Executes an SQL statement given by the query against a given database handle (specified by the dbhandle  parameter)." ilk="function" name="sqlite_exec" signature="sqlite_exec ( resource $dbhandle , string $query [, string &amp;$error_msg ] )&#xA;sqlite_exec ( string $query , resource $dbhandle )" />
      <scope doc="Fetches all rows from a result set as an array of&#xA;arrays" ilk="function" name="sqlite_fetch_all" returns="array" signature="sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])" src="sqlite.c" />
      <scope doc="Fetches the next row from a result set as an array" ilk="function" name="sqlite_fetch_array" returns="array" signature="sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])" src="sqlite.c" />
      <scope doc="Fetches the next row from a result set as an object" ilk="function" name="sqlite_fetch_object" returns="object" signature="sqlite_fetch_object(resource result [, string class_name [, NULL" src="sqlite.c" />
      <scope doc="sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling  sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned." ilk="function" name="sqlite_array_query" signature="sqlite_array_query ( resource $dbhandle , string $query [, int $result_type [, bool $decode_binary ]] )&#xA;sqlite_array_query ( string $query , resource $dbhandle [, int $result_type [, bool $decode_binary ]] )" />
      <scope doc="Executes a query and returns either an array for one&#xA;single column or the value of the first row" ilk="function" name="sqlite_single_query" returns="array" signature="sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])" src="sqlite.c" />
      <scope doc="Fetches the first column of a result set as a string" ilk="function" name="sqlite_fetch_single" returns="string" signature="sqlite_fetch_single(resource result [, bool decode_binary])" src="sqlite.c" />
      <scope doc="Fetches the current row from a result set as an array" ilk="function" name="sqlite_current" returns="array" signature="sqlite_current(resource result [, int result_type [, bool decode_binary]])" src="sqlite.c" />
      <scope doc="Fetches a column from the current row of a result set" ilk="function" name="sqlite_column" returns="mixed" signature="sqlite_column(resource result, mixed index_or_name [, bool decode_binary])" src="sqlite.c" />
      <scope doc="Returns the version of the linked SQLite library" ilk="function" name="sqlite_libversion" returns="string" signature="sqlite_libversion()" src="sqlite.c" />
      <scope doc="Returns the encoding iso or UTF- of the linked SQLite&#xA;library" ilk="function" name="sqlite_libencoding" returns="string" signature="sqlite_libencoding()" src="sqlite.c" />
      <scope doc="Returns the number of rows that were changed by the&#xA;most recent SQL statement" ilk="function" name="sqlite_changes" returns="int" signature="sqlite_changes(resource db)" src="sqlite.c" />
      <scope doc="Returns the rowid of the most recently inserted row" ilk="function" name="sqlite_last_insert_rowid" returns="int" signature="sqlite_last_insert_rowid(resource db)" src="sqlite.c" />
      <scope doc="Returns the number of rows in a buffered result set" ilk="function" name="sqlite_num_rows" returns="int" signature="sqlite_num_rows(resource result)" src="sqlite.c" />
      <scope doc="Returns whether more rows are available" ilk="function" name="sqlite_valid" returns="bool" signature="sqlite_valid(resource result)" src="sqlite.c" />
      <scope doc="Returns whether a previous row is available" ilk="function" name="sqlite_has_prev" returns="bool" signature="sqlite_has_prev(resource result)" src="sqlite.c" />
      <scope doc="Returns the number of fields in a result set" ilk="function" name="sqlite_num_fields" returns="int" signature="sqlite_num_fields(resource result)" src="sqlite.c" />
      <scope doc="Returns the name of a particular field of a result set" ilk="function" name="sqlite_field_name" returns="string" signature="sqlite_field_name(resource result, int field_index)" src="sqlite.c" />
      <scope doc="Seek to a particular row number of a buffered result&#xA;set" ilk="function" name="sqlite_seek" returns="bool" signature="sqlite_seek(resource result, int row)" src="sqlite.c" />
      <scope doc="Seek to the first row number of a buffered result set" ilk="function" name="sqlite_rewind" returns="bool" signature="sqlite_rewind(resource result)" src="sqlite.c" />
      <scope doc="Seek to the next row number of a result set" ilk="function" name="sqlite_next" returns="bool" signature="sqlite_next(resource result)" src="sqlite.c" />
      <scope doc="Return the current row index of a buffered result" ilk="function" name="sqlite_key" returns="int" signature="sqlite_key(resource result)" src="sqlite.c" />
      <scope doc="Seek to the previous row number of a result set" ilk="function" name="sqlite_prev" returns="bool" signature="sqlite_prev(resource result)" src="sqlite.c" />
      <scope doc="Escapes a string for use as a query parameter" ilk="function" name="sqlite_escape_string" returns="string" signature="sqlite_escape_string(string item)" src="sqlite.c" />
      <scope doc="Returns the error code of the last error for a database" ilk="function" name="sqlite_last_error" returns="int" signature="sqlite_last_error(resource db)" src="sqlite.c" />
      <scope doc="Returns the textual description of an error code" ilk="function" name="sqlite_error_string" returns="string" signature="sqlite_error_string(int error_code)" src="sqlite.c" />
      <scope doc="Registers an aggregate function for queries" ilk="function" name="sqlite_create_aggregate" returns="bool" signature="sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])" src="sqlite.c" />
      <scope doc="Registers a regular function for queries" ilk="function" name="sqlite_create_function" returns="bool" signature="sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])" src="sqlite.c" />
      <scope doc="Apply binary encoding if required to a string to return&#xA;from an UDF" ilk="function" name="sqlite_udf_encode_binary" returns="string" signature="sqlite_udf_encode_binary(string data)" src="sqlite.c" />
      <scope doc="Decode binary encoding on a string parameter passed to&#xA;an UDF" ilk="function" name="sqlite_udf_decode_binary" returns="string" signature="sqlite_udf_decode_binary(string data)" src="sqlite.c" />
      <scope doc="Sort an array by key value in reverse order" ilk="function" name="krsort" returns="bool" signature="krsort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Sort an array by key" ilk="function" name="ksort" returns="bool" signature="ksort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Count the number of elements in a variable usually an&#xA;array" ilk="function" name="count" returns="int" signature="count(mixed var [, int mode])" src="array.c" />
      <scope doc="Sort an array using natural sort" ilk="function" name="natsort" returns="void" signature="natsort(array &amp;array_arg)" src="array.c" />
      <scope doc="Sort an array using case-insensitive natural sort" ilk="function" name="natcasesort" returns="void" signature="natcasesort(array &amp;array_arg)" src="array.c" />
      <scope doc="Sort an array and maintain index association" ilk="function" name="asort" returns="bool" signature="asort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Sort an array in reverse order and maintain index&#xA;association" ilk="function" name="arsort" returns="bool" signature="arsort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Sort an array" ilk="function" name="sort" returns="bool" signature="sort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Sort an array in reverse order" ilk="function" name="rsort" returns="bool" signature="rsort(array &amp;array_arg [, int sort_flags])" src="array.c" />
      <scope doc="Sort an array by values using a user-defined comparison&#xA;function" ilk="function" name="usort" returns="bool" signature="usort(array array_arg, string cmp_function)" src="array.c" />
      <scope doc="Sort an array with a user-defined comparison function&#xA;and maintain index association" ilk="function" name="uasort" returns="bool" signature="uasort(array array_arg, string cmp_function)" src="array.c" />
      <scope doc="Sort an array by keys using a user-defined comparison&#xA;function" ilk="function" name="uksort" returns="bool" signature="uksort(array array_arg, string cmp_function)" src="array.c" />
      <scope doc="Advances array argument&apos;s internal pointer to the last&#xA;element and return it" ilk="function" name="end" returns="mixed" signature="end(array array_arg)" src="array.c" />
      <scope doc="Move array argument&apos;s internal pointer to the previous&#xA;element and return it" ilk="function" name="prev" returns="mixed" signature="prev(array array_arg)" src="array.c" />
      <scope doc="Move array argument&apos;s internal pointer to the next&#xA;element and return it" ilk="function" name="next" returns="mixed" signature="next(array array_arg)" src="array.c" />
      <scope doc="Set array argument&apos;s internal pointer to the first&#xA;element and return it" ilk="function" name="reset" returns="mixed" signature="reset(array array_arg)" src="array.c" />
      <scope doc="Return the element currently pointed to by the internal&#xA;array pointer" ilk="function" name="current" returns="mixed" signature="current(array array_arg)" src="array.c" />
      <scope doc="Return the key of the element currently pointed to by&#xA;the internal array pointer" ilk="function" name="key" returns="mixed" signature="key(array array_arg)" src="array.c" />
      <scope doc="Return the lowest value in an array or a series of&#xA;arguments" ilk="function" name="min" returns="mixed" signature="min(mixed arg1 [, mixed arg2 [, mixed ...]])" src="array.c" />
      <scope doc="Return the highest value in an array or a series of&#xA;arguments" ilk="function" name="max" returns="mixed" signature="max(mixed arg1 [, mixed arg2 [, mixed ...]])" src="array.c" />
      <scope doc="Apply a user function to every member of an array" ilk="function" name="array_walk" returns="bool" signature="array_walk(array input, string funcname [, mixed userdata])" src="array.c" />
      <scope doc="Apply a user function recursively to every member of an&#xA;array" ilk="function" name="array_walk_recursive" returns="bool" signature="array_walk_recursive(array input, string funcname [, mixed userdata])" src="array.c" />
      <scope doc="Checks if the given value exists in the array" ilk="function" name="in_array" returns="bool" signature="in_array(mixed needle, array haystack [, bool strict])" src="array.c" />
      <scope doc="Searches the array for a given value and returns the&#xA;corresponding key if successful" ilk="function" name="array_search" returns="mixed" signature="array_search(mixed needle, array haystack [, bool strict])" src="array.c" />
      <scope doc="Imports variables into symbol table from an array" ilk="function" name="extract" returns="int" signature="extract(array var_array [, int extract_type [, string prefix]])" src="array.c" />
      <scope doc="Creates a hash containing variables and their values" ilk="function" name="compact" returns="array" signature="compact(mixed var_names [, mixed ...])" src="array.c" />
      <scope doc="Create an array containing num elements starting with&#xA;index start key each initialized to val" ilk="function" name="array_fill" returns="array" signature="array_fill(int start_key, int num, mixed val)" src="array.c" />
      <scope doc="Create an array using the elements of the first&#xA;parameter as keys each initialized to val" ilk="function" name="array_fill_keys" returns="array" signature="array_fill_keys(array keys, mixed val)" src="array.c" />
      <scope doc="Create an array containing the range of integers or&#xA;characters from low to high inclusive" ilk="function" name="range" returns="array" signature="range(mixed low, mixed high[, int step])" src="array.c" />
      <scope doc="Randomly shuffle the contents of an array" ilk="function" name="shuffle" returns="bool" signature="shuffle(array array_arg)" src="array.c" />
      <scope doc="Pushes elements onto the end of the array" ilk="function" name="array_push" returns="int" signature="array_push(array stack, mixed var [, mixed ...])" src="array.c" />
      <scope doc="Pops an element off the end of the array" ilk="function" name="array_pop" returns="mixed" signature="array_pop(array stack)" src="array.c" />
      <scope doc="Pops an element off the beginning of the array" ilk="function" name="array_shift" returns="mixed" signature="array_shift(array stack)" src="array.c" />
      <scope doc="Pushes elements onto the beginning of the array" ilk="function" name="array_unshift" returns="int" signature="array_unshift(array stack, mixed var [, mixed ...])" src="array.c" />
      <scope doc="Removes the elements designated by offset and length&#xA;and replace them with supplied array" ilk="function" name="array_splice" returns="array" signature="array_splice(array input, int offset [, int length [, array replacement]])" src="array.c" />
      <scope doc="Returns elements specified by offset and length" ilk="function" name="array_slice" returns="array" signature="array_slice(array input, int offset [, int length [, bool preserve_keys]])" src="array.c" />
      <scope doc="Merges elements from passed arrays into one array" ilk="function" name="array_merge" returns="array" signature="array_merge(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Recursively merges elements from passed arrays into one&#xA;array" ilk="function" name="array_merge_recursive" returns="array" signature="array_merge_recursive(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Return just the keys from the input array optionally&#xA;only for the specified search value" ilk="function" name="array_keys" returns="array" signature="array_keys(array input [, mixed search_value[, bool strict]])" src="array.c" />
      <scope doc="Return just the values from the input array" ilk="function" name="array_values" returns="array" signature="array_values(array input)" src="array.c" />
      <scope doc="Return the value as key and the frequency of that value&#xA;in input as value" ilk="function" name="array_count_values" returns="array" signature="array_count_values(array input)" src="array.c" />
      <scope doc="Return input as a new array with the order of the&#xA;entries reversed" ilk="function" name="array_reverse" returns="array" signature="array_reverse(array input [, bool preserve keys])" src="array.c" />
      <scope doc="Returns a copy of input array padded with pad value to&#xA;size pad size" ilk="function" name="array_pad" returns="array" signature="array_pad(array input, int pad_size, mixed pad_value)" src="array.c" />
      <scope doc="Return array with key - value flipped" ilk="function" name="array_flip" returns="array" signature="array_flip(array input)" src="array.c" />
      <scope doc="Retuns an array with all string keys lowercased or&#xA;uppercased" ilk="function" name="array_change_key_case" returns="array" signature="array_change_key_case(array input [, int case=CASE_LOWER])" src="array.c" />
      <scope doc="Removes duplicate values from array" ilk="function" name="array_unique" returns="array" signature="array_unique(array input)" src="array.c" />
      <scope doc="Returns the entries of arr that have keys which are&#xA;present in all the other arguments Kind of equivalent&#xA;to" ilk="function" name="array_intersect_key" returns="array" signature="array_intersect_key(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have keys which are&#xA;present in all the other arguments Kind of equivalent&#xA;to" ilk="function" name="array_intersect_ukey" returns="array" signature="array_intersect_ukey(array arr1, array arr2 [, array ...], callback key_compare_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments" ilk="function" name="array_intersect" returns="array" signature="array_intersect(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments Data is compared by" ilk="function" name="array_uintersect" returns="array" signature="array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments Keys are used to" ilk="function" name="array_intersect_assoc" returns="array" signature="array_intersect_assoc(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments Keys are used to" ilk="function" name="array_uintersect_assoc" returns="array" signature="array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments Keys are used to" ilk="function" name="array_intersect_uassoc" returns="array" signature="array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;present in all the other arguments Keys are used to" ilk="function" name="array_uintersect_uassoc" returns="array" signature="array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have keys which are not&#xA;present in any of the others arguments This function" ilk="function" name="array_diff_key" returns="array" signature="array_diff_key(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have keys which are not&#xA;present in any of the others arguments User supplied" ilk="function" name="array_diff_ukey" returns="array" signature="array_diff_ukey(array arr1, array arr2 [, array ...], callback key_comp_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments" ilk="function" name="array_diff" returns="array" signature="array_diff(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments Elements are" ilk="function" name="array_udiff" returns="array" signature="array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments but do" ilk="function" name="array_diff_assoc" returns="array" signature="array_diff_assoc(array arr1, array arr2 [, array ...])" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments but do" ilk="function" name="array_diff_uassoc" returns="array" signature="array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments but do" ilk="function" name="array_udiff_assoc" returns="array" signature="array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)" src="array.c" />
      <scope doc="Returns the entries of arr that have values which are&#xA;not present in any of the others arguments but do" ilk="function" name="array_udiff_uassoc" returns="array" signature="array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)" src="array.c" />
      <scope doc="Sort multiple arrays at once similar to how ORDER BY&#xA;clause works in SQL" ilk="function" name="array_multisort" returns="bool" signature="array_multisort(array ar1 [, SORT_ASC" src="array.c" />
      <scope doc="Return key keys for random entry entries in the array" ilk="function" name="array_rand" returns="mixed" signature="array_rand(array input [, int num_req])" src="array.c" />
      <scope doc="Returns the sum of the array entries" ilk="function" name="array_sum" returns="mixed" signature="array_sum(array input)" src="array.c" />
      <scope doc="Returns the product of the array entries" ilk="function" name="array_product" returns="mixed" signature="array_product(array input)" src="array.c" />
      <scope doc="Iteratively reduce the array to a single value via the&#xA;callback" ilk="function" name="array_reduce" returns="mixed" signature="array_reduce(array input, mixed callback [, int initial])" src="array.c" />
      <scope doc="Filters elements from the array via the callback" ilk="function" name="array_filter" returns="array" signature="array_filter(array input [, mixed callback])" src="array.c" />
      <scope doc="Applies the callback to the elements in given arrays" ilk="function" name="array_map" returns="array" signature="array_map(mixed callback, array input1 [, array input2 ,...])" src="array.c" />
      <scope doc="Checks if the given key or index exists in the array" ilk="function" name="array_key_exists" returns="bool" signature="array_key_exists(mixed key, array search)" src="array.c" />
      <scope doc="Split array into chunks" ilk="function" name="array_chunk" returns="array" signature="array_chunk(array input, int size [, bool preserve_keys])" src="array.c" />
      <scope doc="Creates an array by using the elements of the first&#xA;parameter as keys and the elements of the second as" ilk="function" name="array_combine" returns="array" signature="array_combine(array keys, array values)" src="array.c" />
      <scope doc="Checks if assertion is false" ilk="function" name="assert" returns="int" signature="assert(string" src="assert.c" />
      <scope doc="Set get the various assert flags" ilk="function" name="assert_options" returns="mixed" signature="assert_options(int what [, mixed value])" src="assert.c" />
      <scope doc="Encodes string using MIME base algorithm" ilk="function" name="base64_encode" returns="string" signature="base64_encode(string str)" src="base64.c" />
      <scope doc="Decodes string using MIME base algorithm" ilk="function" name="base64_decode" returns="string" signature="base64_decode(string str[, bool strict])" src="base64.c" />
      <scope doc="Given the name of a constant this function will return&#xA;the constants associated value" ilk="function" name="constant" returns="mixed" signature="constant(string const_name)" src="basic_functions.c" />
      <scope doc="Converts a packed inet address to a human readable IP&#xA;address string" ilk="function" name="inet_ntop" returns="string" signature="inet_ntop(string in_addr)" src="basic_functions.c" />
      <scope doc="Converts a human readable IP address to a packed binary&#xA;string" ilk="function" name="inet_pton" returns="string" signature="inet_pton(string ip_address)" src="basic_functions.c" />
      <scope doc="Converts a string containing an IPv Internet Protocol&#xA;dotted address into a proper address" ilk="function" name="ip2long" returns="int" signature="ip2long(string ip_address)" src="basic_functions.c" />
      <scope doc="Converts an IPv Internet network address into a string&#xA;in Internet standard dotted format" ilk="function" name="long2ip" returns="string" signature="long2ip(int proper_address)" src="basic_functions.c" />
      <scope doc="Get the value of an environment variable" ilk="function" name="getenv" returns="string" signature="getenv(string varname)" src="basic_functions.c" />
      <scope doc="Set the value of an environment variable" ilk="function" name="putenv" returns="bool" signature="putenv(string setting)" src="basic_functions.c" />
      <scope doc="Get options from the command line argument list" ilk="function" name="getopt" returns="array" signature="getopt(string options [, array longopts])" src="basic_functions.c" />
      <scope doc="Flush the output buffer" ilk="function" name="flush" returns="void" signature="flush(void)" src="basic_functions.c" />
      <scope doc="Delay for a given number of seconds" ilk="function" name="sleep" returns="void" signature="sleep(int seconds)" src="basic_functions.c" />
      <scope doc="Delay for a given number of micro seconds" ilk="function" name="usleep" returns="void" signature="usleep(int micro_seconds)" src="basic_functions.c" />
      <scope doc="Delay for a number of seconds and nano seconds" ilk="function" name="time_nanosleep" returns="mixed" signature="time_nanosleep(long seconds, long nanoseconds)" src="basic_functions.c" />
      <scope doc="Make the script sleep until the specified time" ilk="function" name="time_sleep_until" returns="mixed" signature="time_sleep_until(float timestamp)" src="basic_functions.c" />
      <scope doc="Get the name of the owner of the current PHP script" ilk="function" name="get_current_user" returns="string" signature="get_current_user(void)" src="basic_functions.c" />
      <scope doc="Get the value of a PHP configuration option" ilk="function" name="get_cfg_var" returns="string" signature="get_cfg_var(string option_name)" src="basic_functions.c" />
      <scope doc="Set the current active configuration setting of magic&#xA;quotes runtime and return previous" ilk="function" name="set_magic_quotes_runtime" returns="bool" signature="set_magic_quotes_runtime(int new_setting)" src="basic_functions.c" />
      <scope doc="Get the current active configuration setting of magic&#xA;quotes runtime" ilk="function" name="get_magic_quotes_runtime" returns="int" signature="get_magic_quotes_runtime(void)" src="basic_functions.c" />
      <scope doc="Get the current active configuration setting of magic&#xA;quotes gpc" ilk="function" name="get_magic_quotes_gpc" returns="int" signature="get_magic_quotes_gpc(void)" src="basic_functions.c" />
      <scope doc="Send an error message somewhere" ilk="function" name="error_log" returns="bool" signature="error_log(string message [, int message_type [, string destination [, string extra_headers]]])" src="basic_functions.c" />
      <scope doc="Get the last occurred error as associative array&#xA;Returns NULL if there hasn&apos;t been an error yet" ilk="function" name="error_get_last" returns="array" signature="error_get_last()" src="basic_functions.c" />
      <scope doc="Call a user function which is the first parameter" ilk="function" name="call_user_func" returns="mixed" signature="call_user_func(string function_name [, mixed parmeter] [, mixed ...])" src="basic_functions.c" />
      <scope doc="Call a user function which is the first parameter with&#xA;the arguments contained in array" ilk="function" name="call_user_func_array" returns="mixed" signature="call_user_func_array(string function_name, array parameters)" src="basic_functions.c" />
      <scope doc="Call a user method on a specific object or class" ilk="function" name="call_user_method" returns="mixed" signature="call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])" src="basic_functions.c" />
      <scope doc="Call a user method on a specific object or class using&#xA;a parameter array" ilk="function" name="call_user_method_array" returns="mixed" signature="call_user_method_array(string method_name, mixed object, array params)" src="basic_functions.c" />
      <scope doc="Register a user-level function to be called on request&#xA;termination" ilk="function" name="register_shutdown_function" returns="void" signature="register_shutdown_function(string function_name)" src="basic_functions.c" />
      <scope doc="Syntax highlight a source file" ilk="function" name="highlight_file" returns="bool" signature="highlight_file(string file_name [, bool return] )" src="basic_functions.c" />
      <scope doc="Return source with stripped comments and whitespace" ilk="function" name="php_strip_whitespace" returns="string" signature="php_strip_whitespace(string file_name)" src="basic_functions.c" />
      <scope doc="Syntax highlight a string or optionally return it" ilk="function" name="highlight_string" returns="bool" signature="highlight_string(string string [, bool return] )" src="basic_functions.c" />
      <scope doc="Get a configuration option" ilk="function" name="ini_get" returns="string" signature="ini_get(string varname)" src="basic_functions.c" />
      <scope doc="Get all configuration options" ilk="function" name="ini_get_all" returns="array" signature="ini_get_all([string extension])" src="basic_functions.c" />
      <scope doc="Set a configuration option returns false on error and&#xA;the old value of the configuration option on success" ilk="function" name="ini_set" returns="string" signature="ini_set(string varname, string newvalue)" src="basic_functions.c" />
      <scope doc="Restore the value of a configuration option specified&#xA;by varname" ilk="function" name="ini_restore" returns="void" signature="ini_restore(string varname)" src="basic_functions.c" />
      <scope doc="Sets the include path configuration option" ilk="function" name="set_include_path" returns="string" signature="set_include_path(string new_include_path)" src="basic_functions.c" />
      <scope doc="Get the current include path configuration option" ilk="function" name="get_include_path" returns="string" signature="get_include_path()" src="basic_functions.c" />
      <scope doc="Restore the value of the include path configuration&#xA;option" ilk="function" name="restore_include_path" returns="void" signature="restore_include_path()" src="basic_functions.c" />
      <scope doc="Prints out or returns information about the specified&#xA;variable" ilk="function" name="print_r" returns="mixed" signature="print_r(mixed var [, bool return])" src="basic_functions.c" />
      <scope doc="Returns true if client disconnected" ilk="function" name="connection_aborted" returns="int" signature="connection_aborted(void)" src="basic_functions.c" />
      <scope doc="Returns the connection status bitfield" ilk="function" name="connection_status" returns="int" signature="connection_status(void)" src="basic_functions.c" />
      <scope doc="Set whether we want to ignore a user abort event or not" ilk="function" name="ignore_user_abort" returns="int" signature="ignore_user_abort(bool value)" src="basic_functions.c" />
      <scope doc="Returns port associated with service Protocol must be&#xA;tcp or udp" ilk="function" name="getservbyname" returns="int" signature="getservbyname(string service, string protocol)" src="basic_functions.c" />
      <scope doc="Returns service name associated with port Protocol must&#xA;be tcp or udp" ilk="function" name="getservbyport" returns="string" signature="getservbyport(int port, string protocol)" src="basic_functions.c" />
      <scope doc="Returns protocol number associated with name as per etc&#xA;protocols" ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(string name)" src="basic_functions.c" />
      <scope doc="Returns protocol name associated with protocol number&#xA;proto" ilk="function" name="getprotobynumber" returns="string" signature="getprotobynumber(int proto)" src="basic_functions.c" />
      <scope doc="Registers a tick callback function" ilk="function" name="register_tick_function" returns="bool" signature="register_tick_function(string function_name [, mixed arg [, mixed ... ]])" src="basic_functions.c" />
      <scope doc="Unregisters a tick callback function" ilk="function" name="unregister_tick_function" returns="void" signature="unregister_tick_function(string function_name)" src="basic_functions.c" />
      <scope doc="Check if file was created by rfc upload" ilk="function" name="is_uploaded_file" returns="bool" signature="is_uploaded_file(string path)" src="basic_functions.c" />
      <scope doc="Move a file if and only if it was created by an upload" ilk="function" name="move_uploaded_file" returns="bool" signature="move_uploaded_file(string path, string new_path)" src="basic_functions.c" />
      <scope doc="Parse configuration file" ilk="function" name="parse_ini_file" returns="array" signature="parse_ini_file(string filename [, bool process_sections])" src="basic_functions.c" />
      <scope doc="Import GET POST Cookie variables into the global scope" ilk="function" name="import_request_variables" returns="bool" signature="import_request_variables(string types [, string prefix])" src="basic_functions.c" />
      <scope doc="" ilk="function" name="sys_getloadavg" returns="array" signature="sys_getloadavg()" src="basic_functions.c" />
      <scope doc="Get information about the capabilities of a browser If&#xA;browser name is omitted or null HTTP USER AGENT is used" ilk="function" name="get_browser" returns="mixed" signature="get_browser([string browser_name [, bool return_array]])" src="browscap.c" />
      <scope doc="Calculate the crc polynomial of a string" ilk="function" name="crc32" returns="string" signature="crc32(string str)" src="crc32.c" />
      <scope doc="Encrypt a string" ilk="function" name="crypt" returns="string" signature="crypt(string str [, string salt])" src="crypt.c" />
      <scope doc="Convert from one Cyrillic character set to another" ilk="function" name="convert_cyr_string" returns="string" signature="convert_cyr_string(string str, string from, string to)" src="cyr_convert.c" />
      <scope doc="Parse a time date generated with strftime" ilk="function" name="strptime" returns="string" signature="strptime(string timestamp, string format)" src="datetime.c" />
      <scope doc="Open a directory and return a dir handle" ilk="function" name="opendir" returns="mixed" signature="opendir(string path[, resource context])" src="dir.c" />
      <scope doc="Close directory connection identified by the dir handle" ilk="function" name="closedir" returns="void" signature="closedir([resource dir_handle])" src="dir.c" />
      <scope doc="Change root directory" ilk="function" name="chroot" returns="bool" signature="chroot(string directory)" src="dir.c" />
      <scope doc="Change the current directory" ilk="function" name="chdir" returns="bool" signature="chdir(string directory)" src="dir.c" />
      <scope doc="Gets the current directory" ilk="function" name="getcwd" returns="mixed" signature="getcwd(void)" src="dir.c" />
      <scope doc="Rewind dir handle back to the start" ilk="function" name="rewinddir" returns="void" signature="rewinddir([resource dir_handle])" src="dir.c" />
      <scope doc="Read directory entry from dir handle" ilk="function" name="readdir" returns="string" signature="readdir([resource dir_handle])" src="dir.c" />
      <scope doc="Find pathnames matching a pattern" ilk="function" name="glob" returns="array" signature="glob(string pattern [, int flags])" src="dir.c" />
      <scope doc="List files directories inside the specified path" ilk="function" name="scandir" returns="array" signature="scandir(string dir [, int sorting_order [, resource context]])" src="dir.c" />
      <scope doc="Load a PHP extension at runtime" ilk="function" name="dl" returns="int" signature="dl(string extension_filename)" src="dl.c" />
      <scope doc="Get the Internet host name corresponding to a given IP&#xA;address" ilk="function" name="gethostbyaddr" returns="string" signature="gethostbyaddr(string ip_address)" src="dns.c" />
      <scope doc="Get the IP address corresponding to a given Internet&#xA;host name" ilk="function" name="gethostbyname" returns="string" signature="gethostbyname(string hostname)" src="dns.c" />
      <scope doc="Return a list of IP addresses that a given hostname&#xA;resolves to" ilk="function" name="gethostbynamel" returns="array" signature="gethostbynamel(string hostname)" src="dns.c" />
      <scope doc="Check DNS records corresponding to a given Internet&#xA;host name or IP address" ilk="function" name="dns_check_record" returns="int" signature="dns_check_record(string host [, string type])" src="dns.c" />
      <scope doc="Get any Resource Record corresponding to a given&#xA;Internet host name" ilk="function" name="dns_get_record" returns="false" signature="dns_get_record(string hostname [, int type[, array authns, array addtl]])" src="dns.c" />
      <scope doc="Get MX records corresponding to a given Internet host&#xA;name" ilk="function" name="dns_get_mx" returns="bool" signature="dns_get_mx(string hostname, array mxhosts [, array weight])" src="dns.c" />
      <scope doc="Execute an external program" ilk="function" name="exec" returns="string" signature="exec(string command [, array &amp;output [, int &amp;return_value]])" src="exec.c" />
      <scope doc="Execute an external program and display output" ilk="function" name="system" returns="int" signature="system(string command [, int &amp;return_value])" src="exec.c" />
      <scope doc="Execute an external program and display raw output" ilk="function" name="passthru" returns="void" signature="passthru(string command [, int &amp;return_value])" src="exec.c" />
      <scope doc="Escape shell metacharacters" ilk="function" name="escapeshellcmd" returns="string" signature="escapeshellcmd(string command)" src="exec.c" />
      <scope doc="Quote and escape an argument for use in a shell command" ilk="function" name="escapeshellarg" returns="string" signature="escapeshellarg(string arg)" src="exec.c" />
      <scope doc="Execute command via shell and return complete output as&#xA;string" ilk="function" name="shell_exec" returns="string" signature="shell_exec(string cmd)" src="exec.c" />
      <scope doc="Change the priority of the current process" ilk="function" name="proc_nice" returns="bool" signature="proc_nice(int priority)" src="exec.c" />
      <scope doc="Portable file locking" ilk="function" name="flock" returns="bool" signature="flock(resource fp, int operation [, int &amp;wouldblock])" src="file.c" />
      <scope doc="Extracts all meta tag content attributes from a file&#xA;and returns an array" ilk="function" name="get_meta_tags" returns="array" signature="get_meta_tags(string filename [, bool use_include_path])" src="file.c" />
      <scope doc="Read the entire file into a string" ilk="function" name="file_get_contents" returns="string" signature="file_get_contents(string filename [, bool use_include_path [, resource context [, long offset [, long maxlen]]]])" src="file.c" />
      <scope doc="Write Create a file with contents data and return the&#xA;number of bytes written" ilk="function" name="file_put_contents" returns="int" signature="file_put_contents(string file, mixed data [, int flags [, resource context]])" src="file.c" />
      <scope doc="Read entire file into an array" ilk="function" name="file" returns="array" signature="file(string filename [, int flags[, resource context]])" src="file.c" />
      <scope doc="Create a unique filename in a directory" ilk="function" name="tempnam" returns="string" signature="tempnam(string dir, string prefix)" src="file.c" />
      <scope doc="Create a temporary file that will be deleted&#xA;automatically after use" ilk="function" name="tmpfile" returns="resource" signature="tmpfile(void)" src="file.c" />
      <scope doc="Open a file or a URL and return a file pointer" ilk="function" name="fopen" returns="resource" signature="fopen(string filename, string mode [, bool use_include_path [, resource context]])" src="file.c" />
      <scope doc="Close an open file pointer" ilk="function" name="fclose" returns="bool" signature="fclose(resource fp)" src="file.c" />
      <scope doc="Execute a command and open either a read or a write&#xA;pipe to it" ilk="function" name="popen" returns="resource" signature="popen(string command, string mode)" src="file.c" />
      <scope doc="Close a file pointer opened by popen" ilk="function" name="pclose" returns="int" signature="pclose(resource fp)" src="file.c" />
      <scope doc="Test for end-of-file on a file pointer" ilk="function" name="feof" returns="bool" signature="feof(resource fp)" src="file.c" />
      <scope doc="Get a line from file pointer" ilk="function" name="fgets" returns="string" signature="fgets(resource fp[, int length])" src="file.c" />
      <scope doc="Get a character from file pointer" ilk="function" name="fgetc" returns="string" signature="fgetc(resource fp)" src="file.c" />
      <scope doc="Get a line from file pointer and strip HTML tags" ilk="function" name="fgetss" returns="string" signature="fgetss(resource fp [, int length, string allowable_tags])" src="file.c" />
      <scope doc="Implements a mostly ANSI compatible fscanf" ilk="function" name="fscanf" returns="mixed" signature="fscanf(resource stream, string format [, string ...])" src="file.c" />
      <scope doc="Binary-safe file write" ilk="function" name="fwrite" returns="int" signature="fwrite(resource fp, string str [, int length])" src="file.c" />
      <scope doc="Flushes output" ilk="function" name="fflush" returns="bool" signature="fflush(resource fp)" src="file.c" />
      <scope doc="Rewind the position of a file pointer" ilk="function" name="rewind" returns="bool" signature="rewind(resource fp)" src="file.c" />
      <scope doc="Get file pointer&apos;s read write position" ilk="function" name="ftell" returns="int" signature="ftell(resource fp)" src="file.c" />
      <scope doc="Seek on a file pointer" ilk="function" name="fseek" returns="int" signature="fseek(resource fp, int offset [, int whence])" src="file.c" />
      <scope doc="Create a directory" ilk="function" name="mkdir" returns="bool" signature="mkdir(string pathname [, int mode [, bool recursive [, resource context]]])" src="file.c" />
      <scope doc="Remove a directory" ilk="function" name="rmdir" returns="bool" signature="rmdir(string dirname[, resource context])" src="file.c" />
      <scope doc="Output a file or a URL" ilk="function" name="readfile" returns="int" signature="readfile(string filename [, bool use_include_path[, resource context]])" src="file.c" />
      <scope doc="Return or change the umask" ilk="function" name="umask" returns="int" signature="umask([int mask])" src="file.c" />
      <scope doc="Output all remaining data from a file pointer" ilk="function" name="fpassthru" returns="int" signature="fpassthru(resource fp)" src="file.c" />
      <scope doc="Rename a file" ilk="function" name="rename" returns="bool" signature="rename(string old_name, string new_name[, resource context])" src="file.c" />
      <scope doc="Delete a file" ilk="function" name="unlink" returns="bool" signature="unlink(string filename[, context context])" src="file.c" />
      <scope doc="Truncate file to &apos;size&apos; length" ilk="function" name="ftruncate" returns="bool" signature="ftruncate(resource fp, int size)" src="file.c" />
      <scope doc="Stat on a filehandle" ilk="function" name="fstat" returns="array" signature="fstat(resource fp)" src="file.c" />
      <scope doc="Copy a file" ilk="function" name="copy" returns="bool" signature="copy(string source_file, string destination_file)" src="file.c" />
      <scope doc="Binary-safe file read" ilk="function" name="fread" returns="string" signature="fread(resource fp, int length)" src="file.c" />
      <scope doc="Format line as CSV and write to file pointer" ilk="function" name="fputcsv" returns="int" signature="fputcsv(resource fp, array fields [, string delimiter [, string enclosure]])" src="file.c" />
      <scope doc="Get line from file pointer and parse for CSV fields" ilk="function" name="fgetcsv" returns="array" signature="fgetcsv(resource fp [,int length [, string delimiter [, string enclosure]]])" src="file.c" />
      <scope doc="Return the resolved path" ilk="function" name="realpath" returns="string" signature="realpath(string path)" src="file.c" />
      <scope doc="Match filename against pattern" ilk="function" name="fnmatch" returns="bool" signature="fnmatch(string pattern, string filename [, int flags])" src="file.c" />
      <scope doc="Returns directory path used for temporary files" ilk="function" name="sys_get_temp_dir" returns="string" signature="sys_get_temp_dir()" src="file.c" />
      <scope doc="Get total disk space for filesystem that path is on" ilk="function" name="disk_total_space" returns="float" signature="disk_total_space(string path)" src="filestat.c" />
      <scope doc="Get free disk space for filesystem that path is on" ilk="function" name="disk_free_space" returns="float" signature="disk_free_space(string path)" src="filestat.c" />
      <scope doc="Change file group" ilk="function" name="chgrp" returns="bool" signature="chgrp(string filename, mixed group)" src="filestat.c" />
      <scope doc="Change symlink group" ilk="function" name="lchgrp" returns="bool" signature="lchgrp(string filename, mixed group)" src="filestat.c" />
      <scope doc="Change file mode" ilk="function" name="chmod" returns="bool" signature="chmod(string filename, int mode)" src="filestat.c" />
      <scope doc="Set modification time of file" ilk="function" name="touch" returns="bool" signature="touch(string filename [, int time [, int atime]])" src="filestat.c" />
      <scope doc="Clear file stat cache" ilk="function" name="clearstatcache" returns="void" signature="clearstatcache(void)" src="filestat.c" />
      <scope doc="Get file permissions" ilk="function" name="fileperms" returns="int" signature="fileperms(string filename)" src="filestat.c" />
      <scope doc="Get file inode" ilk="function" name="fileinode" returns="int" signature="fileinode(string filename)" src="filestat.c" />
      <scope doc="Get file size" ilk="function" name="filesize" returns="int" signature="filesize(string filename)" src="filestat.c" />
      <scope doc="Get file owner" ilk="function" name="fileowner" returns="int" signature="fileowner(string filename)" src="filestat.c" />
      <scope doc="Get file group" ilk="function" name="filegroup" returns="int" signature="filegroup(string filename)" src="filestat.c" />
      <scope doc="Get last access time of file" ilk="function" name="fileatime" returns="int" signature="fileatime(string filename)" src="filestat.c" />
      <scope doc="Get last modification time of file" ilk="function" name="filemtime" returns="int" signature="filemtime(string filename)" src="filestat.c" />
      <scope doc="Get inode modification time of file" ilk="function" name="filectime" returns="int" signature="filectime(string filename)" src="filestat.c" />
      <scope doc="Get file type" ilk="function" name="filetype" returns="string" signature="filetype(string filename)" src="filestat.c" />
      <scope doc="Returns true if file can be written" ilk="function" name="is_writable" returns="bool" signature="is_writable(string filename)" src="filestat.c" />
      <scope doc="Returns true if file can be read" ilk="function" name="is_readable" returns="bool" signature="is_readable(string filename)" src="filestat.c" />
      <scope doc="Returns true if file is executable" ilk="function" name="is_executable" returns="bool" signature="is_executable(string filename)" src="filestat.c" />
      <scope doc="Returns true if file is a regular file" ilk="function" name="is_file" returns="bool" signature="is_file(string filename)" src="filestat.c" />
      <scope doc="Returns true if file is directory" ilk="function" name="is_dir" returns="bool" signature="is_dir(string filename)" src="filestat.c" />
      <scope doc="Returns true if file is symbolic link" ilk="function" name="is_link" returns="bool" signature="is_link(string filename)" src="filestat.c" />
      <scope doc="Returns true if filename exists" ilk="function" name="file_exists" returns="bool" signature="file_exists(string filename)" src="filestat.c" />
      <scope doc="Give information about a file or symbolic link" ilk="function" name="lstat" returns="array" signature="lstat(string filename)" src="filestat.c" />
      <scope doc="Give information about a file" ilk="function" name="stat" returns="array" signature="stat(string filename)" src="filestat.c" />
      <scope doc="Return a formatted string" ilk="function" name="sprintf" returns="string" signature="sprintf(string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" />
      <scope doc="Return a formatted string" ilk="function" name="vsprintf" returns="string" signature="vsprintf(string format, array args)" src="formatted_print.c" />
      <scope doc="Output a formatted string" ilk="function" name="printf" returns="int" signature="printf(string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" />
      <scope doc="Output a formatted string" ilk="function" name="vprintf" returns="int" signature="vprintf(string format, array args)" src="formatted_print.c" />
      <scope doc="Output a formatted string into a stream" ilk="function" name="fprintf" returns="int" signature="fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])" src="formatted_print.c" />
      <scope doc="Output a formatted string into a stream" ilk="function" name="vfprintf" returns="int" signature="vfprintf(resource stream, string format, array args)" src="formatted_print.c" />
      <scope doc="Open Internet or Unix domain socket connection" ilk="function" name="fsockopen" returns="resource" signature="fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" src="fsock.c" />
      <scope doc="Open persistent Internet or Unix domain socket&#xA;connection" ilk="function" name="pfsockopen" returns="resource" signature="pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" src="fsock.c" />
      <scope doc="Convert a pathname and a project identifier to a System&#xA;V IPC key" ilk="function" name="ftok" returns="int" signature="ftok(string pathname, string proj)" src="ftok.c" />
      <scope doc="Sends a raw HTTP header" ilk="function" name="header" returns="void" signature="header(string header [, bool replace, [int http_response_code]])" src="head.c" />
      <scope doc="Send a cookie" ilk="function" name="setcookie" returns="bool" signature="setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" src="head.c" />
      <scope doc="Send a cookie with no url encoding of the value" ilk="function" name="setrawcookie" returns="bool" signature="setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" src="head.c" />
      <scope doc="Returns true if headers have already been sent false&#xA;otherwise" ilk="function" name="headers_sent" returns="bool" signature="headers_sent([string &amp;$file [, int &amp;$line]])" src="head.c" />
      <scope doc="Return list of headers to be sent already sent" ilk="function" name="headers_list" returns="array" signature="headers_list(void)" src="head.c" />
      <scope doc="Convert special characters to HTML entities" ilk="function" name="htmlspecialchars" returns="string" signature="htmlspecialchars(string string [, int quote_style[, string charset[, bool double_encode]]])" src="html.c" />
      <scope doc="Convert special HTML entities back to characters" ilk="function" name="htmlspecialchars_decode" returns="string" signature="htmlspecialchars_decode(string string [, int quote_style])" src="html.c" />
      <scope doc="Convert all HTML entities to their applicable&#xA;characters" ilk="function" name="html_entity_decode" returns="string" signature="html_entity_decode(string string [, int quote_style][, string charset])" src="html.c" />
      <scope doc="Convert all applicable characters to HTML entities" ilk="function" name="htmlentities" returns="string" signature="htmlentities(string string [, int quote_style[, string charset[, bool double_encode]]])" src="html.c" />
      <scope doc="Returns the internal translation table used by&#xA;htmlspecialchars and htmlentities" ilk="function" name="get_html_translation_table" returns="array" signature="get_html_translation_table([int table [, int quote_style]])" src="html.c" />
      <scope doc="Generates a form-encoded query string from an&#xA;associative array or object" ilk="function" name="http_build_query" returns="string" signature="http_build_query(mixed formdata [, string prefix [, string arg_separator]])" src="http.c" />
      <scope doc="Get Mime-Type for image-type returned by getimagesize&#xA;exif read data exif thumbnail exif imagetype" ilk="function" name="image_type_to_mime_type" returns="string" signature="image_type_to_mime_type(int imagetype)" src="image.c" />
      <scope doc="Get file extension for image-type returned by&#xA;getimagesize exif read data exif thumbnail exif&#xA;imagetype" ilk="function" name="image_type_to_extension" returns="string" signature="image_type_to_extension(int imagetype [, bool include_dot])" src="image.c" />
      <scope doc="Get the size of an image as -element array" ilk="function" name="getimagesize" returns="array" signature="getimagesize(string imagefile [, array info])" src="image.c" />
      <scope doc="Output a page of useful information about PHP and the&#xA;current request" ilk="function" name="phpinfo" returns="void" signature="phpinfo([int what])" src="info.c" />
      <scope doc="Return the current PHP version" ilk="function" name="phpversion" returns="string" signature="phpversion([string extension])" src="info.c" />
      <scope doc="Prints the list of people who&apos;ve contributed to the PHP&#xA;project" ilk="function" name="phpcredits" returns="void" signature="phpcredits([int flag])" src="info.c" />
      <scope doc="Return the special ID used to request the PHP logo in&#xA;phpinfo screens" ilk="function" name="php_logo_guid" returns="string" signature="php_logo_guid(void)" src="info.c" />
      <scope doc="Return the special ID used to request the PHP logo in&#xA;phpinfo screens" ilk="function" name="php_real_logo_guid" returns="string" signature="php_real_logo_guid(void)" src="info.c" />
      <scope doc="Return the special ID used to request the PHP logo in&#xA;phpinfo screens" ilk="function" name="php_egg_logo_guid" returns="string" signature="php_egg_logo_guid(void)" src="info.c" />
      <scope doc="Return the special ID used to request the Zend logo in&#xA;phpinfo screens" ilk="function" name="zend_logo_guid" returns="string" signature="zend_logo_guid(void)" src="info.c" />
      <scope doc="Return the current SAPI module name" ilk="function" name="php_sapi_name" returns="string" signature="php_sapi_name(void)" src="info.c" />
      <scope doc="Return information about the system PHP was built on" ilk="function" name="php_uname" returns="string" signature="php_uname(void)" src="info.c" />
      <scope doc="Return comma-separated string of ini files parsed from&#xA;the additional ini dir" ilk="function" name="php_ini_scanned_files" returns="string" signature="php_ini_scanned_files(void)" src="info.c" />
      <scope doc="Return the actual loaded ini filename" ilk="function" name="php_ini_loaded_file" returns="string" signature="php_ini_loaded_file(void)" src="info.c" />
      <scope doc="Embed binary IPTC data into a JPEG image" ilk="function" name="iptcembed" returns="array" signature="iptcembed(string iptcdata, string jpeg_file_name [, int spool])" src="iptc.c" />
      <scope doc="Parse binary IPTC-data into associative array" ilk="function" name="iptcparse" returns="array" signature="iptcparse(string iptcdata)" src="iptc.c" />
      <scope doc="Returns a value from the combined linear congruential&#xA;generator" ilk="function" name="lcg_value" returns="float" signature="lcg_value()" src="lcg.c" />
      <scope doc="Calculate Levenshtein distance between two strings" ilk="function" name="levenshtein" returns="int" signature="levenshtein(string str1, string str2[, int cost_ins, int cost_rep, int cost_del])" src="levenshtein.c" />
      <scope doc="Return the target of a symbolic link" ilk="function" name="readlink" returns="string" signature="readlink(string filename)" src="link.c" />
      <scope doc="Returns the st dev field of the UNIX C stat structure&#xA;describing the link" ilk="function" name="linkinfo" returns="int" signature="linkinfo(string filename)" src="link.c" />
      <scope doc="Create a symbolic link" ilk="function" name="symlink" returns="int" signature="symlink(string target, string link)" src="link.c" />
      <scope doc="Create a hard link" ilk="function" name="link" returns="int" signature="link(string target, string link)" src="link.c" />
      <scope doc="Calculate EZMLM list hash value" ilk="function" name="ezmlm_hash" returns="int" signature="ezmlm_hash(string addr)" src="mail.c" />
      <scope doc="Send an email message" ilk="function" name="mail" returns="int" signature="mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" src="mail.c" />
      <scope doc="Return the absolute value of the number" ilk="function" name="abs" returns="int" signature="abs(int number)" src="math.c" />
      <scope doc="Returns the next highest integer value of the number" ilk="function" name="ceil" returns="float" signature="ceil(float number)" src="math.c" />
      <scope doc="Returns the next lowest integer value from the number" ilk="function" name="floor" returns="float" signature="floor(float number)" src="math.c" />
      <scope doc="Returns the number rounded to specified precision" ilk="function" name="round" returns="float" signature="round(float number [, int precision])" src="math.c" />
      <scope doc="Returns the sine of the number in radians" ilk="function" name="sin" returns="float" signature="sin(float number)" src="math.c" />
      <scope doc="Returns the cosine of the number in radians" ilk="function" name="cos" returns="float" signature="cos(float number)" src="math.c" />
      <scope doc="Returns the tangent of the number in radians" ilk="function" name="tan" returns="float" signature="tan(float number)" src="math.c" />
      <scope doc="Returns the arc sine of the number in radians" ilk="function" name="asin" returns="float" signature="asin(float number)" src="math.c" />
      <scope doc="Return the arc cosine of the number in radians" ilk="function" name="acos" returns="float" signature="acos(float number)" src="math.c" />
      <scope doc="Returns the arc tangent of the number in radians" ilk="function" name="atan" returns="float" signature="atan(float number)" src="math.c" />
      <scope doc="Returns the arc tangent of y x with the resulting&#xA;quadrant determined by the signs of y and x" ilk="function" name="atan2" returns="float" signature="atan2(float y, float x)" src="math.c" />
      <scope doc="Returns the hyperbolic sine of the number defined as&#xA;exp number - exp -number" ilk="function" name="sinh" returns="float" signature="sinh(float number)" src="math.c" />
      <scope doc="Returns the hyperbolic cosine of the number defined as&#xA;exp number exp -number" ilk="function" name="cosh" returns="float" signature="cosh(float number)" src="math.c" />
      <scope doc="Returns the hyperbolic tangent of the number defined as&#xA;sinh number cosh number" ilk="function" name="tanh" returns="float" signature="tanh(float number)" src="math.c" />
      <scope doc="Returns the inverse hyperbolic sine of the number i e&#xA;the value whose hyperbolic sine is number" ilk="function" name="asinh" returns="float" signature="asinh(float number)" src="math.c" />
      <scope doc="Returns the inverse hyperbolic cosine of the number i e&#xA;the value whose hyperbolic cosine is number" ilk="function" name="acosh" returns="float" signature="acosh(float number)" src="math.c" />
      <scope doc="Returns the inverse hyperbolic tangent of the number i&#xA;e the value whose hyperbolic tangent is number" ilk="function" name="atanh" returns="float" signature="atanh(float number)" src="math.c" />
      <scope doc="Returns an approximation of pi" ilk="function" name="pi" returns="float" signature="pi(void)" src="math.c" />
      <scope doc="Returns whether argument is finite" ilk="function" name="is_finite" returns="bool" signature="is_finite(float val)" src="math.c" />
      <scope doc="Returns whether argument is infinite" ilk="function" name="is_infinite" returns="bool" signature="is_infinite(float val)" src="math.c" />
      <scope doc="Returns whether argument is not a number" ilk="function" name="is_nan" returns="bool" signature="is_nan(float val)" src="math.c" />
      <scope doc="Returns base raised to the power of exponent Returns&#xA;integer result when possible" ilk="function" name="pow" returns="number" signature="pow(number base, number exponent)" src="math.c" />
      <scope doc="Returns e raised to the power of the number" ilk="function" name="exp" returns="float" signature="exp(float number)" src="math.c" />
      <scope doc="Returns exp number - computed in a way that accurate&#xA;even when the value of number is close to zero" ilk="function" name="expm1" returns="float" signature="expm1(float number)" src="math.c" />
      <scope doc="Returns log number computed in a way that accurate even&#xA;when the value of number is close to zero" ilk="function" name="log1p" returns="float" signature="log1p(float number)" src="math.c" />
      <scope doc="Returns the natural logarithm of the number or the base&#xA;log if base is specified" ilk="function" name="log" returns="float" signature="log(float number, [float base])" src="math.c" />
      <scope doc="Returns the base- logarithm of the number" ilk="function" name="log10" returns="float" signature="log10(float number)" src="math.c" />
      <scope doc="Returns the square root of the number" ilk="function" name="sqrt" returns="float" signature="sqrt(float number)" src="math.c" />
      <scope doc="Returns sqrt num num num num" ilk="function" name="hypot" returns="float" signature="hypot(float num1, float num2)" src="math.c" />
      <scope doc="Converts the number in degrees to the radian equivalent" ilk="function" name="deg2rad" returns="float" signature="deg2rad(float number)" src="math.c" />
      <scope doc="Converts the radian number to the equivalent number in&#xA;degrees" ilk="function" name="rad2deg" returns="float" signature="rad2deg(float number)" src="math.c" />
      <scope doc="Returns the decimal equivalent of the binary number" ilk="function" name="bindec" returns="int" signature="bindec(string binary_number)" src="math.c" />
      <scope doc="Returns the decimal equivalent of the hexadecimal&#xA;number" ilk="function" name="hexdec" returns="int" signature="hexdec(string hexadecimal_number)" src="math.c" />
      <scope doc="Returns the decimal equivalent of an octal string" ilk="function" name="octdec" returns="int" signature="octdec(string octal_number)" src="math.c" />
      <scope doc="Returns a string containing a binary representation of&#xA;the number" ilk="function" name="decbin" returns="string" signature="decbin(int decimal_number)" src="math.c" />
      <scope doc="Returns a string containing an octal representation of&#xA;the given number" ilk="function" name="decoct" returns="string" signature="decoct(int decimal_number)" src="math.c" />
      <scope doc="Returns a string containing a hexadecimal&#xA;representation of the given number" ilk="function" name="dechex" returns="string" signature="dechex(int decimal_number)" src="math.c" />
      <scope doc="Converts a number in a string from any base to any base" ilk="function" name="base_convert" returns="string" signature="base_convert(string number, int frombase, int tobase)" src="math.c" />
      <scope doc="Formats a number with grouped thousands" ilk="function" name="number_format" returns="string" signature="number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])" src="math.c" />
      <scope doc="Returns the remainder of dividing x by y as a float" ilk="function" name="fmod" returns="float" signature="fmod(float x, float y)" src="math.c" />
      <scope doc="Break english phrases down into their phonemes" ilk="function" name="metaphone" returns="string" signature="metaphone(string text[, int phones])" src="metaphone.c" />
      <scope doc="Returns either a string or a float containing the&#xA;current time in seconds and microseconds" ilk="function" name="microtime" returns="mixed" signature="microtime([bool get_as_float])" src="microtime.c" />
      <scope doc="Returns the current time as array" ilk="function" name="gettimeofday" returns="array" signature="gettimeofday([bool get_as_float])" src="microtime.c" />
      <scope doc="Returns an array of usage statistics" ilk="function" name="getrusage" returns="array" signature="getrusage([int who])" src="microtime.c" />
      <scope doc="Takes one or more arguments and packs them into a&#xA;binary string according to the format argument" ilk="function" name="pack" returns="string" signature="pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])" src="pack.c" />
      <scope doc="Unpack binary string into named array elements&#xA;according to format argument" ilk="function" name="unpack" returns="array" signature="unpack(string format, string input)" src="pack.c" />
      <scope doc="Get PHP script owner&apos;s UID" ilk="function" name="getmyuid" returns="int" signature="getmyuid(void)" src="pageinfo.c" />
      <scope doc="Get PHP script owner&apos;s GID" ilk="function" name="getmygid" returns="int" signature="getmygid(void)" src="pageinfo.c" />
      <scope doc="Get current process ID" ilk="function" name="getmypid" returns="int" signature="getmypid(void)" src="pageinfo.c" />
      <scope doc="Get the inode of the current script being parsed" ilk="function" name="getmyinode" returns="int" signature="getmyinode(void)" src="pageinfo.c" />
      <scope doc="Get time of last page modification" ilk="function" name="getlastmod" returns="int" signature="getlastmod(void)" src="pageinfo.c" />
      <scope doc="kill a process opened by proc open" ilk="function" name="proc_terminate" returns="bool" signature="proc_terminate(resource process [, long signal])" src="proc_open.c" />
      <scope doc="close a process opened by proc open" ilk="function" name="proc_close" returns="int" signature="proc_close(resource process)" src="proc_open.c" />
      <scope doc="get information about a process opened by proc open" ilk="function" name="proc_get_status" returns="array" signature="proc_get_status(resource process)" src="proc_open.c" />
      <scope doc="Run a process with more control over it&apos;s file&#xA;descriptors" ilk="function" name="proc_open" returns="resource" signature="proc_open(string command, array descriptorspec, array &amp;pipes [, string cwd [, array env [, array other_options]]])" src="proc_open.c" />
      <scope doc="Convert a quoted-printable string to an bit string" ilk="function" name="quoted_printable_decode" returns="string" signature="quoted_printable_decode(string str)" src="quot_print.c" />
      <scope doc="Seeds random number generator" ilk="function" name="srand" returns="void" signature="srand([int seed])" src="rand.c" />
      <scope doc="Seeds Mersenne Twister random number generator" ilk="function" name="mt_srand" returns="void" signature="mt_srand([int seed])" src="rand.c" />
      <scope doc="Returns a random number" ilk="function" name="rand" returns="int" signature="rand([int min, int max])" src="rand.c" />
      <scope doc="Returns a random number from Mersenne Twister" ilk="function" name="mt_rand" returns="int" signature="mt_rand([int min, int max])" src="rand.c" />
      <scope doc="Returns the maximum value a random number can have" ilk="function" name="getrandmax" returns="int" signature="getrandmax(void)" src="rand.c" />
      <scope doc="Returns the maximum value a random number from Mersenne&#xA;Twister can have" ilk="function" name="mt_getrandmax" returns="int" signature="mt_getrandmax(void)" src="rand.c" />
      <scope doc="Regular expression match" ilk="function" name="ereg" returns="int" signature="ereg(string pattern, string string [, array registers])" src="reg.c" />
      <scope doc="Case-insensitive regular expression match" ilk="function" name="eregi" returns="int" signature="eregi(string pattern, string string [, array registers])" src="reg.c" />
      <scope doc="Replace regular expression" ilk="function" name="ereg_replace" returns="string" signature="ereg_replace(string pattern, string replacement, string string)" src="reg.c" />
      <scope doc="Case insensitive replace regular expression" ilk="function" name="eregi_replace" returns="string" signature="eregi_replace(string pattern, string replacement, string string)" src="reg.c" />
      <scope doc="Split string into array by regular expression" ilk="function" name="split" returns="array" signature="split(string pattern, string string [, int limit])" src="reg.c" />
      <scope doc="Split string into array by regular expression&#xA;case-insensitive" ilk="function" name="spliti" returns="array" signature="spliti(string pattern, string string [, int limit])" src="reg.c" />
      <scope doc="Make regular expression for case insensitive match" ilk="function" name="sql_regcase" returns="string" signature="sql_regcase(string string)" src="reg.c" />
      <scope doc="Calculate the soundex key of a string" ilk="function" name="soundex" returns="string" signature="soundex(string str)" src="soundex.c" />
      <scope doc="Creates a pair of connected indistinguishable socket&#xA;streams" ilk="function" name="stream_socket_pair" returns="array" signature="stream_socket_pair(int domain, int type, int protocol)" src="streamsfuncs.c" />
      <scope doc="Open a client connection to a remote address" ilk="function" name="stream_socket_client" returns="resource" signature="stream_socket_client(string remoteaddress [, long &amp;errcode, string &amp;errstring, double timeout, long flags, resource context])" src="streamsfuncs.c" />
      <scope doc="Create a server socket bound to localaddress" ilk="function" name="stream_socket_server" returns="resource" signature="stream_socket_server(string localaddress [, long &amp;errcode, string &amp;errstring, long flags, resource context])" src="streamsfuncs.c" />
      <scope doc="Accept a client connection from a server socket" ilk="function" name="stream_socket_accept" returns="resource" signature="stream_socket_accept(resource serverstream, [ double timeout, string &amp;peername ])" src="streamsfuncs.c" />
      <scope doc="Returns either the locally bound or remote name for a&#xA;socket stream" ilk="function" name="stream_socket_get_name" returns="string" signature="stream_socket_get_name(resource stream, bool want_peer)" src="streamsfuncs.c" />
      <scope doc="Send data to a socket stream If target addr is&#xA;specified it must be in dotted quad or ipv format" ilk="function" name="stream_socket_sendto" returns="long" signature="stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])" src="streamsfuncs.c" />
      <scope doc="Receives data from a socket stream" ilk="function" name="stream_socket_recvfrom" returns="string" signature="stream_socket_recvfrom(resource stream, long amount [, long flags [, string &amp;remote_addr]])" src="streamsfuncs.c" />
      <scope doc="Reads all remaining bytes or up to maxlen bytes from a&#xA;stream and returns them as a string" ilk="function" name="stream_get_contents" returns="long" signature="stream_get_contents(resource source [, long maxlen [, long offset]])" src="streamsfuncs.c" />
      <scope doc="Reads up to maxlen bytes from source stream and writes&#xA;them to dest stream" ilk="function" name="stream_copy_to_stream" returns="long" signature="stream_copy_to_stream(resource source, resource dest [, long maxlen [, long pos]])" src="streamsfuncs.c" />
      <scope doc="Retrieves header meta data from streams file pointers" ilk="function" name="stream_get_meta_data" returns="array" signature="stream_get_meta_data(resource fp)" src="streamsfuncs.c" />
      <scope doc="Retrieves list of registered socket transports" ilk="function" name="stream_get_transports" returns="array" signature="stream_get_transports()" src="streamsfuncs.c" />
      <scope doc="Retrieves list of registered stream wrappers" ilk="function" name="stream_get_wrappers" returns="array" signature="stream_get_wrappers()" src="streamsfuncs.c" />
      <scope doc="Runs the select system call on the sets of streams with&#xA;a timeout specified by tv sec and tv usec" ilk="function" name="stream_select" returns="int" signature="stream_select(array &amp;read_streams, array &amp;write_streams, array &amp;except_streams, int tv_sec[, int tv_usec])" src="streamsfuncs.c" />
      <scope doc="Retrieve options for a stream wrapper context" ilk="function" name="stream_context_get_options" returns="array" signature="stream_context_get_options(resource context" src="streamsfuncs.c" />
      <scope doc="Set an option for a wrapper" ilk="function" name="stream_context_set_option" returns="bool" signature="stream_context_set_option(resource context" src="streamsfuncs.c" />
      <scope doc="Set parameters for a file context" ilk="function" name="stream_context_set_params" returns="bool" signature="stream_context_set_params(resource context" src="streamsfuncs.c" />
      <scope doc="Get a handle on the default file stream context and&#xA;optionally set parameters" ilk="function" name="stream_context_get_default" returns="resource" signature="stream_context_get_default([array options])" src="streamsfuncs.c" />
      <scope doc="Create a file context and optionally set parameters" ilk="function" name="stream_context_create" returns="resource" signature="stream_context_create([array options])" src="streamsfuncs.c" />
      <scope doc="Prepend a filter to a stream" ilk="function" name="stream_filter_prepend" returns="resource" signature="stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])" src="streamsfuncs.c" />
      <scope doc="Append a filter to a stream" ilk="function" name="stream_filter_append" returns="resource" signature="stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])" src="streamsfuncs.c" />
      <scope doc="Flushes any data in the filter&apos;s internal buffer&#xA;removes it from the chain and frees the resource" ilk="function" name="stream_filter_remove" returns="bool" signature="stream_filter_remove(resource stream_filter)" src="streamsfuncs.c" />
      <scope doc="Read up to maxlen bytes from a stream or until the&#xA;ending string is found" ilk="function" name="stream_get_line" returns="string" signature="stream_get_line(resource stream, int maxlen [, string ending])" src="streamsfuncs.c" />
      <scope doc="Set blocking non-blocking mode on a socket or stream" ilk="function" name="stream_set_blocking" returns="bool" signature="stream_set_blocking(resource socket, int mode)" src="streamsfuncs.c" />
      <scope doc="Set timeout on stream read to seconds microseonds" ilk="function" name="stream_set_timeout" returns="bool" signature="stream_set_timeout(resource stream, int seconds, int microseconds)" src="streamsfuncs.c" />
      <scope doc="Set file write buffer" ilk="function" name="stream_set_write_buffer" returns="int" signature="stream_set_write_buffer(resource fp, int buffer)" src="streamsfuncs.c" />
      <scope doc="Enable or disable a specific kind of crypto on the&#xA;stream" ilk="function" name="stream_socket_enable_crypto" returns="int" signature="stream_socket_enable_crypto(resource stream, bool enable [, int cryptokind, resource sessionstream])" src="streamsfuncs.c" />
      <scope doc="U" ilk="function" name="stream_is_local" returns="bool" signature="stream_is_local(resource stream" src="streamsfuncs.c" />
      <scope doc="causes all or part of a full-duplex connection on the&#xA;socket associated with stream to be shut down If how" ilk="function" name="stream_socket_shutdown" returns="int" signature="stream_socket_shutdown(resource stream, int how)" src="streamsfuncs.c" />
      <scope doc="Converts the binary representation of data to hex" ilk="function" name="bin2hex" returns="string" signature="bin2hex(string data)" src="string.c" />
      <scope doc="Finds length of initial segment consisting entirely of&#xA;characters found in mask If start or and length is&#xA;provided works" ilk="function" name="strspn" returns="int" signature="strspn(string str, string mask [, start [, len]])" src="string.c" />
      <scope doc="Finds length of initial segment consisting entirely of&#xA;characters not found in mask If start or and length is&#xA;provide" ilk="function" name="strcspn" returns="int" signature="strcspn(string str, string mask [, start [, len]])" src="string.c" />
      <scope doc="Query language and locale information" ilk="function" name="nl_langinfo" returns="string" signature="nl_langinfo(int item)" src="string.c" />
      <scope doc="Compares two strings using the current locale" ilk="function" name="strcoll" returns="int" signature="strcoll(string str1, string str2)" src="string.c" />
      <scope doc="Strips whitespace from the beginning and end of a&#xA;string" ilk="function" name="trim" returns="string" signature="trim(string str [, string character_mask])" src="string.c" />
      <scope doc="Removes trailing whitespace" ilk="function" name="rtrim" returns="string" signature="rtrim(string str [, string character_mask])" src="string.c" />
      <scope doc="Strips whitespace from the beginning of a string" ilk="function" name="ltrim" returns="string" signature="ltrim(string str [, string character_mask])" src="string.c" />
      <scope doc="Wraps buffer to selected number of characters using&#xA;string break char" ilk="function" name="wordwrap" returns="string" signature="wordwrap(string str [, int width [, string break [, boolean cut]]])" src="string.c" />
      <scope doc="Splits a string on string separator and return array of&#xA;components If limit is positive only limit number of&#xA;components" ilk="function" name="explode" returns="array" signature="explode(string separator, string str [, int limit])" src="string.c" />
      <scope doc="Joins array elements placing glue string between items&#xA;and return one string&amp;#xa;join is an alias to implode" ilk="function" name="join" returns="string" signature="join([string glue,] array pieces)" />
      <scope doc="Joins array elements placing glue string between items&#xA;and return one string" ilk="function" name="implode" returns="string" signature="implode([string glue,] array pieces)" src="string.c" />
      <scope doc="Tokenize a string" ilk="function" name="strtok" returns="string" signature="strtok([string str,] string token)" src="string.c" />
      <scope doc="Makes a string uppercase" ilk="function" name="strtoupper" returns="string" signature="strtoupper(string str)" src="string.c" />
      <scope doc="Makes a string lowercase" ilk="function" name="strtolower" returns="string" signature="strtolower(string str)" src="string.c" />
      <scope doc="Returns the filename component of the path" ilk="function" name="basename" returns="string" signature="basename(string path [, string suffix])" src="string.c" />
      <scope doc="Returns the directory name component of the path" ilk="function" name="dirname" returns="string" signature="dirname(string path)" src="string.c" />
      <scope doc="Returns information about a certain string" ilk="function" name="pathinfo" returns="array" signature="pathinfo(string path[, int options])" src="string.c" />
      <scope doc="Finds first occurrence of a string within another case&#xA;insensitive" ilk="function" name="stristr" returns="string" signature="stristr(string haystack, string needle)" src="string.c" />
      <scope doc="Finds first occurrence of a string within another" ilk="function" name="strstr" returns="string" signature="strstr(string haystack, string needle)" src="string.c" />
      <scope doc="Finds first occurrence of a string within another&amp;#xa;strchr is an alias to strstr" ilk="function" name="strchr" returns="string" signature="strchr(string haystack, string needle)" />
      <scope doc="Finds position of first occurrence of a string within&#xA;another" ilk="function" name="strpos" returns="int" signature="strpos(string haystack, string needle [, int offset])" src="string.c" />
      <scope doc="Finds position of first occurrence of a string within&#xA;another case insensitive" ilk="function" name="stripos" returns="int" signature="stripos(string haystack, string needle [, int offset])" src="string.c" />
      <scope doc="Finds position of last occurrence of a string within&#xA;another string" ilk="function" name="strrpos" returns="int" signature="strrpos(string haystack, string needle [, int offset])" src="string.c" />
      <scope doc="Finds position of last occurrence of a string within&#xA;another string" ilk="function" name="strripos" returns="int" signature="strripos(string haystack, string needle [, int offset])" src="string.c" />
      <scope doc="Finds the last occurrence of a character in a string&#xA;within another" ilk="function" name="strrchr" returns="string" signature="strrchr(string haystack, string needle)" src="string.c" />
      <scope doc="Returns split line" ilk="function" name="chunk_split" returns="string" signature="chunk_split(string str [, int chunklen [, string ending]])" src="string.c" />
      <scope doc="Returns part of a string" ilk="function" name="substr" returns="string" signature="substr(string str, int start [, int length])" src="string.c" />
      <scope doc="Replaces part of a string with another string" ilk="function" name="substr_replace" returns="mixed" signature="substr_replace(mixed str, mixed repl, mixed start [, mixed length])" src="string.c" />
      <scope doc="Quotes meta characters" ilk="function" name="quotemeta" returns="string" signature="quotemeta(string str)" src="string.c" />
      <scope doc="Returns ASCII value of character" ilk="function" name="ord" returns="int" signature="ord(string character)" src="string.c" />
      <scope doc="Converts ASCII code to a character" ilk="function" name="chr" returns="string" signature="chr(int ascii)" src="string.c" />
      <scope doc="Makes a string&apos;s first character uppercase" ilk="function" name="ucfirst" returns="string" signature="ucfirst(string str)" src="string.c" />
      <scope doc="Uppercase the first character of every word in a string" ilk="function" name="ucwords" returns="string" signature="ucwords(string str)" src="string.c" />
      <scope doc="Translates characters in str using given translation&#xA;tables" ilk="function" name="strtr" returns="string" signature="strtr(string str, string from[, string to])" src="string.c" />
      <scope doc="Reverse a string" ilk="function" name="strrev" returns="string" signature="strrev(string str)" src="string.c" />
      <scope doc="Calculates the similarity between two strings" ilk="function" name="similar_text" returns="int" signature="similar_text(string str1, string str2 [, float percent])" src="string.c" />
      <scope doc="Escapes all chars mentioned in charlist with backslash&#xA;It creates octal representations if asked to backslash&#xA;characters with th bit" ilk="function" name="addcslashes" returns="string" signature="addcslashes(string str, string charlist)" src="string.c" />
      <scope doc="Escapes single quote double quotes and backslash&#xA;characters in a string with backslashes" ilk="function" name="addslashes" returns="string" signature="addslashes(string str)" src="string.c" />
      <scope doc="Strips backslashes from a string Uses C-style&#xA;conventions" ilk="function" name="stripcslashes" returns="string" signature="stripcslashes(string str)" src="string.c" />
      <scope doc="Strips backslashes from a string" ilk="function" name="stripslashes" returns="string" signature="stripslashes(string str)" src="string.c" />
      <scope doc="Replaces all occurrences of search in haystack with&#xA;replace" ilk="function" name="str_replace" returns="mixed" signature="str_replace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])" src="string.c" />
      <scope doc="Replaces all occurrences of search in haystack with&#xA;replace case-insensitive" ilk="function" name="str_ireplace" returns="mixed" signature="str_ireplace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])" src="string.c" />
      <scope doc="Converts logical Hebrew text to visual text" ilk="function" name="hebrev" returns="string" signature="hebrev(string str [, int max_chars_per_line])" src="string.c" />
      <scope doc="Converts logical Hebrew text to visual text with&#xA;newline conversion" ilk="function" name="hebrevc" returns="string" signature="hebrevc(string str [, int max_chars_per_line])" src="string.c" />
      <scope doc="Converts newlines to HTML line breaks" ilk="function" name="nl2br" returns="string" signature="nl2br(string str)" src="string.c" />
      <scope doc="Strips HTML and PHP tags from a string" ilk="function" name="strip_tags" returns="string" signature="strip_tags(string str [, string allowable_tags])" src="string.c" />
      <scope doc="Set locale information" ilk="function" name="setlocale" returns="string" signature="setlocale(mixed category, string locale [, string ...])" src="string.c" />
      <scope doc="Parses GET POST COOKIE data and sets global variables" ilk="function" name="parse_str" returns="void" signature="parse_str(string encoded_string [, array result])" src="string.c" />
      <scope doc="Returns the input string repeat mult times" ilk="function" name="str_repeat" returns="string" signature="str_repeat(string input, int mult)" src="string.c" />
      <scope doc="Returns info about what characters are used in input" ilk="function" name="count_chars" returns="mixed" signature="count_chars(string input [, int mode])" src="string.c" />
      <scope doc="Returns the result of string comparison using &apos;natural&apos;&#xA;algorithm" ilk="function" name="strnatcmp" returns="int" signature="strnatcmp(string s1, string s2)" src="string.c" />
      <scope doc="Returns numeric formatting information based on the&#xA;current locale" ilk="function" name="localeconv" returns="array" signature="localeconv(void)" src="string.c" />
      <scope doc="Returns the result of case-insensitive string&#xA;comparison using &apos;natural&apos; algorithm" ilk="function" name="strnatcasecmp" returns="int" signature="strnatcasecmp(string s1, string s2)" src="string.c" />
      <scope doc="Returns the number of times a substring occurs in the&#xA;string" ilk="function" name="substr_count" returns="int" signature="substr_count(string haystack, string needle [, int offset [, int length]])" src="string.c" />
      <scope doc="Returns input string padded on the left or right to&#xA;specified length with pad string" ilk="function" name="str_pad" returns="string" signature="str_pad(string input, int pad_length [, string pad_string [, int pad_type]])" src="string.c" />
      <scope doc="Implements an ANSI C compatible sscanf" ilk="function" name="sscanf" returns="mixed" signature="sscanf(string str, string format [, string ...])" src="string.c" />
      <scope doc="Perform the rot transform on a string" ilk="function" name="str_rot13" returns="string" signature="str_rot13(string str)" src="string.c" />
      <scope doc="Shuffles string One permutation of all possible is&#xA;created" ilk="function" name="str_shuffle" returns="void" signature="str_shuffle(string str)" src="string.c" />
      <scope doc="Counts the number of words inside a string If format of&#xA;is specified then the function will return an array" ilk="function" name="str_word_count" returns="mixed" signature="str_word_count(string str, [int format [, string charlist]])" src="string.c" />
      <scope doc="Convert monetary value s to string" ilk="function" name="money_format" returns="string" signature="money_format(string format , float value)" src="string.c" />
      <scope doc="Convert a string to an array If split length is&#xA;specified break the string down into chunks each split&#xA;length" ilk="function" name="str_split" returns="array" signature="str_split(string str [, int split_length])" src="string.c" />
      <scope doc="Search a string for any of a set of characters" ilk="function" name="strpbrk" returns="array" signature="strpbrk(string haystack, string char_list)" src="string.c" />
      <scope doc="Binary safe optionally case insensitive comparison of&#xA;strings from an offset up to length characters" ilk="function" name="substr_compare" returns="int" signature="substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])" src="string.c" />
      <scope doc="Initializes all syslog-related variables" ilk="function" name="define_syslog_variables" returns="void" signature="define_syslog_variables(void)" src="syslog.c" />
      <scope doc="Open connection to system logger" ilk="function" name="openlog" returns="bool" signature="openlog(string ident, int option, int facility)" src="syslog.c" />
      <scope doc="Close connection to system logger" ilk="function" name="closelog" returns="bool" signature="closelog(void)" src="syslog.c" />
      <scope doc="Generate a system log message" ilk="function" name="syslog" returns="bool" signature="syslog(int priority, string message)" src="syslog.c" />
      <scope doc="Returns the type of the variable" ilk="function" name="gettype" returns="string" signature="gettype(mixed var)" src="type.c" />
      <scope doc="Set the type of the variable" ilk="function" name="settype" returns="bool" signature="settype(mixed var, string type)" src="type.c" />
      <scope doc="Get the integer value of a variable using the optional&#xA;base for the conversion" ilk="function" name="intval" returns="int" signature="intval(mixed var [, int base])" src="type.c" />
      <scope doc="Get the float value of a variable" ilk="function" name="floatval" returns="float" signature="floatval(mixed var)" src="type.c" />
      <scope doc="Get the string value of a variable" ilk="function" name="strval" returns="string" signature="strval(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is null" ilk="function" name="is_null" returns="bool" signature="is_null(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is a resource" ilk="function" name="is_resource" returns="bool" signature="is_resource(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is a boolean" ilk="function" name="is_bool" returns="bool" signature="is_bool(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is a long integer" ilk="function" name="is_long" returns="bool" signature="is_long(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is float point" ilk="function" name="is_float" returns="bool" signature="is_float(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is a string" ilk="function" name="is_string" returns="bool" signature="is_string(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is an array" ilk="function" name="is_array" returns="bool" signature="is_array(mixed var)" src="type.c" />
      <scope doc="Returns true if variable is an object" ilk="function" name="is_object" returns="bool" signature="is_object(mixed var)" src="type.c" />
      <scope doc="Returns true if value is a number or a numeric string" ilk="function" name="is_numeric" returns="bool" signature="is_numeric(mixed value)" src="type.c" />
      <scope doc="Returns true if value is a scalar" ilk="function" name="is_scalar" returns="bool" signature="is_scalar(mixed value)" src="type.c" />
      <scope doc="Returns true if var is callable" ilk="function" name="is_callable" returns="bool" signature="is_callable(mixed var [, bool syntax_only [, string callable_name]])" src="type.c" />
      <scope doc="Generates a unique ID" ilk="function" name="uniqid" returns="string" signature="uniqid([string prefix , bool more_entropy])" src="uniqid.c" />
      <scope doc="Parse a URL and return its components" ilk="function" name="parse_url" returns="mixed" signature="parse_url(string url, [int url_component])" src="url.c" />
      <scope doc="URL-encodes string" ilk="function" name="urlencode" returns="string" signature="urlencode(string str)" src="url.c" />
      <scope doc="Decodes URL-encoded string" ilk="function" name="urldecode" returns="string" signature="urldecode(string str)" src="url.c" />
      <scope doc="URL-encodes string" ilk="function" name="rawurlencode" returns="string" signature="rawurlencode(string str)" src="url.c" />
      <scope doc="Decodes URL-encodes string" ilk="function" name="rawurldecode" returns="string" signature="rawurldecode(string str)" src="url.c" />
      <scope doc="fetches all the headers sent by the server in response&#xA;to a HTTP request" ilk="function" name="get_headers" returns="array" signature="get_headers(string url[, int format])" src="url.c" />
      <scope doc="Return a bucket object from the brigade for operating&#xA;on" ilk="function" name="stream_bucket_make_writeable" returns="object" signature="stream_bucket_make_writeable(resource brigade)" src="user_filters.c" />
      <scope doc="Prepend bucket to brigade" ilk="function" name="stream_bucket_prepend" returns="void" signature="stream_bucket_prepend(resource brigade, resource bucket)" src="user_filters.c" />
      <scope doc="Append bucket to brigade" ilk="function" name="stream_bucket_append" returns="void" signature="stream_bucket_append(resource brigade, resource bucket)" src="user_filters.c" />
      <scope doc="Create a new bucket for use on the current stream" ilk="function" name="stream_bucket_new" returns="resource" signature="stream_bucket_new(resource stream, string buffer)" src="user_filters.c" />
      <scope doc="Returns a list of registered filters" ilk="function" name="stream_get_filters" returns="array" signature="stream_get_filters(void)" src="user_filters.c" />
      <scope doc="Registers a custom filter handler class" ilk="function" name="stream_filter_register" returns="bool" signature="stream_filter_register(string filtername, string classname)" src="user_filters.c" />
      <scope doc="uuencode a string" ilk="function" name="convert_uuencode" returns="string" signature="convert_uuencode(string data)" src="uuencode.c" />
      <scope doc="decode a uuencoded string" ilk="function" name="convert_uudecode" returns="string" signature="convert_uudecode(string data)" src="uuencode.c" />
      <scope doc="Dumps a string representation of variable to output" ilk="function" name="var_dump" returns="void" signature="var_dump(mixed var)" src="var.c" />
      <scope doc="Dumps a string representation of an internal zend value&#xA;to output" ilk="function" name="debug_zval_dump" returns="void" signature="debug_zval_dump(mixed var)" src="var.c" />
      <scope doc="Outputs or returns a string representation of a&#xA;variable" ilk="function" name="var_export" returns="mixed" signature="var_export(mixed var [, bool return])" src="var.c" />
      <scope doc="Returns a string representation of variable which can&#xA;later be unserialized" ilk="function" name="serialize" returns="string" signature="serialize(mixed variable)" src="var.c" />
      <scope doc="Takes a string representation of variable and recreates&#xA;it" ilk="function" name="unserialize" returns="mixed" signature="unserialize(string variable_representation)" src="var.c" />
      <scope doc="Returns the allocated by PHP memory" ilk="function" name="memory_get_usage" returns="int" signature="memory_get_usage([real_usage])" src="var.c" />
      <scope doc="Returns the peak allocated by PHP memory" ilk="function" name="memory_get_peak_usage" returns="int" signature="memory_get_peak_usage([real_usage])" src="var.c" />
      <scope doc="Compares two PHP-standardized version number strings" ilk="function" name="version_compare" returns="int" signature="version_compare(string ver1, string ver2 [, string oper])" src="versioning.c" />
      <scope doc="Open Sybase server connection" ilk="function" name="sybase_connect" returns="int" signature="sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])" src="php_sybase_ct.c" />
      <scope doc="Open persistent Sybase connection" ilk="function" name="sybase_pconnect" returns="int" signature="sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])" src="php_sybase_ct.c" />
      <scope doc="Close Sybase connection" ilk="function" name="sybase_close" returns="bool" signature="sybase_close([int link_id])" src="php_sybase_ct.c" />
      <scope doc="Select Sybase database" ilk="function" name="sybase_select_db" returns="bool" signature="sybase_select_db(string database [, int link_id])" src="php_sybase_ct.c" />
      <scope doc="Send Sybase query" ilk="function" name="sybase_query" returns="int" signature="sybase_query(string query [, int link_id])" src="php_sybase_ct.c" />
      <scope doc="Free result memory" ilk="function" name="sybase_free_result" returns="bool" signature="sybase_free_result(int result)" src="php_sybase_ct.c" />
      <scope doc="Returns the last message from server over min message&#xA;severity" ilk="function" name="sybase_get_last_message" returns="string" signature="sybase_get_last_message(void)" src="php_sybase_ct.c" />
      <scope doc="Get number of rows in result" ilk="function" name="sybase_num_rows" returns="int" signature="sybase_num_rows(int result)" src="php_sybase_ct.c" />
      <scope doc="Get number of fields in result" ilk="function" name="sybase_num_fields" returns="int" signature="sybase_num_fields(int result)" src="php_sybase_ct.c" />
      <scope doc="Get row as enumerated array" ilk="function" name="sybase_fetch_row" returns="array" signature="sybase_fetch_row(int result)" src="php_sybase_ct.c" />
      <scope doc="Fetch row as object" ilk="function" name="sybase_fetch_object" returns="object" signature="sybase_fetch_object(int result [, mixed object])" src="php_sybase_ct.c" />
      <scope doc="Fetch row as array" ilk="function" name="sybase_fetch_array" returns="array" signature="sybase_fetch_array(int result)" src="php_sybase_ct.c" />
      <scope doc="Move internal row pointer" ilk="function" name="sybase_data_seek" returns="bool" signature="sybase_data_seek(int result, int offset)" src="php_sybase_ct.c" />
      <scope doc="Get field information" ilk="function" name="sybase_fetch_field" returns="object" signature="sybase_fetch_field(int result [, int offset])" src="php_sybase_ct.c" />
      <scope doc="Set field offset" ilk="function" name="sybase_field_seek" returns="bool" signature="sybase_field_seek(int result, int offset)" src="php_sybase_ct.c" />
      <scope doc="Get result data" ilk="function" name="sybase_result" returns="string" signature="sybase_result(int result, int row, mixed field)" src="php_sybase_ct.c" />
      <scope doc="Get number of affected rows in last query" ilk="function" name="sybase_affected_rows" returns="int" signature="sybase_affected_rows([int link_id])" src="php_sybase_ct.c" />
      <scope doc="Sets the minimum error severity" ilk="function" name="sybase_min_error_severity" returns="void" signature="sybase_min_error_severity(int severity)" src="php_sybase_db.c" />
      <scope doc="Sets the minimum message severity" ilk="function" name="sybase_min_message_severity" returns="void" signature="sybase_min_message_severity(int severity)" src="php_sybase_db.c" />
      <scope doc="Send Sybase query" ilk="function" name="sybase_unbuffered_query" returns="int" signature="sybase_unbuffered_query(string query [, int link_id])" src="php_sybase_ct.c" />
      <scope doc="Fetch row as array without numberic indices" ilk="function" name="sybase_fetch_assoc" returns="array" signature="sybase_fetch_assoc(int result)" src="php_sybase_ct.c" />
      <scope doc="Sets minimum client severity" ilk="function" name="sybase_min_client_severity" returns="void" signature="sybase_min_client_severity(int severity)" src="php_sybase_ct.c" />
      <scope doc="Sets minimum server severity" ilk="function" name="sybase_min_server_severity" returns="void" signature="sybase_min_server_severity(int severity)" src="php_sybase_ct.c" />
      <scope doc="Sets deadlock retry count" ilk="function" name="sybase_deadlock_retry_count" returns="void" signature="sybase_deadlock_retry_count(int retry_count)" src="php_sybase_ct.c" />
      <scope doc="Set the error handler to be called when a server&#xA;message is raised If error func is NULL the handler" ilk="function" name="sybase_set_message_handler" returns="bool" signature="sybase_set_message_handler(mixed error_func [, resource connection])" src="php_sybase_ct.c" />
      <scope doc="Set information for a message queue" ilk="function" name="msg_set_queue" returns="bool" signature="msg_set_queue(resource queue, array data)" src="sysvmsg.c" />
      <scope doc="Returns information about a message queue" ilk="function" name="msg_stat_queue" returns="array" signature="msg_stat_queue(resource queue)" src="sysvmsg.c" />
      <scope doc="Attach to a message queue" ilk="function" name="msg_get_queue" returns="resource" signature="msg_get_queue(int key [, int perms])" src="sysvmsg.c" />
      <scope doc="Destroy the queue" ilk="function" name="msg_remove_queue" returns="bool" signature="msg_remove_queue(resource queue)" src="sysvmsg.c" />
      <scope doc="Send a message of type msgtype must be to a message&#xA;queue" ilk="function" name="msg_receive" returns="mixed" signature="msg_receive(resource queue, int desiredmsgtype, int &amp;msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])" src="sysvmsg.c" />
      <scope doc="Send a message of type msgtype must be to a message&#xA;queue" ilk="function" name="msg_send" returns="bool" signature="msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])" src="sysvmsg.c" />
      <scope doc="Return an id for the semaphore with the given key and&#xA;allow max acquire default processes to acquire it&#xA;simultaneously" ilk="function" name="sem_get" returns="resource" signature="sem_get(int key [, int max_acquire [, int perm [, int auto_release]])" src="sysvsem.c" />
      <scope doc="Acquires the semaphore with the given id blocking if&#xA;necessary" ilk="function" name="sem_acquire" returns="bool" signature="sem_acquire(resource id)" src="sysvsem.c" />
      <scope doc="Releases the semaphore with the given id" ilk="function" name="sem_release" returns="bool" signature="sem_release(resource id)" src="sysvsem.c" />
      <scope doc="Removes semaphore from Unix systems" ilk="function" name="sem_remove" returns="bool" signature="sem_remove(resource id)" src="sysvsem.c" />
      <scope doc="Creates or open a shared memory segment" ilk="function" name="shm_attach" returns="int" signature="shm_attach(int key [, int memsize [, int perm]])" src="sysvshm.c" />
      <scope doc="Disconnects from shared memory segment" ilk="function" name="shm_detach" returns="bool" signature="shm_detach(int shm_identifier)" src="sysvshm.c" />
      <scope doc="Removes shared memory from Unix systems" ilk="function" name="shm_remove" returns="bool" signature="shm_remove(int shm_identifier)" src="sysvshm.c" />
      <scope doc="Inserts or updates a variable in shared memory" ilk="function" name="shm_put_var" returns="bool" signature="shm_put_var(int shm_identifier, int variable_key, mixed variable)" src="sysvshm.c" />
      <scope doc="Returns a variable from shared memory" ilk="function" name="shm_get_var" returns="mixed" signature="shm_get_var(int id, int variable_key)" src="sysvshm.c" />
      <scope doc="Removes variable from shared memory" ilk="function" name="shm_remove_var" returns="bool" signature="shm_remove_var(int id, int variable_key)" src="sysvshm.c" />
      <scope doc="Parse a document stored in a string" ilk="function" name="tidy_parse_string" returns="bool" signature="tidy_parse_string(string input [, mixed config_options [, string encoding]])" src="tidy.c" />
      <scope doc="Return warnings and errors which occured parsing the&#xA;specified document" ilk="function" name="tidy_get_error_buffer" returns="string" signature="tidy_get_error_buffer([boolean detailed])" src="tidy.c" />
      <scope doc="Return a string representing the parsed tidy markup" ilk="function" name="tidy_get_output" returns="string" signature="tidy_get_output()" src="tidy.c" />
      <scope doc="Parse markup in file or URI" ilk="function" name="tidy_parse_file" returns="boolean" signature="tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])" src="tidy.c" />
      <scope doc="Execute configured cleanup and repair operations on&#xA;parsed markup" ilk="function" name="tidy_clean_repair" returns="boolean" signature="tidy_clean_repair()" src="tidy.c" />
      <scope doc="Repair a string using an optionally provided&#xA;configuration file" ilk="function" name="tidy_repair_string" returns="boolean" signature="tidy_repair_string(string data [, mixed config_file [, string encoding]])" src="tidy.c" />
      <scope doc="Repair a file using an optionally provided&#xA;configuration file" ilk="function" name="tidy_repair_file" returns="boolean" signature="tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])" src="tidy.c" />
      <scope doc="Run configured diagnostics on parsed and repaired&#xA;markup" ilk="function" name="tidy_diagnose" returns="boolean" signature="tidy_diagnose()" src="tidy.c" />
      <scope doc="Get release date version for Tidy library" ilk="function" name="tidy_get_release" returns="string" signature="tidy_get_release()" src="tidy.c" />
      <scope doc="Returns the documentation for the given option name" ilk="function" name="tidy_get_opt_doc" returns="string" signature="tidy_get_opt_doc(tidy resource, string optname)" src="tidy.c" />
      <scope doc="Get current Tidy configuarion" ilk="function" name="tidy_get_config" returns="array" signature="tidy_get_config()" src="tidy.c" />
      <scope doc="Get status of specfied document" ilk="function" name="tidy_get_status" returns="int" signature="tidy_get_status()" src="tidy.c" />
      <scope doc="Get the Detected HTML version for the specified&#xA;document" ilk="function" name="tidy_get_html_ver" returns="int" signature="tidy_get_html_ver()" src="tidy.c" />
      <scope doc="Indicates if the document is a XHTML document" ilk="function" name="tidy_is_xhtml" returns="boolean" signature="tidy_is_xhtml()" src="tidy.c" />
      <scope doc="Indicates if the document is a generic non HTML XHTML&#xA;XML document" ilk="function" name="tidy_is_xml" returns="boolean" signature="tidy_is_xml()" src="tidy.c" />
      <scope doc="Returns the Number of Tidy errors encountered for&#xA;specified document" ilk="function" name="tidy_error_count" returns="int" signature="tidy_error_count()" src="tidy.c" />
      <scope doc="Returns the Number of Tidy warnings encountered for&#xA;specified document" ilk="function" name="tidy_warning_count" returns="int" signature="tidy_warning_count()" src="tidy.c" />
      <scope doc="Returns the Number of Tidy accessibility warnings&#xA;encountered for specified document" ilk="function" name="tidy_access_count" returns="int" signature="tidy_access_count()" src="tidy.c" />
      <scope doc="Returns the Number of Tidy configuration errors&#xA;encountered for specified document" ilk="function" name="tidy_config_count" returns="int" signature="tidy_config_count()" src="tidy.c" />
      <scope doc="Returns the value of the specified configuration option&#xA;for the tidy document" ilk="function" name="tidy_getopt" returns="mixed" signature="tidy_getopt(string option)" src="tidy.c" />
      <scope doc="Returns a TidyNode Object representing the root of the&#xA;tidy parse tree" ilk="function" name="tidy_get_root" returns="TidyNode" signature="tidy_get_root()" src="tidy.c" />
      <scope doc="Returns a TidyNode Object starting from the HTML tag of&#xA;the tidy parse tree" ilk="function" name="tidy_get_html" returns="TidyNode" signature="tidy_get_html()" src="tidy.c" />
      <scope doc="Returns a TidyNode Object starting from the HEAD tag of&#xA;the tidy parse tree" ilk="function" name="tidy_get_head" returns="TidyNode" signature="tidy_get_head()" src="tidy.c" />
      <scope doc="Returns a TidyNode Object starting from the BODY tag of&#xA;the tidy parse tree" ilk="function" name="tidy_get_body" returns="TidyNode" signature="tidy_get_body(resource tidy)" src="tidy.c" />
      <scope doc="" ilk="function" name="token_get_all" returns="array" signature="token_get_all(string source)" src="tokenizer.c" />
      <scope doc="" ilk="function" name="token_name" returns="string" signature="token_name(int type)" src="tokenizer.c" />
      <scope doc="Creates a new packet and serializes the given value" ilk="function" name="wddx_serialize_value" returns="string" signature="wddx_serialize_value(mixed var [, string comment])" src="wddx.c" />
      <scope doc="Creates a new packet and serializes given variables&#xA;into a struct" ilk="function" name="wddx_serialize_vars" returns="string" signature="wddx_serialize_vars(mixed var_name [, mixed ...])" src="wddx.c" />
      <scope doc="Starts a WDDX packet with optional comment and returns&#xA;the packet id" ilk="function" name="wddx_packet_start" returns="int" signature="wddx_packet_start([string comment])" src="wddx.c" />
      <scope doc="Ends specified WDDX packet and returns the string&#xA;containing the packet" ilk="function" name="wddx_packet_end" returns="string" signature="wddx_packet_end(int packet_id)" src="wddx.c" />
      <scope doc="Serializes given variables and adds them to packet&#xA;given by packet id" ilk="function" name="wddx_add_vars" returns="int" signature="wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])" src="wddx.c" />
      <scope doc="Deserializes given packet and returns a PHP value" ilk="function" name="wddx_deserialize" returns="mixed" signature="wddx_deserialize(mixed packet)" src="wddx.c" />
      <scope doc="Create an XML parser" ilk="function" name="xml_parser_create" returns="resource" signature="xml_parser_create([string encoding])" src="xml.c" />
      <scope doc="Create an XML parser" ilk="function" name="xml_parser_create_ns" returns="resource" signature="xml_parser_create_ns([string encoding [, string sep]])" src="xml.c" />
      <scope doc="Set up object which should be used for callbacks" ilk="function" name="xml_set_object" returns="int" signature="xml_set_object(resource parser, object &amp;obj)" src="xml.c" />
      <scope doc="Set up start and end element handlers" ilk="function" name="xml_set_element_handler" returns="int" signature="xml_set_element_handler(resource parser, string shdl, string ehdl)" src="xml.c" />
      <scope doc="Set up character data handler" ilk="function" name="xml_set_character_data_handler" returns="int" signature="xml_set_character_data_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up processing instruction PI handler" ilk="function" name="xml_set_processing_instruction_handler" returns="int" signature="xml_set_processing_instruction_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up default handler" ilk="function" name="xml_set_default_handler" returns="int" signature="xml_set_default_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up unparsed entity declaration handler" ilk="function" name="xml_set_unparsed_entity_decl_handler" returns="int" signature="xml_set_unparsed_entity_decl_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up notation declaration handler" ilk="function" name="xml_set_notation_decl_handler" returns="int" signature="xml_set_notation_decl_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up external entity reference handler" ilk="function" name="xml_set_external_entity_ref_handler" returns="int" signature="xml_set_external_entity_ref_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up character data handler" ilk="function" name="xml_set_start_namespace_decl_handler" returns="int" signature="xml_set_start_namespace_decl_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Set up character data handler" ilk="function" name="xml_set_end_namespace_decl_handler" returns="int" signature="xml_set_end_namespace_decl_handler(resource parser, string hdl)" src="xml.c" />
      <scope doc="Start parsing an XML document" ilk="function" name="xml_parse" returns="int" signature="xml_parse(resource parser, string data [, int isFinal])" src="xml.c" />
      <scope doc="Parsing a XML document" ilk="function" name="xml_parse_into_struct" returns="int" signature="xml_parse_into_struct(resource parser, string data, array &amp;struct, array &amp;index)" src="xml.c" />
      <scope doc="Get XML parser error code" ilk="function" name="xml_get_error_code" returns="int" signature="xml_get_error_code(resource parser)" src="xml.c" />
      <scope doc="Get XML parser error string" ilk="function" name="xml_error_string" returns="string" signature="xml_error_string(int code)" src="xml.c" />
      <scope doc="Get current line number for an XML parser" ilk="function" name="xml_get_current_line_number" returns="int" signature="xml_get_current_line_number(resource parser)" src="xml.c" />
      <scope doc="Get current column number for an XML parser" ilk="function" name="xml_get_current_column_number" returns="int" signature="xml_get_current_column_number(resource parser)" src="xml.c" />
      <scope doc="Get current byte index for an XML parser" ilk="function" name="xml_get_current_byte_index" returns="int" signature="xml_get_current_byte_index(resource parser)" src="xml.c" />
      <scope doc="Free an XML parser" ilk="function" name="xml_parser_free" returns="int" signature="xml_parser_free(resource parser)" src="xml.c" />
      <scope doc="Set options in an XML parser" ilk="function" name="xml_parser_set_option" returns="int" signature="xml_parser_set_option(resource parser, int option, mixed value)" src="xml.c" />
      <scope doc="Get options from an XML parser" ilk="function" name="xml_parser_get_option" returns="int" signature="xml_parser_get_option(resource parser, int option)" src="xml.c" />
      <scope doc="Encodes an ISO- - string to UTF-" ilk="function" name="utf8_encode" returns="string" signature="utf8_encode(string data)" src="xml.c" />
      <scope doc="Converts a UTF- encoded string to ISO- -" ilk="function" name="utf8_decode" returns="string" signature="utf8_decode(string data)" src="xml.c" />
      <scope doc="Generates XML for a method request" ilk="function" name="xmlrpc_encode_request" returns="string" signature="xmlrpc_encode_request(string method, mixed params)" src="xmlrpc-epi-php.c" />
      <scope doc="Generates XML for a PHP value" ilk="function" name="xmlrpc_encode" returns="string" signature="xmlrpc_encode(mixed value)" src="xmlrpc-epi-php.c" />
      <scope doc="Decodes XML into native PHP types" ilk="function" name="xmlrpc_decode_request" returns="array" signature="xmlrpc_decode_request(string xml, string&amp; method [, string encoding])" src="xmlrpc-epi-php.c" />
      <scope doc="Decodes XML into native PHP types" ilk="function" name="xmlrpc_decode" returns="array" signature="xmlrpc_decode(string xml [, string encoding])" src="xmlrpc-epi-php.c" />
      <scope doc="Creates an xmlrpc server" ilk="function" name="xmlrpc_server_create" returns="resource" signature="xmlrpc_server_create(void)" src="xmlrpc-epi-php.c" />
      <scope doc="Destroys server resources" ilk="function" name="xmlrpc_server_destroy" returns="int" signature="xmlrpc_server_destroy(resource server)" src="xmlrpc-epi-php.c" />
      <scope doc="Register a PHP function to handle method matching&#xA;method name" ilk="function" name="xmlrpc_server_register_method" returns="bool" signature="xmlrpc_server_register_method(resource server, string method_name, string function)" src="xmlrpc-epi-php.c" />
      <scope doc="Register a PHP function to generate documentation" ilk="function" name="xmlrpc_server_register_introspection_callback" returns="bool" signature="xmlrpc_server_register_introspection_callback(resource server, string function)" src="xmlrpc-epi-php.c" />
      <scope doc="Parses XML requests and call methods" ilk="function" name="xmlrpc_server_call_method" returns="mixed" signature="xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])" src="xmlrpc-epi-php.c" />
      <scope doc="Adds introspection documentation" ilk="function" name="xmlrpc_server_add_introspection_data" returns="int" signature="xmlrpc_server_add_introspection_data(resource server, array desc)" src="xmlrpc-epi-php.c" />
      <scope doc="Decodes XML into a list of method descriptions" ilk="function" name="xmlrpc_parse_method_descriptions" returns="array" signature="xmlrpc_parse_method_descriptions(string xml)" src="xmlrpc-epi-php.c" />
      <scope doc="Sets xmlrpc type base or datetime for a PHP string&#xA;value" ilk="function" name="xmlrpc_set_type" returns="bool" signature="xmlrpc_set_type(string value, string type)" src="xmlrpc-epi-php.c" />
      <scope doc="Gets xmlrpc type for a PHP value Especially useful for&#xA;base and datetime strings" ilk="function" name="xmlrpc_get_type" returns="string" signature="xmlrpc_get_type(mixed value)" src="xmlrpc-epi-php.c" />
      <scope doc="Determines if an array value represents an XMLRPC fault" ilk="function" name="xmlrpc_is_fault" returns="bool" signature="xmlrpc_is_fault(array)" src="xmlrpc-epi-php.c" />
      <scope doc="Toggle indentation on off - returns FALSE on error" ilk="function" name="xmlwriter_set_indent" returns="bool" signature="xmlwriter_set_indent(resource xmlwriter, bool indent)" src="php_xmlwriter.c" />
      <scope doc="Set string used for indenting - returns FALSE on error" ilk="function" name="xmlwriter_set_indent_string" returns="bool" signature="xmlwriter_set_indent_string(resource xmlwriter, string indentString)" src="php_xmlwriter.c" />
      <scope doc="Create start attribute - returns FALSE on error" ilk="function" name="xmlwriter_start_attribute" returns="bool" signature="xmlwriter_start_attribute(resource xmlwriter, string name)" src="php_xmlwriter.c" />
      <scope doc="End attribute - returns FALSE on error" ilk="function" name="xmlwriter_end_attribute" returns="bool" signature="xmlwriter_end_attribute(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Create start namespaced attribute - returns FALSE on&#xA;error" ilk="function" name="xmlwriter_start_attribute_ns" returns="bool" signature="xmlwriter_start_attribute_ns(resource xmlwriter, string prefix, string name, string uri)" src="php_xmlwriter.c" />
      <scope doc="Write full attribute - returns FALSE on error" ilk="function" name="xmlwriter_write_attribute" returns="bool" signature="xmlwriter_write_attribute(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" />
      <scope doc="Write full namespaced attribute - returns FALSE on&#xA;error" ilk="function" name="xmlwriter_write_attribute_ns" returns="bool" signature="xmlwriter_write_attribute_ns(resource xmlwriter, string prefix, string name, string uri, string content)" src="php_xmlwriter.c" />
      <scope doc="Create start element tag - returns FALSE on error" ilk="function" name="xmlwriter_start_element" returns="bool" signature="xmlwriter_start_element(resource xmlwriter, string name)" src="php_xmlwriter.c" />
      <scope doc="Create start namespaced element tag - returns FALSE on&#xA;error" ilk="function" name="xmlwriter_start_element_ns" returns="bool" signature="xmlwriter_start_element_ns(resource xmlwriter, string prefix, string name, string uri)" src="php_xmlwriter.c" />
      <scope doc="End current element - returns FALSE on error" ilk="function" name="xmlwriter_end_element" returns="bool" signature="xmlwriter_end_element(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="End current element - returns FALSE on error" ilk="function" name="xmlwriter_full_end_element" returns="bool" signature="xmlwriter_full_end_element(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full element tag - returns FALSE on error" ilk="function" name="xmlwriter_write_element" returns="bool" signature="xmlwriter_write_element(resource xmlwriter, string name[, string content])" src="php_xmlwriter.c" />
      <scope doc="Write full namesapced element tag - returns FALSE on&#xA;error" ilk="function" name="xmlwriter_write_element_ns" returns="bool" signature="xmlwriter_write_element_ns(resource xmlwriter, string prefix, string name, string uri[, string content])" src="php_xmlwriter.c" />
      <scope doc="Create start PI tag - returns FALSE on error" ilk="function" name="xmlwriter_start_pi" returns="bool" signature="xmlwriter_start_pi(resource xmlwriter, string target)" src="php_xmlwriter.c" />
      <scope doc="End current PI - returns FALSE on error" ilk="function" name="xmlwriter_end_pi" returns="bool" signature="xmlwriter_end_pi(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full PI tag - returns FALSE on error" ilk="function" name="xmlwriter_write_pi" returns="bool" signature="xmlwriter_write_pi(resource xmlwriter, string target, string content)" src="php_xmlwriter.c" />
      <scope doc="Create start CDATA tag - returns FALSE on error" ilk="function" name="xmlwriter_start_cdata" returns="bool" signature="xmlwriter_start_cdata(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="End current CDATA - returns FALSE on error" ilk="function" name="xmlwriter_end_cdata" returns="bool" signature="xmlwriter_end_cdata(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full CDATA tag - returns FALSE on error" ilk="function" name="xmlwriter_write_cdata" returns="bool" signature="xmlwriter_write_cdata(resource xmlwriter, string content)" src="php_xmlwriter.c" />
      <scope doc="Write text - returns FALSE on error" ilk="function" name="xmlwriter_write_raw" returns="bool" signature="xmlwriter_write_raw(resource xmlwriter, string content)" src="php_xmlwriter.c" />
      <scope doc="Write text - returns FALSE on error" ilk="function" name="xmlwriter_text" returns="bool" signature="xmlwriter_text(resource xmlwriter, string content)" src="php_xmlwriter.c" />
      <scope doc="Create start comment - returns FALSE on error" ilk="function" name="xmlwriter_start_comment" returns="bool" signature="xmlwriter_start_comment(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Create end comment - returns FALSE on error" ilk="function" name="xmlwriter_end_comment" returns="bool" signature="xmlwriter_end_comment(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full comment tag - returns FALSE on error" ilk="function" name="xmlwriter_write_comment" returns="bool" signature="xmlwriter_write_comment(resource xmlwriter, string content)" src="php_xmlwriter.c" />
      <scope doc="Create document tag - returns FALSE on error" ilk="function" name="xmlwriter_start_document" returns="bool" signature="xmlwriter_start_document(resource xmlwriter, string version, string encoding, string standalone)" src="php_xmlwriter.c" />
      <scope doc="End current document - returns FALSE on error" ilk="function" name="xmlwriter_end_document" returns="bool" signature="xmlwriter_end_document(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Create start DTD tag - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd" returns="bool" signature="xmlwriter_start_dtd(resource xmlwriter, string name, string pubid, string sysid)" src="php_xmlwriter.c" />
      <scope doc="End current DTD - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd" returns="bool" signature="xmlwriter_end_dtd(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full DTD tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd" returns="bool" signature="xmlwriter_write_dtd(resource xmlwriter, string name, string pubid, string sysid, string subset)" src="php_xmlwriter.c" />
      <scope doc="Create start DTD element - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_element" returns="bool" signature="xmlwriter_start_dtd_element(resource xmlwriter, string name)" src="php_xmlwriter.c" />
      <scope doc="End current DTD element - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_element" returns="bool" signature="xmlwriter_end_dtd_element(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full DTD element tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_element" returns="bool" signature="xmlwriter_write_dtd_element(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" />
      <scope doc="Create start DTD AttList - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_attlist" returns="bool" signature="xmlwriter_start_dtd_attlist(resource xmlwriter, string name)" src="php_xmlwriter.c" />
      <scope doc="End current DTD AttList - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_attlist" returns="bool" signature="xmlwriter_end_dtd_attlist(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full DTD AttList tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_attlist" returns="bool" signature="xmlwriter_write_dtd_attlist(resource xmlwriter, string name, string content)" src="php_xmlwriter.c" />
      <scope doc="Create start DTD Entity - returns FALSE on error" ilk="function" name="xmlwriter_start_dtd_entity" returns="bool" signature="xmlwriter_start_dtd_entity(resource xmlwriter, string name, bool isparam)" src="php_xmlwriter.c" />
      <scope doc="End current DTD Entity - returns FALSE on error" ilk="function" name="xmlwriter_end_dtd_entity" returns="bool" signature="xmlwriter_end_dtd_entity(resource xmlwriter)" src="php_xmlwriter.c" />
      <scope doc="Write full DTD Entity tag - returns FALSE on error" ilk="function" name="xmlwriter_write_dtd_entity" returns="bool" signature="xmlwriter_write_dtd_entity(resource xmlwriter, string name, string content [, int pe [, string pubid [, string sysid [, string ndataid]]]])" src="php_xmlwriter.c" />
      <scope doc="Create new xmlwriter using source uri for output" ilk="function" name="xmlwriter_open_uri" returns="resource" signature="xmlwriter_open_uri(resource xmlwriter, string source)" src="php_xmlwriter.c" />
      <scope doc="Create new xmlwriter using memory for string output" ilk="function" name="xmlwriter_open_memory" returns="resource" signature="xmlwriter_open_memory()" src="php_xmlwriter.c" />
      <scope doc="Output current buffer as string" ilk="function" name="xmlwriter_output_memory" returns="string" signature="xmlwriter_output_memory(resource xmlwriter [,bool flush])" src="php_xmlwriter.c" />
      <scope doc="Output current buffer" ilk="function" name="xmlwriter_flush" returns="mixed" signature="xmlwriter_flush(resource xmlwriter [,bool empty])" src="php_xmlwriter.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Since" ilk="function" name="xsl_xsltprocessor_import_stylesheet" returns="void" signature="xsl_xsltprocessor_import_stylesheet(domdocument doc)" src="xsltprocessor.c" />
      <scope doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#xA;html Since" ilk="function" name="xsl_xsltprocessor_transform_to_doc" returns="domdocument" signature="xsl_xsltprocessor_transform_to_doc(domnode doc)" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_transform_to_uri" returns="int" signature="xsl_xsltprocessor_transform_to_uri(domdocument doc, string uri)" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_transform_to_xml" returns="string" signature="xsl_xsltprocessor_transform_to_xml(domdocument doc)" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_set_parameter" returns="bool" signature="xsl_xsltprocessor_set_parameter(string namespace, mixed name [, string value])" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_get_parameter" returns="string" signature="xsl_xsltprocessor_get_parameter(string namespace, string name)" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_remove_parameter" returns="bool" signature="xsl_xsltprocessor_remove_parameter(string namespace, string name)" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_register_php_functions" returns="void" signature="xsl_xsltprocessor_register_php_functions()" src="xsltprocessor.c" />
      <scope doc="" ilk="function" name="xsl_xsltprocessor_has_exslt_support" returns="bool" signature="xsl_xsltprocessor_has_exslt_support()" src="xsltprocessor.c" />
      <scope doc="Create new zip using source uri for output" ilk="function" name="zip_open" returns="resource" signature="zip_open(string filename)" src="php_zip.c" />
      <scope doc="Close a Zip archive" ilk="function" name="zip_close" returns="void" signature="zip_close(resource zip)" src="php_zip.c" />
      <scope doc="Returns the next file in the archive" ilk="function" name="zip_read" returns="resource" signature="zip_read(resource zip)" src="php_zip.c" />
      <scope doc="Open a Zip File pointed by the resource entry" ilk="function" name="zip_entry_open" returns="bool" signature="zip_entry_open(resource zip_dp, resource zip_entry [, string mode])" src="php_zip.c" />
      <scope doc="Close a zip entry" ilk="function" name="zip_entry_close" returns="void" signature="zip_entry_close(resource zip_ent)" src="php_zip.c" />
      <scope doc="Read from an open directory entry" ilk="function" name="zip_entry_read" returns="mixed" signature="zip_entry_read(resource zip_entry [, int len])" src="php_zip.c" />
      <scope doc="Return the name given a ZZip entry" ilk="function" name="zip_entry_name" returns="string" signature="zip_entry_name(resource zip_entry)" src="php_zip.c" />
      <scope doc="Return the compressed size of a ZZip entry" ilk="function" name="zip_entry_compressedsize" returns="int" signature="zip_entry_compressedsize(resource zip_entry)" src="php_zip.c" />
      <scope doc="Return the actual filesize of a ZZip entry" ilk="function" name="zip_entry_filesize" returns="int" signature="zip_entry_filesize(resource zip_entry)" src="php_zip.c" />
      <scope doc="Return a string containing the compression method used&#xA;on a particular entry" ilk="function" name="zip_entry_compressionmethod" returns="string" signature="zip_entry_compressionmethod(resource zip_entry)" src="php_zip.c" />
      <scope doc="Create new zip using source uri for output return TRUE&#xA;on success or the error code" ilk="function" name="open" returns="mixed" signature="open(string source [, int flags])" src="php_zip.c" />
      <scope doc="close the zip archive" ilk="function" name="close" returns="bool" signature="close()" src="php_zip.c" />
      <scope doc="U Returns the index of the entry named filename in the&#xA;archive" ilk="function" name="createEmptyDir" returns="bool" signature="createEmptyDir(string dirname)" src="php_zip.c" />
      <scope doc="Add a file in a Zip archive using its path and the name&#xA;to use" ilk="function" name="addFile" returns="bool" signature="addFile(string filepath[, string entryname[, int start [, int length]]])" src="php_zip.c" />
      <scope doc="Add a file using content and the entry name" ilk="function" name="addFromString" returns="bool" signature="addFromString(string name, string content)" src="php_zip.c" />
      <scope doc="Returns the information about a the zip entry filename" ilk="function" name="statName" returns="array" signature="statName(string filename[, int flags])" src="php_zip.c" />
      <scope doc="Returns the zip entry informations using its index" ilk="function" name="statIndex" returns="resource" signature="statIndex(int index[, int flags])" src="php_zip.c" />
      <scope doc="Returns the index of the entry named filename in the&#xA;archive" ilk="function" name="locateName" returns="int" signature="locateName(string filename[, int flags])" src="php_zip.c" />
      <scope doc="Returns the name of the file at position index" ilk="function" name="getNameIndex" returns="string" signature="getNameIndex(int index [, int flags])" src="php_zip.c" />
      <scope doc="Set or remove NULL &apos;&apos; the comment of the archive" ilk="function" name="setArchiveComment" returns="bool" signature="setArchiveComment(string name, string comment)" src="php_zip.c" />
      <scope doc="Returns the comment of an entry using its index" ilk="function" name="getArchiveComment" returns="string" signature="getArchiveComment()" src="php_zip.c" />
      <scope doc="Set or remove NULL &apos;&apos; the comment of an entry using its&#xA;Name" ilk="function" name="setCommentName" returns="bool" signature="setCommentName(string name, string comment)" src="php_zip.c" />
      <scope doc="Set or remove NULL &apos;&apos; the comment of an entry using its&#xA;index" ilk="function" name="setCommentIndex" returns="bool" signature="setCommentIndex(int index, string comment)" src="php_zip.c" />
      <scope doc="Returns the comment of an entry using its name" ilk="function" name="getCommentName" returns="string" signature="getCommentName(string name)" src="php_zip.c" />
      <scope doc="Returns the comment of an entry using its index" ilk="function" name="getCommentIndex" returns="string" signature="getCommentIndex(int index)" src="php_zip.c" />
      <scope doc="Delete a file using its index" ilk="function" name="deleteIndex" returns="bool" signature="deleteIndex(int index)" src="php_zip.c" />
      <scope doc="Delete a file using its index" ilk="function" name="deleteName" returns="bool" signature="deleteName(string name)" src="php_zip.c" />
      <scope doc="Rename an entry selected by its index to new name" ilk="function" name="renameIndex" returns="bool" signature="renameIndex(int index, string new_name)" src="php_zip.c" />
      <scope doc="Rename an entry selected by its name to new name" ilk="function" name="renameName" returns="bool" signature="renameName(string name, string new_name)" src="php_zip.c" />
      <scope doc="Changes to the file at position index are reverted" ilk="function" name="unchangeIndex" returns="bool" signature="unchangeIndex(int index)" src="php_zip.c" />
      <scope doc="Changes to the file named &apos;name&apos; are reverted" ilk="function" name="unchangeName" returns="bool" signature="unchangeName(string name)" src="php_zip.c" />
      <scope doc="Revert all global changes to the archive archive For&#xA;now this only reverts archive comment changes" ilk="function" name="unchangeAll" returns="bool" signature="unchangeAll()" src="php_zip.c" />
      <scope doc="get the contents of an entry using its name" ilk="function" name="getFromName" returns="string" signature="getFromName(string entryname[, int len [, int flags]])" src="php_zip.c" />
      <scope doc="get the contents of an entry using its index" ilk="function" name="getFromIndex" returns="string" signature="getFromIndex(string entryname[, int len [, int flags]])" src="php_zip.c" />
      <scope doc="get a stream for an entry using its name" ilk="function" name="getStream" returns="resource" signature="getStream(string entryname)" src="php_zip.c" />
      <scope doc="Read und uncompress entire gz-file into an array" ilk="function" name="gzfile" returns="array" signature="gzfile(string filename [, int use_include_path])" src="zlib.c" />
      <scope doc="Open a gz-file and return a gz-file pointer" ilk="function" name="gzopen" returns="resource" signature="gzopen(string filename, string mode [, int use_include_path])" src="zlib.c" />
      <scope doc="Output a gz-file" ilk="function" name="readgzfile" returns="int" signature="readgzfile(string filename [, int use_include_path])" src="zlib.c" />
      <scope doc="Gzip-compress a string" ilk="function" name="gzcompress" returns="string" signature="gzcompress(string data [, int level])" src="zlib.c" />
      <scope doc="Unzip a gzip-compressed string" ilk="function" name="gzuncompress" returns="string" signature="gzuncompress(string data [, int length])" src="zlib.c" />
      <scope doc="Gzip-compress a string" ilk="function" name="gzdeflate" returns="string" signature="gzdeflate(string data [, int level])" src="zlib.c" />
      <scope doc="Unzip a gzip-compressed string" ilk="function" name="gzinflate" returns="string" signature="gzinflate(string data [, int length])" src="zlib.c" />
      <scope doc="Returns the coding type used for output compression" ilk="function" name="zlib_get_coding_type" returns="string" signature="zlib_get_coding_type(void)" src="zlib.c" />
      <scope doc="GZ encode a string" ilk="function" name="gzencode" returns="string" signature="gzencode(string data [, int level [, int encoding_mode]])" src="zlib.c" />
      <scope doc="Encode str based on accept-encoding setting - designed&#xA;to be called from ob start" ilk="function" name="ob_gzhandler" returns="string" signature="ob_gzhandler(string str, int mode)" src="zlib.c" />
      <scope doc="Sets the maximum time a script can run" ilk="function" name="set_time_limit" returns="bool" signature="set_time_limit(int seconds)" src="main.c" />
      <scope doc="Turn on Output Buffering specifying an optional output&#xA;handler" ilk="function" name="ob_start" returns="bool" signature="ob_start([ string" src="output.c" />
      <scope doc="Flush send contents of the output buffer The last&#xA;buffer content is sent to next buffer" ilk="function" name="ob_flush" returns="bool" signature="ob_flush(void)" src="output.c" />
      <scope doc="Clean delete the current output buffer" ilk="function" name="ob_clean" returns="bool" signature="ob_clean(void)" src="output.c" />
      <scope doc="Flush send the output buffer and delete current output&#xA;buffer" ilk="function" name="ob_end_flush" returns="bool" signature="ob_end_flush(void)" src="output.c" />
      <scope doc="Clean the output buffer and delete current output&#xA;buffer" ilk="function" name="ob_end_clean" returns="bool" signature="ob_end_clean(void)" src="output.c" />
      <scope doc="Get current buffer contents flush send the output&#xA;buffer and delete current output buffer" ilk="function" name="ob_get_flush" returns="bool" signature="ob_get_flush(void)" src="output.c" />
      <scope doc="Get current buffer contents and delete current output&#xA;buffer" ilk="function" name="ob_get_clean" returns="bool" signature="ob_get_clean(void)" src="output.c" />
      <scope doc="Return the contents of the output buffer" ilk="function" name="ob_get_contents" returns="string" signature="ob_get_contents(void)" src="output.c" />
      <scope doc="Return the nesting level of the output buffer" ilk="function" name="ob_get_level" returns="int" signature="ob_get_level(void)" src="output.c" />
      <scope doc="Return the length of the output buffer" ilk="function" name="ob_get_length" returns="int" signature="ob_get_length(void)" src="output.c" />
      <scope doc="Return the status of the active or all output buffers" ilk="function" name="ob_get_status" returns="array" signature="ob_get_status([bool full_status])" src="output.c" />
      <scope doc="Turn implicit flush on off and is equivalent to calling&#xA;flush after every output call" ilk="function" name="ob_implicit_flush" returns="void" signature="ob_implicit_flush([int flag])" src="output.c" />
      <scope doc="Reset clear URL rewriter values" ilk="function" name="output_reset_rewrite_vars" returns="bool" signature="output_reset_rewrite_vars(void)" src="output.c" />
      <scope doc="Add URL rewriter values" ilk="function" name="output_add_rewrite_var" returns="bool" signature="output_add_rewrite_var(string name, string value)" src="output.c" />
      <scope doc="Registers a custom URL protocol handler class" ilk="function" name="stream_wrapper_register" returns="bool" signature="stream_wrapper_register(string protocol, string classname[, integer flags])" src="userspace.c" />
      <scope doc="Unregister a wrapper for the life of the current&#xA;request" ilk="function" name="stream_wrapper_unregister" returns="bool" signature="stream_wrapper_unregister(string protocol)" src="userspace.c" />
      <scope doc="Restore the original protocol handler overriding if&#xA;necessary" ilk="function" name="stream_wrapper_restore" returns="bool" signature="stream_wrapper_restore(string protocol)" src="userspace.c" />
      <scope doc="Terminate apache process after this request" ilk="function" name="apache_child_terminate" returns="bool" signature="apache_child_terminate(void)" src="php_apache.c" />
      <scope doc="Get and set Apache request notes" ilk="function" name="apache_note" returns="string" signature="apache_note(string note_name [, string note_value])" src="php_apache.c" />
      <scope doc="Perform an Apache sub-request" ilk="function" name="virtual" returns="bool" signature="virtual(string filename)" src="php_apache.c" />
      <scope doc="" ilk="function" name="getallheaders" returns="array" signature="getallheaders(void)" src="php_apache.c" />
      <scope doc="Fetch all HTTP request headers" ilk="function" name="apache_request_headers" returns="array" signature="apache_request_headers(void)" src="php_apache.c" />
      <scope doc="Fetch all HTTP response headers" ilk="function" name="apache_response_headers" returns="array" signature="apache_response_headers(void)" src="php_apache.c" />
      <scope doc="Set an Apache subprocess env variable" ilk="function" name="apache_setenv" returns="bool" signature="apache_setenv(string variable, string value [, bool walk_to_top])" src="php_apache.c" />
      <scope doc="Perform a partial request of the given URI to obtain&#xA;information about it" ilk="function" name="apache_lookup_uri" returns="object" signature="apache_lookup_uri(string URI)" src="php_apache.c" />
      <scope doc="Fetch Apache version" ilk="function" name="apache_get_version" returns="string" signature="apache_get_version(void)" src="php_apache.c" />
      <scope doc="Get a list of loaded Apache modules" ilk="function" name="apache_get_modules" returns="array" signature="apache_get_modules(void)" src="php_apache.c" />
      <scope doc="Reset the Apache write timer" ilk="function" name="apache_reset_timeout" returns="bool" signature="apache_reset_timeout(void)" src="php_apache.c" />
      <scope doc="Get an Apache subprocess env variable" ilk="function" name="apache_getenv" returns="bool" signature="apache_getenv(string variable [, bool walk_to_top])" src="php_functions.c" />
      <scope doc="fetch all incoming request headers" ilk="function" name="apache_request_headers_in" returns="array" signature="apache_request_headers_in()" src="php_apache.c" />
      <scope doc="fetch all outgoing request headers" ilk="function" name="apache_request_headers_out" returns="array" signature="apache_request_headers_out([{string name" src="php_apache.c" />
      <scope doc="fetch all headers that go out in case of an error or a&#xA;subrequest" ilk="function" name="apache_request_err_headers_out" returns="array" signature="apache_request_err_headers_out([{string name" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_server_port" returns="int" signature="apache_request_server_port()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_remote_host" returns="int" signature="apache_request_remote_host([int type])" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_update_mtime" returns="long" signature="apache_request_update_mtime([int dependency_mtime])" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_set_etag" returns="void" signature="apache_request_set_etag()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_set_last_modified" returns="void" signature="apache_request_set_last_modified()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_meets_conditions" returns="long" signature="apache_request_meets_conditions()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_discard_request_body" returns="long" signature="apache_request_discard_request_body()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_satisfies" returns="long" signature="apache_request_satisfies()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_is_initial_req" returns="bool" signature="apache_request_is_initial_req()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_some_auth_required" returns="bool" signature="apache_request_some_auth_required()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_auth_type" returns="string" signature="apache_request_auth_type()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_auth_name" returns="string" signature="apache_request_auth_name()" src="php_apache.c" />
      <scope doc="" ilk="function" name="apache_request_log_error" returns="boolean" signature="apache_request_log_error(string message, [long facility])" src="php_apache.c" />
      <scope doc="Returns sub-request for the specified uri You would&#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_lookup_uri" returns="object" signature="apache_request_sub_req_lookup_uri(string uri)" src="php_apache.c" />
      <scope doc="Returns sub-request for the specified file You would&#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_lookup_file" returns="object" signature="apache_request_sub_req_lookup_file(string file)" src="php_apache.c" />
      <scope doc="Returns sub-request for the specified file You would&#xA;need to run it yourself with run" ilk="function" name="apache_request_sub_req_method_uri" returns="object" signature="apache_request_sub_req_method_uri(string method, string uri)" src="php_apache.c" />
      <scope doc="This is a wrapper for ap sub run req and ap destory sub&#xA;req It takes sub request runs it" ilk="function" name="apache_request_run" returns="long" signature="apache_request_run()" src="php_apache.c" />
      <scope doc="Sets the flags describing the actions the filter may&#xA;take" ilk="function" name="smfi_setflags" returns="void" signature="smfi_setflags(long flags)" src="php_milter.c" />
      <scope doc="Sets the number of seconds libmilter will wait for an&#xA;MTA connection before timing out a socket" ilk="function" name="smfi_settimeout" returns="void" signature="smfi_settimeout(long timeout)" src="php_milter.c" />
      <scope doc="Returns the value of the given macro or NULL if the&#xA;macro is not defined" ilk="function" name="smfi_getsymval" returns="string" signature="smfi_getsymval(string macro)" src="php_milter.c" />
      <scope doc="Directly set the SMTP error reply code for this&#xA;connection This code will be used on subsequent error&#xA;replies resulting" ilk="function" name="smfi_setreply" returns="bool" signature="smfi_setreply(string rcode, string xcode, string message)" src="php_milter.c" />
      <scope doc="Adds a header to the current message" ilk="function" name="smfi_addheader" returns="bool" signature="smfi_addheader(string headerf, string headerv)" src="php_milter.c" />
      <scope doc="Changes a header&apos;s value for the current message" ilk="function" name="smfi_chgheader" returns="bool" signature="smfi_chgheader(string headerf, string headerv)" src="php_milter.c" />
      <scope doc="Add a recipient to the message envelope" ilk="function" name="smfi_addrcpt" returns="bool" signature="smfi_addrcpt(string rcpt)" src="php_milter.c" />
      <scope doc="Removes the named recipient from the current message&apos;s&#xA;envelope" ilk="function" name="smfi_delrcpt" returns="bool" signature="smfi_delrcpt(string rcpt)" src="php_milter.c" />
      <scope doc="Replaces the body of the current message If called more&#xA;than once subsequent calls result in data being&#xA;appended to" ilk="function" name="smfi_replacebody" returns="bool" signature="smfi_replacebody(string body)" src="php_milter.c" />
      <scope doc="Perform an NSAPI sub-request" ilk="function" name="nsapi_virtual" returns="bool" signature="nsapi_virtual(string uri)" src="nsapi.c" />
      <scope doc="Get all headers from the request" ilk="function" name="nsapi_request_headers" returns="array" signature="nsapi_request_headers(void)" src="nsapi.c" />
      <scope doc="Get all headers from the response" ilk="function" name="nsapi_response_headers" returns="array" signature="nsapi_response_headers(void)" src="nsapi.c" />
      <scope doc="Get the version of the Zend Engine" ilk="function" name="zend_version" returns="string" signature="zend_version(void)" src="zend_builtin_functions.c" />
      <scope doc="Get the number of arguments that were passed to the&#xA;function" ilk="function" name="func_num_args" returns="int" signature="func_num_args(void)" src="zend_builtin_functions.c" />
      <scope doc="Get the arg num&apos;th argument that was passed to the&#xA;function" ilk="function" name="func_get_arg" returns="mixed" signature="func_get_arg(int arg_num)" src="zend_builtin_functions.c" />
      <scope doc="Get an array of the arguments that were passed to the&#xA;function" ilk="function" name="func_get_args" returns="array" signature="func_get_args()" src="zend_builtin_functions.c" />
      <scope doc="Get string length" ilk="function" name="strlen" returns="int" signature="strlen(string str)" src="zend_builtin_functions.c" />
      <scope doc="Binary safe string comparison" ilk="function" name="strcmp" returns="int" signature="strcmp(string str1, string str2)" src="zend_builtin_functions.c" />
      <scope doc="Binary safe string comparison" ilk="function" name="strncmp" returns="int" signature="strncmp(string str1, string str2, int len)" src="zend_builtin_functions.c" />
      <scope doc="Binary safe case-insensitive string comparison" ilk="function" name="strcasecmp" returns="int" signature="strcasecmp(string str1, string str2)" src="zend_builtin_functions.c" />
      <scope doc="Binary safe string comparison" ilk="function" name="strncasecmp" returns="int" signature="strncasecmp(string str1, string str2, int len)" src="zend_builtin_functions.c" />
      <scope doc="Return the currently pointed key value pair in the&#xA;passed array and advance the pointer to the next&#xA;element" ilk="function" name="each" returns="array" signature="each(array arr)" src="zend_builtin_functions.c" />
      <scope doc="Return the current error reporting level and if an&#xA;argument was passed - change to the new level" ilk="function" name="error_reporting" returns="int" signature="error_reporting(int new_error_level=null)" src="zend_builtin_functions.c" />
      <scope doc="Define a new constant" ilk="function" name="define" returns="bool" signature="define(string constant_name, mixed value, boolean case_sensitive=true)" src="zend_builtin_functions.c" />
      <scope doc="Check whether a constant exists" ilk="function" name="defined" returns="bool" signature="defined(string constant_name)" src="zend_builtin_functions.c" />
      <scope doc="Retrieves the class name" ilk="function" name="get_class" returns="string" signature="get_class([object object])" src="zend_builtin_functions.c" />
      <scope doc="Retrieves the parent class name for object or class or&#xA;current scope" ilk="function" name="get_parent_class" returns="string" signature="get_parent_class([mixed object])" src="zend_builtin_functions.c" />
      <scope doc="Returns true if the object has this class as one of its&#xA;parents" ilk="function" name="is_subclass_of" returns="bool" signature="is_subclass_of(object object, string class_name)" src="zend_builtin_functions.c" />
      <scope doc="Returns true if the object is of this class or has this&#xA;class as one of its parents" ilk="function" name="is_a" returns="bool" signature="is_a(object object, string class_name)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of default properties of the class" ilk="function" name="get_class_vars" returns="array" signature="get_class_vars(string class_name)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of object properties" ilk="function" name="get_object_vars" returns="array" signature="get_object_vars(object obj)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of method names for class or class&#xA;instance" ilk="function" name="get_class_methods" returns="array" signature="get_class_methods(mixed class)" src="zend_builtin_functions.c" />
      <scope doc="Checks if the class method exists" ilk="function" name="method_exists" returns="bool" signature="method_exists(object object, string method)" src="zend_builtin_functions.c" />
      <scope doc="Checks if the object or class has a property" ilk="function" name="property_exists" returns="bool" signature="property_exists(mixed object_or_class, string property_name)" src="zend_builtin_functions.c" />
      <scope doc="Checks if the class exists" ilk="function" name="class_exists" returns="bool" signature="class_exists(string classname [, bool autoload])" src="zend_builtin_functions.c" />
      <scope doc="Checks if the class exists" ilk="function" name="interface_exists" returns="bool" signature="interface_exists(string classname [, bool autoload])" src="zend_builtin_functions.c" />
      <scope doc="Checks if the function exists" ilk="function" name="function_exists" returns="bool" signature="function_exists(string function_name)" src="zend_builtin_functions.c" />
      <scope doc="Cause an intentional memory leak for testing debugging&#xA;purposes" ilk="function" name="leak" returns="void" signature="leak(int num_bytes=3)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array with the file names that were include&#xA;once &apos;d" ilk="function" name="get_included_files" returns="array" signature="get_included_files(void)" src="zend_builtin_functions.c" />
      <scope doc="Generates a user-level error warning notice message" ilk="function" name="trigger_error" returns="void" signature="trigger_error(string messsage [, int error_type])" src="zend_builtin_functions.c" />
      <scope doc="Sets a user-defined error handler function Returns the&#xA;previously defined error handler or false on error" ilk="function" name="set_error_handler" returns="string" signature="set_error_handler(string error_handler [, int error_types])" src="zend_builtin_functions.c" />
      <scope doc="Restores the previously defined error handler function" ilk="function" name="restore_error_handler" returns="void" signature="restore_error_handler(void)" src="zend_builtin_functions.c" />
      <scope doc="Sets a user-defined exception handler function Returns&#xA;the previously defined exception handler or false on&#xA;error" ilk="function" name="set_exception_handler" returns="string" signature="set_exception_handler(callable exception_handler)" src="zend_builtin_functions.c" />
      <scope doc="Restores the previously defined exception handler&#xA;function" ilk="function" name="restore_exception_handler" returns="void" signature="restore_exception_handler(void)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of all declared classes" ilk="function" name="get_declared_classes" returns="array" signature="get_declared_classes()" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of all declared interfaces" ilk="function" name="get_declared_interfaces" returns="array" signature="get_declared_interfaces()" src="zend_builtin_functions.c" />
      <scope doc="Returns an array of all defined functions" ilk="function" name="get_defined_functions" returns="array" signature="get_defined_functions(void)" src="zend_builtin_functions.c" />
      <scope doc="Returns an associative array of names and values of all&#xA;currently defined variable names variables in the&#xA;current scope" ilk="function" name="get_defined_vars" returns="array" signature="get_defined_vars(void)" src="zend_builtin_functions.c" />
      <scope doc="Creates an anonymous function and returns its name&#xA;funny eh" ilk="function" name="create_function" returns="string" signature="create_function(string args, string code)" src="zend_builtin_functions.c" />
      <scope doc="Get the resource type name for a given resource" ilk="function" name="get_resource_type" returns="string" signature="get_resource_type(resource res)" src="zend_builtin_functions.c" />
      <scope doc="U Return an array containing names of loaded extensions" ilk="function" name="get_loaded_extensions" returns="array" signature="get_loaded_extensions([bool zend_extensions])" src="zend_builtin_functions.c" />
      <scope doc="Return an array containing the names and values of all&#xA;defined constants" ilk="function" name="get_defined_constants" returns="array" signature="get_defined_constants([mixed categorize])" src="zend_builtin_functions.c" />
      <scope doc="" ilk="function" name="debug_print_backtrace" returns="void" signature="debug_print_backtrace(void)" src="zend_builtin_functions.c" />
      <scope doc="Return backtrace as array" ilk="function" name="debug_backtrace" returns="array" signature="debug_backtrace(void)" src="zend_builtin_functions.c" />
      <scope doc="Returns true if the named extension is loaded" ilk="function" name="extension_loaded" returns="bool" signature="extension_loaded(string extension_name)" src="zend_builtin_functions.c" />
      <scope doc="Returns an array with the names of functions belonging&#xA;to the named extension" ilk="function" name="get_extension_funcs" returns="array" signature="get_extension_funcs(string extension_name)" src="zend_builtin_functions.c" />
      <scope doc="Sends an SQL query to MySQL&amp;#xa;mysql is an alias to mysql_db_query" ilk="function" name="mysql" returns="resource" signature="mysql(string database_name, string query [, int link_identifier])" />
      <scope doc="Gets the name of the specified field in a result&amp;#xa;mysql_fieldname is an alias to mysql_field_name" ilk="function" name="mysql_fieldname" returns="string" signature="mysql_fieldname(resource result, int field_index)" />
      <scope doc="Gets name of the table the specified field is in&amp;#xa;mysql_fieldtable is an alias to mysql_field_table" ilk="function" name="mysql_fieldtable" returns="string" signature="mysql_fieldtable(resource result, int field_offset)" />
      <scope doc="Returns the length of the specified field&amp;#xa;mysql_fieldlen is an alias to mysql_field_len" ilk="function" name="mysql_fieldlen" returns="int" signature="mysql_fieldlen(resource result, int field_offset)" />
      <scope doc="Gets the type of the specified field in a result&amp;#xa;mysql_fieldtype is an alias to mysql_field_type" ilk="function" name="mysql_fieldtype" returns="string" signature="mysql_fieldtype(resource result, int field_offset)" />
      <scope doc="Gets the flags associated with the specified field in a&#xA;result&amp;#xa;mysql_fieldflags is an alias to mysql_field_flags" ilk="function" name="mysql_fieldflags" returns="string" signature="mysql_fieldflags(resource result, int field_offset)" />
      <scope doc="Selects a MySQL database&amp;#xa;mysql_selectdb is an alias to mysql_select_db" ilk="function" name="mysql_selectdb" returns="bool" signature="mysql_selectdb(string database_name [, int link_identifier])" />
      <scope doc="Create a MySQL database&amp;#xa;mysql_createdb is an alias to mysql_create_db" ilk="function" name="mysql_createdb" returns="bool" signature="mysql_createdb(string database_name [, int link_identifier])" />
      <scope doc="Drops delete a MySQL database&amp;#xa;mysql_dropdb is an alias to mysql_drop_db" ilk="function" name="mysql_dropdb" returns="bool" signature="mysql_dropdb(string database_name [, int link_identifier])" />
      <scope doc="Free result memory&amp;#xa;mysql_freeresult is an alias to mysql_free_result" ilk="function" name="mysql_freeresult" returns="bool" signature="mysql_freeresult(resource result)" />
      <scope doc="Gets number of fields in a result&amp;#xa;mysql_numfields is an alias to mysql_num_fields" ilk="function" name="mysql_numfields" returns="int" signature="mysql_numfields(resource result)" />
      <scope doc="Gets number of rows in a result&amp;#xa;mysql_numrows is an alias to mysql_num_rows" ilk="function" name="mysql_numrows" returns="int" signature="mysql_numrows(resource result)" />
      <scope doc="List databases available on a MySQL server&amp;#xa;mysql_listdbs is an alias to mysql_list_dbs" ilk="function" name="mysql_listdbs" returns="resource" signature="mysql_listdbs([int link_identifier])" />
      <scope doc="List tables in a MySQL database&amp;#xa;mysql_listtables is an alias to mysql_list_tables" ilk="function" name="mysql_listtables" returns="resource" signature="mysql_listtables(string database_name [, int link_identifier])" />
      <scope doc="List MySQL result fields&amp;#xa;mysql_listfields is an alias to mysql_list_fields" ilk="function" name="mysql_listfields" returns="resource" signature="mysql_listfields(string database_name, string table_name [, int link_identifier])" />
      <scope doc="Gets result data&amp;#xa;mysql_db_name is an alias to mysql_result" ilk="function" name="mysql_db_name" returns="mixed" signature="mysql_db_name(resource result, int row [, mixed field])" />
      <scope doc="Gets result data&amp;#xa;mysql_dbname is an alias to mysql_result" ilk="function" name="mysql_dbname" returns="mixed" signature="mysql_dbname(resource result, int row [, mixed field])" />
      <scope doc="Gets result data&amp;#xa;mysql_tablename is an alias to mysql_result" ilk="function" name="mysql_tablename" returns="mixed" signature="mysql_tablename(resource result, int row [, mixed field])" />
      <scope doc="Gets result data&amp;#xa;mysql_table_name is an alias to mysql_result" ilk="function" name="mysql_table_name" returns="mixed" signature="mysql_table_name(resource result, int row [, mixed field])" />
      <scope doc="Retrieve the error number set by the last posix&#xA;function which failed&amp;#xa;posix_errno is an alias to posix_get_last_error" ilk="function" name="posix_errno" returns="int" signature="posix_errno(void)" />
      <scope doc="Write session data and end session&amp;#xa;session_commit is an alias to session_write_close" ilk="function" name="session_commit" returns="void" signature="session_commit(void)" />
      <scope doc="Fetches the first column of a result set as a string&amp;#xa;sqlite_fetch_string is an alias to sqlite_fetch_single" ilk="function" name="sqlite_fetch_string" returns="string" signature="sqlite_fetch_string(resource result [, bool decode_binary])" />
      <scope doc="Returns whether more rows are available&amp;#xa;sqlite_has_more is an alias to sqlite_valid" ilk="function" name="sqlite_has_more" returns="bool" signature="sqlite_has_more(resource result)" />
      <scope doc="Removes trailing whitespace&amp;#xa;chop is an alias to rtrim" ilk="function" name="chop" returns="string" signature="chop(string str [, string character_mask])" />
      <scope doc="Set the current active configuration setting of magic&#xA;quotes runtime and return previous&amp;#xa;magic_quotes_runtime is an alias to set_magic_quotes_runtime" ilk="function" name="magic_quotes_runtime" returns="bool" signature="magic_quotes_runtime(int new_setting)" />
      <scope doc="Syntax highlight a source file&amp;#xa;show_source is an alias to highlight_file" ilk="function" name="show_source" returns="bool" signature="show_source(string file_name [, bool return] )" />
      <scope doc="Set a configuration option returns false on error and&#xA;the old value of the configuration option on success&amp;#xa;ini_alter is an alias to ini_set" ilk="function" name="ini_alter" returns="string" signature="ini_alter(string varname, string newvalue)" />
      <scope doc="Check DNS records corresponding to a given Internet&#xA;host name or IP address&amp;#xa;checkdnsrr is an alias to dns_check_record" ilk="function" name="checkdnsrr" returns="int" signature="checkdnsrr(string host [, string type])" />
      <scope doc="Get MX records corresponding to a given Internet host&#xA;name&amp;#xa;getmxrr is an alias to dns_get_mx" ilk="function" name="getmxrr" returns="bool" signature="getmxrr(string hostname, array mxhosts [, array weight])" />
      <scope doc="Get the float value of a variable&amp;#xa;doubleval is an alias to floatval" ilk="function" name="doubleval" returns="float" signature="doubleval(mixed var)" />
      <scope doc="Returns true if variable is a long integer&amp;#xa;is_int is an alias to is_long" ilk="function" name="is_int" returns="bool" signature="is_int(mixed var)" />
      <scope doc="Returns true if variable is a long integer&amp;#xa;is_integer is an alias to is_long" ilk="function" name="is_integer" returns="bool" signature="is_integer(mixed var)" />
      <scope doc="Returns true if variable is float point&amp;#xa;is_double is an alias to is_float" ilk="function" name="is_double" returns="bool" signature="is_double(mixed var)" />
      <scope doc="Returns true if variable is float point&amp;#xa;is_real is an alias to is_float" ilk="function" name="is_real" returns="bool" signature="is_real(mixed var)" />
      <scope doc="Binary-safe file write&amp;#xa;fputs is an alias to fwrite" ilk="function" name="fputs" returns="int" signature="fputs(resource fp, string str [, int length])" />
      <scope doc="Set file write buffer&amp;#xa;set_file_buffer is an alias to stream_set_write_buffer" ilk="function" name="set_file_buffer" returns="int" signature="set_file_buffer(resource fp, int buffer)" />
      <scope doc="Set blocking non-blocking mode on a socket or stream&amp;#xa;set_socket_blocking is an alias to stream_set_blocking" ilk="function" name="set_socket_blocking" returns="bool" signature="set_socket_blocking(resource socket, int mode)" />
      <scope doc="Set blocking non-blocking mode on a socket or stream&amp;#xa;socket_set_blocking is an alias to stream_set_blocking" ilk="function" name="socket_set_blocking" returns="bool" signature="socket_set_blocking(resource socket, int mode)" />
      <scope doc="Registers a custom URL protocol handler class&amp;#xa;stream_register_wrapper is an alias to stream_wrapper_register" ilk="function" name="stream_register_wrapper" returns="bool" signature="stream_register_wrapper(string protocol, string classname[, integer flags])" />
      <scope doc="Set timeout on stream read to seconds microseonds&amp;#xa;socket_set_timeout is an alias to stream_set_timeout" ilk="function" name="socket_set_timeout" returns="bool" signature="socket_set_timeout(resource stream, int seconds, int microseconds)" />
      <scope doc="Retrieves header meta data from streams file pointers&amp;#xa;socket_get_status is an alias to stream_get_meta_data" ilk="function" name="socket_get_status" returns="array" signature="socket_get_status(resource fp)" />
      <scope doc="Returns true if file can be written&amp;#xa;is_writeable is an alias to is_writable" ilk="function" name="is_writeable" returns="bool" signature="is_writeable(string filename)" />
      <scope doc="Get free disk space for filesystem that path is on&amp;#xa;diskfreespace is an alias to disk_free_space" ilk="function" name="diskfreespace" returns="float" signature="diskfreespace(string path)" />
      <scope doc="Return the element currently pointed to by the internal&#xA;array pointer&amp;#xa;pos is an alias to current" ilk="function" name="pos" returns="mixed" signature="pos(array array_arg)" />
      <scope doc="Count the number of elements in a variable usually an&#xA;array&amp;#xa;sizeof is an alias to count" ilk="function" name="sizeof" returns="int" signature="sizeof(mixed var [, int mode])" />
      <scope doc="Checks if the given key or index exists in the array&amp;#xa;key_exists is an alias to array_key_exists" ilk="function" name="key_exists" returns="bool" signature="key_exists(mixed key, array search)" />
      <scope doc="Returns an array with the file names that were include&#xA;once &apos;d&amp;#xa;get_required_files is an alias to get_included_files" ilk="function" name="get_required_files" returns="array" signature="get_required_files(void)" />
      <scope doc="Generates a user-level error warning notice message&amp;#xa;user_error is an alias to trigger_error" ilk="function" name="user_error" returns="void" signature="user_error(string messsage [, int error_type])" />
      <scope ilk="function" name="ob_list_handlers" signature="ob_list_handlers()" />
      <scope ilk="function" name="spl_autoload_functions" signature="spl_autoload_functions()" />
      <scope ilk="function" name="filter_list" signature="filter_list()" />
      <scope ilk="function" name="filter_id" signature="filter_id()" />
      <variable citdl="array" name="_COOKIE" />
      <variable citdl="array" name="_ENV" />
      <variable citdl="array" name="_FILES" />
      <variable citdl="array" name="_GET" />
      <variable citdl="array" name="_POST" />
      <variable citdl="array" name="_REQUEST" />
      <variable citdl="array" name="_SESSION" />
      <variable citdl="array" name="HTTP_COOKIE_VARS" />
      <variable citdl="array" name="HTTP_ENV_VARS" />
      <variable citdl="array" name="HTTP_GET_VARS" />
      <variable citdl="array" name="HTTP_POST_FILES" />
      <variable citdl="array" name="HTTP_POST_VARS" />
      <variable citdl="array" name="HTTP_SERVER_VARS" />
      <variable citdl="array" name="HTTP_SESSION_VARS" />
      <variable citdl="array" name="GLOBALS" />
      <variable citdl="string" ilk="constant" name="__LINE__" />
      <variable citdl="string" ilk="constant" name="__FILE__" />
      <variable citdl="string" ilk="constant" name="__FUNCTION__" />
      <variable citdl="string" ilk="constant" name="__CLASS__" />
      <variable citdl="string" ilk="constant" name="__METHOD__" />
      <variable citdl="array" name="_SERVER">
        <variable citdl="string" name="HTTP_HOST" />
        <variable citdl="string" name="HTTP_USER_AGENT" />
        <variable citdl="string" name="HTTP_ACCEPT" />
        <variable citdl="string" name="HTTP_ACCEPT_LANGUAGE" />
        <variable citdl="string" name="HTTP_ACCEPT_ENCODING" />
        <variable citdl="string" name="HTTP_ACCEPT_CHARSET" />
        <variable citdl="string" name="HTTP_KEEP_ALIVE" />
        <variable citdl="string" name="HTTP_CONNECTION" />
        <variable citdl="string" name="HTTP_COOKIE" />
        <variable citdl="string" name="HTTP_CACHE_CONTROL" />
        <variable citdl="string" name="PATH" />
        <variable citdl="string" name="SERVER_SIGNATURE" />
        <variable citdl="string" name="SERVER_SOFTWARE" />
        <variable citdl="string" name="SERVER_NAME" />
        <variable citdl="string" name="SERVER_ADDR" />
        <variable citdl="string" name="SERVER_PORT" />
        <variable citdl="string" name="REMOTE_ADDR" />
        <variable citdl="string" name="DOCUMENT_ROOT" />
        <variable citdl="string" name="SERVER_ADMIN" />
        <variable citdl="string" name="SCRIPT_FILENAME" />
        <variable citdl="string" name="REMOTE_PORT" />
        <variable citdl="string" name="GATEWAY_INTERFACE" />
        <variable citdl="string" name="SERVER_PROTOCOL" />
        <variable citdl="string" name="REQUEST_METHOD" />
        <variable citdl="string" name="QUERY_STRING" />
        <variable citdl="string" name="REQUEST_URI" />
        <variable citdl="string" name="SCRIPT_NAME" />
        <variable citdl="string" name="PHP_SELF" />
        <variable citdl="string" name="REQUEST_TIME" />
        <variable citdl="string" name="argv" />
        <variable citdl="string" name="argc" />
      </variable>
      <variable citdl="integer" ilk="constant" name="E_ERROR" />
      <variable citdl="integer" ilk="constant" name="E_RECOVERABLE_ERROR" />
      <variable citdl="integer" ilk="constant" name="E_WARNING" />
      <variable citdl="integer" ilk="constant" name="E_PARSE" />
      <variable citdl="integer" ilk="constant" name="E_NOTICE" />
      <variable citdl="integer" ilk="constant" name="E_STRICT" />
      <variable citdl="integer" ilk="constant" name="E_CORE_ERROR" />
      <variable citdl="integer" ilk="constant" name="E_CORE_WARNING" />
      <variable citdl="integer" ilk="constant" name="E_COMPILE_ERROR" />
      <variable citdl="integer" ilk="constant" name="E_COMPILE_WARNING" />
      <variable citdl="integer" ilk="constant" name="E_USER_ERROR" />
      <variable citdl="integer" ilk="constant" name="E_USER_WARNING" />
      <variable citdl="integer" ilk="constant" name="E_USER_NOTICE" />
      <variable citdl="integer" ilk="constant" name="E_ALL" />
      <variable citdl="boolean" ilk="constant" name="TRUE" />
      <variable citdl="boolean" ilk="constant" name="FALSE" />
      <variable citdl="NULL" ilk="constant" name="NULL" />
      <variable citdl="boolean" ilk="constant" name="ZEND_THREAD_SAFE" />
      <variable citdl="string" ilk="constant" name="PHP_VERSION" />
      <variable citdl="string" ilk="constant" name="PHP_OS" />
      <variable citdl="string" ilk="constant" name="PHP_SAPI" />
      <variable citdl="string" ilk="constant" name="DEFAULT_INCLUDE_PATH" />
      <variable citdl="string" ilk="constant" name="PEAR_INSTALL_DIR" />
      <variable citdl="string" ilk="constant" name="PEAR_EXTENSION_DIR" />
      <variable citdl="string" ilk="constant" name="PHP_EXTENSION_DIR" />
      <variable citdl="string" ilk="constant" name="PHP_PREFIX" />
      <variable citdl="string" ilk="constant" name="PHP_BINDIR" />
      <variable citdl="string" ilk="constant" name="PHP_LIBDIR" />
      <variable citdl="string" ilk="constant" name="PHP_DATADIR" />
      <variable citdl="string" ilk="constant" name="PHP_SYSCONFDIR" />
      <variable citdl="string" ilk="constant" name="PHP_LOCALSTATEDIR" />
      <variable citdl="string" ilk="constant" name="PHP_CONFIG_FILE_PATH" />
      <variable citdl="string" ilk="constant" name="PHP_CONFIG_FILE_SCAN_DIR" />
      <variable citdl="string" ilk="constant" name="PHP_SHLIB_SUFFIX" />
      <variable citdl="string" ilk="constant" name="PHP_EOL" />
      <variable citdl="integer" ilk="constant" name="PHP_INT_MAX" />
      <variable citdl="integer" ilk="constant" name="PHP_INT_SIZE" />
      <variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_START" />
      <variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_CONT" />
      <variable citdl="integer" ilk="constant" name="PHP_OUTPUT_HANDLER_END" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_OK" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_INI_SIZE" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_FORM_SIZE" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_PARTIAL" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_NO_FILE" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_NO_TMP_DIR" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_CANT_WRITE" />
      <variable citdl="integer" ilk="constant" name="UPLOAD_ERR_EXTENSION" />
      <variable citdl="integer" ilk="constant" name="LIBXML_VERSION" />
      <variable citdl="string" ilk="constant" name="LIBXML_DOTTED_VERSION" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOENT" />
      <variable citdl="integer" ilk="constant" name="LIBXML_DTDLOAD" />
      <variable citdl="integer" ilk="constant" name="LIBXML_DTDATTR" />
      <variable citdl="integer" ilk="constant" name="LIBXML_DTDVALID" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOERROR" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOWARNING" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOBLANKS" />
      <variable citdl="integer" ilk="constant" name="LIBXML_XINCLUDE" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NSCLEAN" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOCDATA" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NONET" />
      <variable citdl="integer" ilk="constant" name="LIBXML_NOEMPTYTAG" />
      <variable citdl="integer" ilk="constant" name="LIBXML_ERR_NONE" />
      <variable citdl="integer" ilk="constant" name="LIBXML_ERR_WARNING" />
      <variable citdl="integer" ilk="constant" name="LIBXML_ERR_ERROR" />
      <variable citdl="integer" ilk="constant" name="LIBXML_ERR_FATAL" />
      <variable citdl="integer" ilk="constant" name="XML_ELEMENT_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_TEXT_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_CDATA_SECTION_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ENTITY_REF_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ENTITY_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_PI_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_COMMENT_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_DOCUMENT_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_DOCUMENT_TYPE_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_DOCUMENT_FRAG_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_NOTATION_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_HTML_DOCUMENT_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_DTD_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ELEMENT_DECL_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_DECL_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_ENTITY_DECL_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_NAMESPACE_DECL_NODE" />
      <variable citdl="integer" ilk="constant" name="XML_LOCAL_NAMESPACE" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_CDATA" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ID" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_IDREF" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_IDREFS" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ENTITY" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NMTOKEN" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NMTOKENS" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_ENUMERATION" />
      <variable citdl="integer" ilk="constant" name="XML_ATTRIBUTE_NOTATION" />
      <variable citdl="integer" ilk="constant" name="DOM_PHP_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INDEX_SIZE_ERR" />
      <variable citdl="integer" ilk="constant" name="DOMSTRING_SIZE_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_HIERARCHY_REQUEST_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_WRONG_DOCUMENT_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INVALID_CHARACTER_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_NO_DATA_ALLOWED_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_NO_MODIFICATION_ALLOWED_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_NOT_FOUND_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_NOT_SUPPORTED_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INUSE_ATTRIBUTE_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INVALID_STATE_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_SYNTAX_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INVALID_MODIFICATION_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_NAMESPACE_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_INVALID_ACCESS_ERR" />
      <variable citdl="integer" ilk="constant" name="DOM_VALIDATION_ERR" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_NONE" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_NO_MEMORY" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_SYNTAX" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_NO_ELEMENTS" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_INVALID_TOKEN" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_UNCLOSED_TOKEN" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_PARTIAL_CHAR" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_TAG_MISMATCH" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_DUPLICATE_ATTRIBUTE" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_PARAM_ENTITY_REF" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_UNDEFINED_ENTITY" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_RECURSIVE_ENTITY_REF" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_ASYNC_ENTITY" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_BAD_CHAR_REF" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_BINARY_ENTITY_REF" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_MISPLACED_XML_PI" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_UNKNOWN_ENCODING" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_INCORRECT_ENCODING" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_UNCLOSED_CDATA_SECTION" />
      <variable citdl="integer" ilk="constant" name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" />
      <variable citdl="integer" ilk="constant" name="XML_OPTION_CASE_FOLDING" />
      <variable citdl="integer" ilk="constant" name="XML_OPTION_TARGET_ENCODING" />
      <variable citdl="integer" ilk="constant" name="XML_OPTION_SKIP_TAGSTART" />
      <variable citdl="integer" ilk="constant" name="XML_OPTION_SKIP_WHITE" />
      <variable citdl="string" ilk="constant" name="XML_SAX_IMPL" />
      <variable citdl="integer" ilk="constant" name="T_REQUIRE_ONCE" />
      <variable citdl="integer" ilk="constant" name="T_REQUIRE" />
      <variable citdl="integer" ilk="constant" name="T_EVAL" />
      <variable citdl="integer" ilk="constant" name="T_INCLUDE_ONCE" />
      <variable citdl="integer" ilk="constant" name="T_INCLUDE" />
      <variable citdl="integer" ilk="constant" name="T_LOGICAL_OR" />
      <variable citdl="integer" ilk="constant" name="T_LOGICAL_XOR" />
      <variable citdl="integer" ilk="constant" name="T_LOGICAL_AND" />
      <variable citdl="integer" ilk="constant" name="T_PRINT" />
      <variable citdl="integer" ilk="constant" name="T_SR_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_SL_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_XOR_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_OR_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_AND_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_MOD_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_CONCAT_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_DIV_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_MUL_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_MINUS_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_PLUS_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_BOOLEAN_OR" />
      <variable citdl="integer" ilk="constant" name="T_BOOLEAN_AND" />
      <variable citdl="integer" ilk="constant" name="T_IS_NOT_IDENTICAL" />
      <variable citdl="integer" ilk="constant" name="T_IS_IDENTICAL" />
      <variable citdl="integer" ilk="constant" name="T_IS_NOT_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_IS_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_IS_GREATER_OR_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_IS_SMALLER_OR_EQUAL" />
      <variable citdl="integer" ilk="constant" name="T_SR" />
      <variable citdl="integer" ilk="constant" name="T_SL" />
      <variable citdl="integer" ilk="constant" name="T_INSTANCEOF" />
      <variable citdl="integer" ilk="constant" name="T_UNSET_CAST" />
      <variable citdl="integer" ilk="constant" name="T_BOOL_CAST" />
      <variable citdl="integer" ilk="constant" name="T_OBJECT_CAST" />
      <variable citdl="integer" ilk="constant" name="T_ARRAY_CAST" />
      <variable citdl="integer" ilk="constant" name="T_STRING_CAST" />
      <variable citdl="integer" ilk="constant" name="T_DOUBLE_CAST" />
      <variable citdl="integer" ilk="constant" name="T_INT_CAST" />
      <variable citdl="integer" ilk="constant" name="T_DEC" />
      <variable citdl="integer" ilk="constant" name="T_INC" />
      <variable citdl="integer" ilk="constant" name="T_CLONE" />
      <variable citdl="integer" ilk="constant" name="T_NEW" />
      <variable citdl="integer" ilk="constant" name="T_EXIT" />
      <variable citdl="integer" ilk="constant" name="T_IF" />
      <variable citdl="integer" ilk="constant" name="T_ELSEIF" />
      <variable citdl="integer" ilk="constant" name="T_ELSE" />
      <variable citdl="integer" ilk="constant" name="T_ENDIF" />
      <variable citdl="integer" ilk="constant" name="T_LNUMBER" />
      <variable citdl="integer" ilk="constant" name="T_DNUMBER" />
      <variable citdl="integer" ilk="constant" name="T_STRING" />
      <variable citdl="integer" ilk="constant" name="T_STRING_VARNAME" />
      <variable citdl="integer" ilk="constant" name="T_VARIABLE" />
      <variable citdl="integer" ilk="constant" name="T_NUM_STRING" />
      <variable citdl="integer" ilk="constant" name="T_INLINE_HTML" />
      <variable citdl="integer" ilk="constant" name="T_CHARACTER" />
      <variable citdl="integer" ilk="constant" name="T_BAD_CHARACTER" />
      <variable citdl="integer" ilk="constant" name="T_ENCAPSED_AND_WHITESPACE" />
      <variable citdl="integer" ilk="constant" name="T_CONSTANT_ENCAPSED_STRING" />
      <variable citdl="integer" ilk="constant" name="T_ECHO" />
      <variable citdl="integer" ilk="constant" name="T_DO" />
      <variable citdl="integer" ilk="constant" name="T_WHILE" />
      <variable citdl="integer" ilk="constant" name="T_ENDWHILE" />
      <variable citdl="integer" ilk="constant" name="T_FOR" />
      <variable citdl="integer" ilk="constant" name="T_ENDFOR" />
      <variable citdl="integer" ilk="constant" name="T_FOREACH" />
      <variable citdl="integer" ilk="constant" name="T_ENDFOREACH" />
      <variable citdl="integer" ilk="constant" name="T_DECLARE" />
      <variable citdl="integer" ilk="constant" name="T_ENDDECLARE" />
      <variable citdl="integer" ilk="constant" name="T_AS" />
      <variable citdl="integer" ilk="constant" name="T_SWITCH" />
      <variable citdl="integer" ilk="constant" name="T_ENDSWITCH" />
      <variable citdl="integer" ilk="constant" name="T_CASE" />
      <variable citdl="integer" ilk="constant" name="T_DEFAULT" />
      <variable citdl="integer" ilk="constant" name="T_BREAK" />
      <variable citdl="integer" ilk="constant" name="T_CONTINUE" />
      <variable citdl="integer" ilk="constant" name="T_FUNCTION" />
      <variable citdl="integer" ilk="constant" name="T_CONST" />
      <variable citdl="integer" ilk="constant" name="T_RETURN" />
      <variable citdl="integer" ilk="constant" name="T_TRY" />
      <variable citdl="integer" ilk="constant" name="T_CATCH" />
      <variable citdl="integer" ilk="constant" name="T_THROW" />
      <variable citdl="integer" ilk="constant" name="T_USE" />
      <variable citdl="integer" ilk="constant" name="T_GLOBAL" />
      <variable citdl="integer" ilk="constant" name="T_PUBLIC" />
      <variable citdl="integer" ilk="constant" name="T_PROTECTED" />
      <variable citdl="integer" ilk="constant" name="T_PRIVATE" />
      <variable citdl="integer" ilk="constant" name="T_FINAL" />
      <variable citdl="integer" ilk="constant" name="T_ABSTRACT" />
      <variable citdl="integer" ilk="constant" name="T_STATIC" />
      <variable citdl="integer" ilk="constant" name="T_VAR" />
      <variable citdl="integer" ilk="constant" name="T_UNSET" />
      <variable citdl="integer" ilk="constant" name="T_ISSET" />
      <variable citdl="integer" ilk="constant" name="T_EMPTY" />
      <variable citdl="integer" ilk="constant" name="T_HALT_COMPILER" />
      <variable citdl="integer" ilk="constant" name="T_CLASS" />
      <variable citdl="integer" ilk="constant" name="T_INTERFACE" />
      <variable citdl="integer" ilk="constant" name="T_EXTENDS" />
      <variable citdl="integer" ilk="constant" name="T_IMPLEMENTS" />
      <variable citdl="integer" ilk="constant" name="T_OBJECT_OPERATOR" />
      <variable citdl="integer" ilk="constant" name="T_DOUBLE_ARROW" />
      <variable citdl="integer" ilk="constant" name="T_LIST" />
      <variable citdl="integer" ilk="constant" name="T_ARRAY" />
      <variable citdl="integer" ilk="constant" name="T_CLASS_C" />
      <variable citdl="integer" ilk="constant" name="T_METHOD_C" />
      <variable citdl="integer" ilk="constant" name="T_FUNC_C" />
      <variable citdl="integer" ilk="constant" name="T_LINE" />
      <variable citdl="integer" ilk="constant" name="T_FILE" />
      <variable citdl="integer" ilk="constant" name="T_COMMENT" />
      <variable citdl="integer" ilk="constant" name="T_DOC_COMMENT" />
      <variable citdl="integer" ilk="constant" name="T_OPEN_TAG" />
      <variable citdl="integer" ilk="constant" name="T_OPEN_TAG_WITH_ECHO" />
      <variable citdl="integer" ilk="constant" name="T_CLOSE_TAG" />
      <variable citdl="integer" ilk="constant" name="T_WHITESPACE" />
      <variable citdl="integer" ilk="constant" name="T_START_HEREDOC" />
      <variable citdl="integer" ilk="constant" name="T_END_HEREDOC" />
      <variable citdl="integer" ilk="constant" name="T_DOLLAR_OPEN_CURLY_BRACES" />
      <variable citdl="integer" ilk="constant" name="T_CURLY_OPEN" />
      <variable citdl="integer" ilk="constant" name="T_PAAMAYIM_NEKUDOTAYIM" />
      <variable citdl="integer" ilk="constant" name="T_DOUBLE_COLON" />
      <variable citdl="integer" ilk="constant" name="PREG_PATTERN_ORDER" />
      <variable citdl="integer" ilk="constant" name="PREG_SET_ORDER" />
      <variable citdl="integer" ilk="constant" name="PREG_OFFSET_CAPTURE" />
      <variable citdl="integer" ilk="constant" name="PREG_SPLIT_NO_EMPTY" />
      <variable citdl="integer" ilk="constant" name="PREG_SPLIT_DELIM_CAPTURE" />
      <variable citdl="integer" ilk="constant" name="PREG_SPLIT_OFFSET_CAPTURE" />
      <variable citdl="integer" ilk="constant" name="PREG_GREP_INVERT" />
      <variable citdl="integer" ilk="constant" name="PREG_NO_ERROR" />
      <variable citdl="integer" ilk="constant" name="PREG_INTERNAL_ERROR" />
      <variable citdl="integer" ilk="constant" name="PREG_BACKTRACK_LIMIT_ERROR" />
      <variable citdl="integer" ilk="constant" name="PREG_RECURSION_LIMIT_ERROR" />
      <variable citdl="integer" ilk="constant" name="PREG_BAD_UTF8_ERROR" />
      <variable citdl="string" ilk="constant" name="PCRE_VERSION" />
      <variable citdl="integer" ilk="constant" name="SQLITE_BOTH" />
      <variable citdl="integer" ilk="constant" name="SQLITE_NUM" />
      <variable citdl="integer" ilk="constant" name="SQLITE_ASSOC" />
      <variable citdl="integer" ilk="constant" name="SQLITE_OK" />
      <variable citdl="integer" ilk="constant" name="SQLITE_ERROR" />
      <variable citdl="integer" ilk="constant" name="SQLITE_INTERNAL" />
      <variable citdl="integer" ilk="constant" name="SQLITE_PERM" />
      <variable citdl="integer" ilk="constant" name="SQLITE_ABORT" />
      <variable citdl="integer" ilk="constant" name="SQLITE_BUSY" />
      <variable citdl="integer" ilk="constant" name="SQLITE_LOCKED" />
      <variable citdl="integer" ilk="constant" name="SQLITE_NOMEM" />
      <variable citdl="integer" ilk="constant" name="SQLITE_READONLY" />
      <variable citdl="integer" ilk="constant" name="SQLITE_INTERRUPT" />
      <variable citdl="integer" ilk="constant" name="SQLITE_IOERR" />
      <variable citdl="integer" ilk="constant" name="SQLITE_CORRUPT" />
      <variable citdl="integer" ilk="constant" name="SQLITE_NOTFOUND" />
      <variable citdl="integer" ilk="constant" name="SQLITE_FULL" />
      <variable citdl="integer" ilk="constant" name="SQLITE_CANTOPEN" />
      <variable citdl="integer" ilk="constant" name="SQLITE_PROTOCOL" />
      <variable citdl="integer" ilk="constant" name="SQLITE_EMPTY" />
      <variable citdl="integer" ilk="constant" name="SQLITE_SCHEMA" />
      <variable citdl="integer" ilk="constant" name="SQLITE_TOOBIG" />
      <variable citdl="integer" ilk="constant" name="SQLITE_CONSTRAINT" />
      <variable citdl="integer" ilk="constant" name="SQLITE_MISMATCH" />
      <variable citdl="integer" ilk="constant" name="SQLITE_MISUSE" />
      <variable citdl="integer" ilk="constant" name="SQLITE_NOLFS" />
      <variable citdl="integer" ilk="constant" name="SQLITE_AUTH" />
      <variable citdl="integer" ilk="constant" name="SQLITE_NOTADB" />
      <variable citdl="integer" ilk="constant" name="SQLITE_FORMAT" />
      <variable citdl="integer" ilk="constant" name="SQLITE_ROW" />
      <variable citdl="integer" ilk="constant" name="SQLITE_DONE" />
      <variable citdl="integer" ilk="constant" name="CONNECTION_ABORTED" />
      <variable citdl="integer" ilk="constant" name="CONNECTION_NORMAL" />
      <variable citdl="integer" ilk="constant" name="CONNECTION_TIMEOUT" />
      <variable citdl="integer" ilk="constant" name="INI_USER" />
      <variable citdl="integer" ilk="constant" name="INI_PERDIR" />
      <variable citdl="integer" ilk="constant" name="INI_SYSTEM" />
      <variable citdl="integer" ilk="constant" name="INI_ALL" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_SCHEME" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_HOST" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_PORT" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_USER" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_PASS" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_PATH" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_QUERY" />
      <variable citdl="integer" ilk="constant" name="PHP_URL_FRAGMENT" />
      <variable citdl="double" ilk="constant" name="M_E" />
      <variable citdl="double" ilk="constant" name="M_LOG2E" />
      <variable citdl="double" ilk="constant" name="M_LOG10E" />
      <variable citdl="double" ilk="constant" name="M_LN2" />
      <variable citdl="double" ilk="constant" name="M_LN10" />
      <variable citdl="double" ilk="constant" name="M_PI" />
      <variable citdl="double" ilk="constant" name="M_PI_2" />
      <variable citdl="double" ilk="constant" name="M_PI_4" />
      <variable citdl="double" ilk="constant" name="M_1_PI" />
      <variable citdl="double" ilk="constant" name="M_2_PI" />
      <variable citdl="double" ilk="constant" name="M_SQRTPI" />
      <variable citdl="double" ilk="constant" name="M_2_SQRTPI" />
      <variable citdl="double" ilk="constant" name="M_LNPI" />
      <variable citdl="double" ilk="constant" name="M_EULER" />
      <variable citdl="double" ilk="constant" name="M_SQRT2" />
      <variable citdl="double" ilk="constant" name="M_SQRT1_2" />
      <variable citdl="double" ilk="constant" name="M_SQRT3" />
      <variable citdl="double" ilk="constant" name="INF" />
      <variable citdl="double" ilk="constant" name="NAN" />
      <variable citdl="integer" ilk="constant" name="INFO_GENERAL" />
      <variable citdl="integer" ilk="constant" name="INFO_CREDITS" />
      <variable citdl="integer" ilk="constant" name="INFO_CONFIGURATION" />
      <variable citdl="integer" ilk="constant" name="INFO_MODULES" />
      <variable citdl="integer" ilk="constant" name="INFO_ENVIRONMENT" />
      <variable citdl="integer" ilk="constant" name="INFO_VARIABLES" />
      <variable citdl="integer" ilk="constant" name="INFO_LICENSE" />
      <variable citdl="integer" ilk="constant" name="INFO_ALL" />
      <variable citdl="integer" ilk="constant" name="CREDITS_GROUP" />
      <variable citdl="integer" ilk="constant" name="CREDITS_GENERAL" />
      <variable citdl="integer" ilk="constant" name="CREDITS_SAPI" />
      <variable citdl="integer" ilk="constant" name="CREDITS_MODULES" />
      <variable citdl="integer" ilk="constant" name="CREDITS_DOCS" />
      <variable citdl="integer" ilk="constant" name="CREDITS_FULLPAGE" />
      <variable citdl="integer" ilk="constant" name="CREDITS_QA" />
      <variable citdl="integer" ilk="constant" name="CREDITS_ALL" />
      <variable citdl="integer" ilk="constant" name="HTML_SPECIALCHARS" />
      <variable citdl="integer" ilk="constant" name="HTML_ENTITIES" />
      <variable citdl="integer" ilk="constant" name="ENT_COMPAT" />
      <variable citdl="integer" ilk="constant" name="ENT_QUOTES" />
      <variable citdl="integer" ilk="constant" name="ENT_NOQUOTES" />
      <variable citdl="integer" ilk="constant" name="STR_PAD_LEFT" />
      <variable citdl="integer" ilk="constant" name="STR_PAD_RIGHT" />
      <variable citdl="integer" ilk="constant" name="STR_PAD_BOTH" />
      <variable citdl="integer" ilk="constant" name="PATHINFO_DIRNAME" />
      <variable citdl="integer" ilk="constant" name="PATHINFO_BASENAME" />
      <variable citdl="integer" ilk="constant" name="PATHINFO_EXTENSION" />
      <variable citdl="integer" ilk="constant" name="PATHINFO_FILENAME" />
      <variable citdl="integer" ilk="constant" name="CHAR_MAX" />
      <variable citdl="integer" ilk="constant" name="LC_CTYPE" />
      <variable citdl="integer" ilk="constant" name="LC_NUMERIC" />
      <variable citdl="integer" ilk="constant" name="LC_TIME" />
      <variable citdl="integer" ilk="constant" name="LC_COLLATE" />
      <variable citdl="integer" ilk="constant" name="LC_MONETARY" />
      <variable citdl="integer" ilk="constant" name="LC_ALL" />
      <variable citdl="integer" ilk="constant" name="LC_MESSAGES" />
      <variable citdl="integer" ilk="constant" name="SEEK_SET" />
      <variable citdl="integer" ilk="constant" name="SEEK_CUR" />
      <variable citdl="integer" ilk="constant" name="SEEK_END" />
      <variable citdl="integer" ilk="constant" name="LOCK_SH" />
      <variable citdl="integer" ilk="constant" name="LOCK_EX" />
      <variable citdl="integer" ilk="constant" name="LOCK_UN" />
      <variable citdl="integer" ilk="constant" name="LOCK_NB" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_CONNECT" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_AUTH_REQUIRED" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_AUTH_RESULT" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_MIME_TYPE_IS" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_FILE_SIZE_IS" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_REDIRECTED" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_PROGRESS" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_FAILURE" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_COMPLETED" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_RESOLVE" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_INFO" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_WARN" />
      <variable citdl="integer" ilk="constant" name="STREAM_NOTIFY_SEVERITY_ERR" />
      <variable citdl="integer" ilk="constant" name="STREAM_FILTER_READ" />
      <variable citdl="integer" ilk="constant" name="STREAM_FILTER_WRITE" />
      <variable citdl="integer" ilk="constant" name="STREAM_FILTER_ALL" />
      <variable citdl="integer" ilk="constant" name="STREAM_CLIENT_PERSISTENT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CLIENT_ASYNC_CONNECT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CLIENT_CONNECT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_CLIENT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_CLIENT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_CLIENT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_CLIENT" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv2_SERVER" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv3_SERVER" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_SSLv23_SERVER" />
      <variable citdl="integer" ilk="constant" name="STREAM_CRYPTO_METHOD_TLS_SERVER" />
      <variable citdl="integer" ilk="constant" name="STREAM_SHUT_RD" />
      <variable citdl="integer" ilk="constant" name="STREAM_SHUT_WR" />
      <variable citdl="integer" ilk="constant" name="STREAM_SHUT_RDWR" />
      <variable citdl="integer" ilk="constant" name="STREAM_PF_INET" />
      <variable citdl="integer" ilk="constant" name="STREAM_PF_INET6" />
      <variable citdl="integer" ilk="constant" name="STREAM_PF_UNIX" />
      <variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_IP" />
      <variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_TCP" />
      <variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_UDP" />
      <variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_ICMP" />
      <variable citdl="integer" ilk="constant" name="STREAM_IPPROTO_RAW" />
      <variable citdl="integer" ilk="constant" name="STREAM_SOCK_STREAM" />
      <variable citdl="integer" ilk="constant" name="STREAM_SOCK_DGRAM" />
      <variable citdl="integer" ilk="constant" name="STREAM_SOCK_RAW" />
      <variable citdl="integer" ilk="constant" name="STREAM_SOCK_SEQPACKET" />
      <variable citdl="integer" ilk="constant" name="STREAM_SOCK_RDM" />
      <variable citdl="integer" ilk="constant" name="STREAM_PEEK" />
      <variable citdl="integer" ilk="constant" name="STREAM_OOB" />
      <variable citdl="integer" ilk="constant" name="STREAM_SERVER_BIND" />
      <variable citdl="integer" ilk="constant" name="STREAM_SERVER_LISTEN" />
      <variable citdl="integer" ilk="constant" name="FILE_USE_INCLUDE_PATH" />
      <variable citdl="integer" ilk="constant" name="FILE_IGNORE_NEW_LINES" />
      <variable citdl="integer" ilk="constant" name="FILE_SKIP_EMPTY_LINES" />
      <variable citdl="integer" ilk="constant" name="FILE_APPEND" />
      <variable citdl="integer" ilk="constant" name="FILE_NO_DEFAULT_CONTEXT" />
      <variable citdl="integer" ilk="constant" name="FNM_NOESCAPE" />
      <variable citdl="integer" ilk="constant" name="FNM_PATHNAME" />
      <variable citdl="integer" ilk="constant" name="FNM_PERIOD" />
      <variable citdl="integer" ilk="constant" name="FNM_CASEFOLD" />
      <variable citdl="integer" ilk="constant" name="PSFS_PASS_ON" />
      <variable citdl="integer" ilk="constant" name="PSFS_FEED_ME" />
      <variable citdl="integer" ilk="constant" name="PSFS_ERR_FATAL" />
      <variable citdl="integer" ilk="constant" name="PSFS_FLAG_NORMAL" />
      <variable citdl="integer" ilk="constant" name="PSFS_FLAG_FLUSH_INC" />
      <variable citdl="integer" ilk="constant" name="PSFS_FLAG_FLUSH_CLOSE" />
      <variable citdl="integer" ilk="constant" name="ABDAY_1" />
      <variable citdl="integer" ilk="constant" name="ABDAY_2" />
      <variable citdl="integer" ilk="constant" name="ABDAY_3" />
      <variable citdl="integer" ilk="constant" name="ABDAY_4" />
      <variable citdl="integer" ilk="constant" name="ABDAY_5" />
      <variable citdl="integer" ilk="constant" name="ABDAY_6" />
      <variable citdl="integer" ilk="constant" name="ABDAY_7" />
      <variable citdl="integer" ilk="constant" name="DAY_1" />
      <variable citdl="integer" ilk="constant" name="DAY_2" />
      <variable citdl="integer" ilk="constant" name="DAY_3" />
      <variable citdl="integer" ilk="constant" name="DAY_4" />
      <variable citdl="integer" ilk="constant" name="DAY_5" />
      <variable citdl="integer" ilk="constant" name="DAY_6" />
      <variable citdl="integer" ilk="constant" name="DAY_7" />
      <variable citdl="integer" ilk="constant" name="ABMON_1" />
      <variable citdl="integer" ilk="constant" name="ABMON_2" />
      <variable citdl="integer" ilk="constant" name="ABMON_3" />
      <variable citdl="integer" ilk="constant" name="ABMON_4" />
      <variable citdl="integer" ilk="constant" name="ABMON_5" />
      <variable citdl="integer" ilk="constant" name="ABMON_6" />
      <variable citdl="integer" ilk="constant" name="ABMON_7" />
      <variable citdl="integer" ilk="constant" name="ABMON_8" />
      <variable citdl="integer" ilk="constant" name="ABMON_9" />
      <variable citdl="integer" ilk="constant" name="ABMON_10" />
      <variable citdl="integer" ilk="constant" name="ABMON_11" />
      <variable citdl="integer" ilk="constant" name="ABMON_12" />
      <variable citdl="integer" ilk="constant" name="MON_1" />
      <variable citdl="integer" ilk="constant" name="MON_2" />
      <variable citdl="integer" ilk="constant" name="MON_3" />
      <variable citdl="integer" ilk="constant" name="MON_4" />
      <variable citdl="integer" ilk="constant" name="MON_5" />
      <variable citdl="integer" ilk="constant" name="MON_6" />
      <variable citdl="integer" ilk="constant" name="MON_7" />
      <variable citdl="integer" ilk="constant" name="MON_8" />
      <variable citdl="integer" ilk="constant" name="MON_9" />
      <variable citdl="integer" ilk="constant" name="MON_10" />
      <variable citdl="integer" ilk="constant" name="MON_11" />
      <variable citdl="integer" ilk="constant" name="MON_12" />
      <variable citdl="integer" ilk="constant" name="AM_STR" />
      <variable citdl="integer" ilk="constant" name="PM_STR" />
      <variable citdl="integer" ilk="constant" name="D_T_FMT" />
      <variable citdl="integer" ilk="constant" name="D_FMT" />
      <variable citdl="integer" ilk="constant" name="T_FMT" />
      <variable citdl="integer" ilk="constant" name="T_FMT_AMPM" />
      <variable citdl="integer" ilk="constant" name="ERA" />
      <variable citdl="integer" ilk="constant" name="ERA_D_T_FMT" />
      <variable citdl="integer" ilk="constant" name="ERA_D_FMT" />
      <variable citdl="integer" ilk="constant" name="ERA_T_FMT" />
      <variable citdl="integer" ilk="constant" name="ALT_DIGITS" />
      <variable citdl="integer" ilk="constant" name="CRNCYSTR" />
      <variable citdl="integer" ilk="constant" name="RADIXCHAR" />
      <variable citdl="integer" ilk="constant" name="THOUSEP" />
      <variable citdl="integer" ilk="constant" name="YESEXPR" />
      <variable citdl="integer" ilk="constant" name="NOEXPR" />
      <variable citdl="integer" ilk="constant" name="YESSTR" />
      <variable citdl="integer" ilk="constant" name="NOSTR" />
      <variable citdl="integer" ilk="constant" name="CODESET" />
      <variable citdl="integer" ilk="constant" name="CRYPT_SALT_LENGTH" />
      <variable citdl="integer" ilk="constant" name="CRYPT_STD_DES" />
      <variable citdl="integer" ilk="constant" name="CRYPT_EXT_DES" />
      <variable citdl="integer" ilk="constant" name="CRYPT_MD5" />
      <variable citdl="integer" ilk="constant" name="CRYPT_BLOWFISH" />
      <variable citdl="string" ilk="constant" name="DIRECTORY_SEPARATOR" />
      <variable citdl="string" ilk="constant" name="PATH_SEPARATOR" />
      <variable citdl="integer" ilk="constant" name="GLOB_BRACE" />
      <variable citdl="integer" ilk="constant" name="GLOB_MARK" />
      <variable citdl="integer" ilk="constant" name="GLOB_NOSORT" />
      <variable citdl="integer" ilk="constant" name="GLOB_NOCHECK" />
      <variable citdl="integer" ilk="constant" name="GLOB_NOESCAPE" />
      <variable citdl="integer" ilk="constant" name="GLOB_ERR" />
      <variable citdl="integer" ilk="constant" name="GLOB_ONLYDIR" />
      <variable citdl="integer" ilk="constant" name="GLOB_AVAILABLE_FLAGS" />
      <variable citdl="integer" ilk="constant" name="LOG_EMERG" />
      <variable citdl="integer" ilk="constant" name="LOG_ALERT" />
      <variable citdl="integer" ilk="constant" name="LOG_CRIT" />
      <variable citdl="integer" ilk="constant" name="LOG_ERR" />
      <variable citdl="integer" ilk="constant" name="LOG_WARNING" />
      <variable citdl="integer" ilk="constant" name="LOG_NOTICE" />
      <variable citdl="integer" ilk="constant" name="LOG_INFO" />
      <variable citdl="integer" ilk="constant" name="LOG_DEBUG" />
      <variable citdl="integer" ilk="constant" name="LOG_KERN" />
      <variable citdl="integer" ilk="constant" name="LOG_USER" />
      <variable citdl="integer" ilk="constant" name="LOG_MAIL" />
      <variable citdl="integer" ilk="constant" name="LOG_DAEMON" />
      <variable citdl="integer" ilk="constant" name="LOG_AUTH" />
      <variable citdl="integer" ilk="constant" name="LOG_SYSLOG" />
      <variable citdl="integer" ilk="constant" name="LOG_LPR" />
      <variable citdl="integer" ilk="constant" name="LOG_NEWS" />
      <variable citdl="integer" ilk="constant" name="LOG_UUCP" />
      <variable citdl="integer" ilk="constant" name="LOG_CRON" />
      <variable citdl="integer" ilk="constant" name="LOG_AUTHPRIV" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL0" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL1" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL2" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL3" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL4" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL5" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL6" />
      <variable citdl="integer" ilk="constant" name="LOG_LOCAL7" />
      <variable citdl="integer" ilk="constant" name="LOG_PID" />
      <variable citdl="integer" ilk="constant" name="LOG_CONS" />
      <variable citdl="integer" ilk="constant" name="LOG_ODELAY" />
      <variable citdl="integer" ilk="constant" name="LOG_NDELAY" />
      <variable citdl="integer" ilk="constant" name="LOG_NOWAIT" />
      <variable citdl="integer" ilk="constant" name="LOG_PERROR" />
      <variable citdl="integer" ilk="constant" name="EXTR_OVERWRITE" />
      <variable citdl="integer" ilk="constant" name="EXTR_SKIP" />
      <variable citdl="integer" ilk="constant" name="EXTR_PREFIX_SAME" />
      <variable citdl="integer" ilk="constant" name="EXTR_PREFIX_ALL" />
      <variable citdl="integer" ilk="constant" name="EXTR_PREFIX_INVALID" />
      <variable citdl="integer" ilk="constant" name="EXTR_PREFIX_IF_EXISTS" />
      <variable citdl="integer" ilk="constant" name="EXTR_IF_EXISTS" />
      <variable citdl="integer" ilk="constant" name="EXTR_REFS" />
      <variable citdl="integer" ilk="constant" name="SORT_ASC" />
      <variable citdl="integer" ilk="constant" name="SORT_DESC" />
      <variable citdl="integer" ilk="constant" name="SORT_REGULAR" />
      <variable citdl="integer" ilk="constant" name="SORT_NUMERIC" />
      <variable citdl="integer" ilk="constant" name="SORT_STRING" />
      <variable citdl="integer" ilk="constant" name="SORT_LOCALE_STRING" />
      <variable citdl="integer" ilk="constant" name="CASE_LOWER" />
      <variable citdl="integer" ilk="constant" name="CASE_UPPER" />
      <variable citdl="integer" ilk="constant" name="COUNT_NORMAL" />
      <variable citdl="integer" ilk="constant" name="COUNT_RECURSIVE" />
      <variable citdl="integer" ilk="constant" name="ASSERT_ACTIVE" />
      <variable citdl="integer" ilk="constant" name="ASSERT_CALLBACK" />
      <variable citdl="integer" ilk="constant" name="ASSERT_BAIL" />
      <variable citdl="integer" ilk="constant" name="ASSERT_WARNING" />
      <variable citdl="integer" ilk="constant" name="ASSERT_QUIET_EVAL" />
      <variable citdl="integer" ilk="constant" name="STREAM_USE_PATH" />
      <variable citdl="integer" ilk="constant" name="STREAM_IGNORE_URL" />
      <variable citdl="integer" ilk="constant" name="STREAM_ENFORCE_SAFE_MODE" />
      <variable citdl="integer" ilk="constant" name="STREAM_REPORT_ERRORS" />
      <variable citdl="integer" ilk="constant" name="STREAM_MUST_SEEK" />
      <variable citdl="integer" ilk="constant" name="STREAM_URL_STAT_LINK" />
      <variable citdl="integer" ilk="constant" name="STREAM_URL_STAT_QUIET" />
      <variable citdl="integer" ilk="constant" name="STREAM_MKDIR_RECURSIVE" />
      <variable citdl="integer" ilk="constant" name="STREAM_IS_URL" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_GIF" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JPEG" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_PNG" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_SWF" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_PSD" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_BMP" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_TIFF_II" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_TIFF_MM" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JPC" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JP2" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JPX" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JB2" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_IFF" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_WBMP" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_JPEG2000" />
      <variable citdl="integer" ilk="constant" name="IMAGETYPE_XBM" />
      <variable citdl="integer" ilk="constant" name="POSIX_F_OK" />
      <variable citdl="integer" ilk="constant" name="POSIX_X_OK" />
      <variable citdl="integer" ilk="constant" name="POSIX_W_OK" />
      <variable citdl="integer" ilk="constant" name="POSIX_R_OK" />
      <variable citdl="integer" ilk="constant" name="POSIX_S_IFREG" />
      <variable citdl="integer" ilk="constant" name="POSIX_S_IFCHR" />
      <variable citdl="integer" ilk="constant" name="POSIX_S_IFBLK" />
      <variable citdl="integer" ilk="constant" name="POSIX_S_IFIFO" />
      <variable citdl="integer" ilk="constant" name="POSIX_S_IFSOCK" />
      <variable citdl="string" ilk="constant" name="ICONV_IMPL" />
      <variable citdl="string" ilk="constant" name="ICONV_VERSION" />
      <variable citdl="integer" ilk="constant" name="ICONV_MIME_DECODE_STRICT" />
      <variable citdl="integer" ilk="constant" name="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" />
      <variable citdl="integer" ilk="constant" name="HASH_HMAC" />
      <variable citdl="integer" ilk="constant" name="INPUT_POST" />
      <variable citdl="integer" ilk="constant" name="INPUT_GET" />
      <variable citdl="integer" ilk="constant" name="INPUT_COOKIE" />
      <variable citdl="integer" ilk="constant" name="INPUT_ENV" />
      <variable citdl="integer" ilk="constant" name="INPUT_SERVER" />
      <variable citdl="integer" ilk="constant" name="INPUT_SESSION" />
      <variable citdl="integer" ilk="constant" name="INPUT_REQUEST" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_NONE" />
      <variable citdl="integer" ilk="constant" name="FILTER_REQUIRE_SCALAR" />
      <variable citdl="integer" ilk="constant" name="FILTER_REQUIRE_ARRAY" />
      <variable citdl="integer" ilk="constant" name="FILTER_FORCE_ARRAY" />
      <variable citdl="integer" ilk="constant" name="FILTER_NULL_ON_FAILURE" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_INT" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_BOOLEAN" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_FLOAT" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_REGEXP" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_URL" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_EMAIL" />
      <variable citdl="integer" ilk="constant" name="FILTER_VALIDATE_IP" />
      <variable citdl="integer" ilk="constant" name="FILTER_DEFAULT" />
      <variable citdl="integer" ilk="constant" name="FILTER_UNSAFE_RAW" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_STRING" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_STRIPPED" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_ENCODED" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_SPECIAL_CHARS" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_EMAIL" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_URL" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_NUMBER_INT" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_NUMBER_FLOAT" />
      <variable citdl="integer" ilk="constant" name="FILTER_SANITIZE_MAGIC_QUOTES" />
      <variable citdl="integer" ilk="constant" name="FILTER_CALLBACK" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_OCTAL" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_HEX" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_STRIP_LOW" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_STRIP_HIGH" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_LOW" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_HIGH" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ENCODE_AMP" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_ENCODE_QUOTES" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_EMPTY_STRING_NULL" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_FRACTION" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_THOUSAND" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_ALLOW_SCIENTIFIC" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_SCHEME_REQUIRED" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_HOST_REQUIRED" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_PATH_REQUIRED" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_QUERY_REQUIRED" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_IPV4" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_IPV6" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_RES_RANGE" />
      <variable citdl="integer" ilk="constant" name="FILTER_FLAG_NO_PRIV_RANGE" />
      <variable citdl="string" ilk="constant" name="DATE_ATOM" />
      <variable citdl="string" ilk="constant" name="DATE_COOKIE" />
      <variable citdl="string" ilk="constant" name="DATE_ISO8601" />
      <variable citdl="string" ilk="constant" name="DATE_RFC822" />
      <variable citdl="string" ilk="constant" name="DATE_RFC850" />
      <variable citdl="string" ilk="constant" name="DATE_RFC1036" />
      <variable citdl="string" ilk="constant" name="DATE_RFC1123" />
      <variable citdl="string" ilk="constant" name="DATE_RFC2822" />
      <variable citdl="string" ilk="constant" name="DATE_RFC3339" />
      <variable citdl="string" ilk="constant" name="DATE_RSS" />
      <variable citdl="string" ilk="constant" name="DATE_W3C" />
      <variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_TIMESTAMP" />
      <variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_STRING" />
      <variable citdl="integer" ilk="constant" name="SUNFUNCS_RET_DOUBLE" />
      <variable citdl="resource" ilk="constant" name="STDIN" />
      <variable citdl="resource" ilk="constant" name="STDOUT" />
      <variable citdl="resource" ilk="constant" name="STDERR" />
      <scope ilk="interface" line="472" lineend="492" name="ArrayAccess" signature="ArrayAccess">
        <scope doc="@param $offset to modify&#xA;@param $value new value" ilk="function" line="477" lineend="477" name="offsetSet" signature="offsetSet($offset, $value)">
          <variable ilk="argument" name="offset" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope doc="@param $offset to retrieve&#xA;@return value at given offset" ilk="function" line="482" lineend="482" name="offsetGet" returns="value" signature="value offsetGet($offset)">
          <variable ilk="argument" name="offset" />
        </scope>
        <scope doc="@param $offset to delete" ilk="function" line="486" lineend="486" name="offsetUnset" signature="offsetUnset($offset)">
          <variable ilk="argument" name="offset" />
        </scope>
        <scope doc="@param $offset to check&#xA;@return whether the offset exists." ilk="function" line="491" lineend="491" name="offsetExists" returns="whether" signature="whether offsetExists($offset)">
          <variable ilk="argument" name="offset" />
        </scope>
      </scope>
      <scope ilk="interface" line="562" lineend="567" name="Countable" signature="Countable">
        <scope doc="@return the number the global function count() should show" ilk="function" line="566" lineend="566" name="count" returns="the" signature="the count()" />
      </scope>
      <scope ilk="interface" interfacerefs="Traversable" line="535" lineend="556" name="Iterator" signature="Iterator extends Traversable">
        <scope doc="Rewind the Iterator to the first element." ilk="function" line="539" lineend="539" name="rewind" signature="rewind()" />
        <scope doc="Return the current element." ilk="function" line="543" lineend="543" name="current" signature="current()" />
        <scope doc="Return the key of the current element." ilk="function" line="547" lineend="547" name="key" signature="key()" />
        <scope doc="Move forward to next element." ilk="function" line="551" lineend="551" name="next" signature="next()" />
        <scope doc="Check if there is a current element after calls to rewind() or next()." ilk="function" line="555" lineend="555" name="valid" signature="valid()" />
      </scope>
      <scope ilk="interface" interfacerefs="Traversable" line="519" lineend="524" name="IteratorAggregate" signature="IteratorAggregate extends Traversable">
        <scope doc="@return an Iterator for the implementing object." ilk="function" line="523" lineend="523" name="getIterator" returns="an" signature="an getIterator()" />
      </scope>
      <scope ilk="interface" line="581" lineend="594" name="Serializable" signature="Serializable">
        <scope doc="@return string representation of the instance" ilk="function" line="586" lineend="586" name="serialize" returns="string" signature="string serialize()" />
        <scope doc="@note This is a constructor&#xA;&#xA;@param $serialized data read from stream to construct the instance" ilk="function" line="593" lineend="593" name="unserialize" signature="unserialize($serialized)">
          <variable ilk="argument" name="serialized" />
        </scope>
      </scope>
      <scope ilk="interface" line="1120" lineend="1126" name="SplObserver" signature="SplObserver">
        <scope doc="Called from the subject (i.e. when it&apos;s value has changed).&#xA;@param $subject the callee" ilk="function" line="1125" lineend="1125" name="update" signature="update(SplSubject $subject)">
          <variable citdl="SplSubject" ilk="argument" name="subject" />
        </scope>
      </scope>
      <scope ilk="interface" line="1133" lineend="1147" name="SplSubject" signature="SplSubject">
        <scope doc="@param $observer new observer to attach" ilk="function" line="1137" lineend="1137" name="attach" signature="attach(SplObserver $observer)">
          <variable citdl="SplObserver" ilk="argument" name="observer" />
        </scope>
        <scope doc="@param $observer existing observer to detach&#xA;@note a non attached observer shouldn&apos;t result in a warning or similar" ilk="function" line="1142" lineend="1142" name="detach" signature="detach(SplObserver $observer)">
          <variable citdl="SplObserver" ilk="argument" name="observer" />
        </scope>
        <scope doc="Notify all observers" ilk="function" line="1146" lineend="1146" name="notify" signature="notify()" />
      </scope>
      <scope ilk="interface" line="509" lineend="511" name="Traversable" signature="Traversable" />
    </scope>
  </file>
</codeintel>
